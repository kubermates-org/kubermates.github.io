<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jenkins-X on Kubermates</title><link>https://kubermates.org/tags/jenkins-x/</link><description>Recent content in Jenkins-X on Kubermates</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 06 May 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://kubermates.org/tags/jenkins-x/index.xml" rel="self" type="application/rss+xml"/><item><title>Blog: Migrate to Google Artifact Registry</title><link>https://kubermates.org/docs/2024-05-06-blog-migrate-to-google-artifact-registry/</link><pubDate>Mon, 06 May 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-05-06-blog-migrate-to-google-artifact-registry/</guid><description>Migrate to Google Artifact Registry Google has announced that container registry will be shut down some time after March 18, 2025. For GKE clusters created with version 1. 12. 0 or later of terraform-google-jx it‚Äôs unlikely that anything needs to be done, but for older clusters you should upgrade your cluster while considering our advice regarding migration from container registry to artifact registry. If you are using a Google Service Account to run terraform you need to add the role requirement roles/artifactregistry. admin. See our guide regarding Google Service Account for details. ‚Üê Previous.</description></item><item><title>Blog: Improve your changelogs</title><link>https://kubermates.org/docs/2023-05-24-blog-improve-your-changelogs/</link><pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2023-05-24-blog-improve-your-changelogs/</guid><description>Improve your changelogs Background Overview of major improvements Example How to write commit messages Manually edit changelog Configuration Changelog for cluster repository Reuse pull requests Custom pipelines Jira as issue tracker More customizations References A standard part of the Jenkins X pipelines since a long time is the execution of jx changelog create that takes the commit messages between the release currently being created and the previous one and creates a change log from these. The change log is then stored as a release note in GitHub or other git provider. jx changelog create During the last year some improvements have landed in various Jenkins X components to improve the changelogs and their usefulness. So I‚Äôll take this opportunity to describe these improvements and also in general give hints to how to get useful changelogs. Changelogs haven‚Äôt been very informative with regard to upgrades, ie those applied with jx promote or jx updatebot. One example of this is the release notes of jx after the split out of most functionality to plugins. Lately these have improved due to new functionality to propagate changelogs via pull requests. jx promote jx updatebot One place where changelogs have been completely lacking is in cluster repositories. But using the functionality for propagation of changelogs and some changes in jx boot job you can now a get a changelog for every successful application of changes in a cluster. An example of what this functionality achieves can be seen in a release of jx: https://github. com/jenkins-x/jx/releases/tag/v3. 10.</description></item><item><title>Blog: Reconcile with kpt live apply</title><link>https://kubermates.org/docs/2023-03-09-blog-reconcile-with-kpt-live-apply/</link><pubDate>Thu, 09 Mar 2023 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2023-03-09-blog-reconcile-with-kpt-live-apply/</guid><description>Reconcile with kpt live apply Configuration Waiting for resources to be reconciled Tagging and release notes kpt live apply Since the dawn of Jenkins X 3 the default last step of reconciling the state of the files in your cluster repository to your cluster has been to execute kubectl apply. You can find more details about this here. kubectl apply There are some drawbacks with kubectl apply though. The one that made me start looking for alternatives was that if you remove a resource from your cluster repository it may not be removed from your cluster. The way deletion works with kubectl apply is that it is handed the option &amp;ndash;prune which will remove resources that are not in the manifests. Except that it doesn‚Äôt always work as expected. It will only remove certain kinds of resources defined in kubectl. In my case I removed an HorizontalPodAutoscaler from my cluster repository, but it wasn‚Äôt removed from my cluster. kubectl apply kubectl apply &amp;ndash;prune When trying to find a solution to this I first tried to override this default list in kubectl of things to prune, but this turned out to be difficult in the general case. I also tried the already existing alternative of using kapp to apply the manifests, but I couldn‚Äôt get that to work. Looking for other options I settled for kpt live apply. kapp kpt live apply You enable the use of kpt live apply by adding kpt live apply KUBEAPPLY = kpt-apply KUBEAPPLY = kpt-apply to the Makefile of your cluster repository anywhere before include versionStream/src/Makefile.</description></item><item><title>Blog: Foreign aliases</title><link>https://kubermates.org/docs/2023-02-09-blog-foreign-aliases/</link><pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2023-02-09-blog-foreign-aliases/</guid><description>Foreign aliases Background Foreign aliases OWNERS and OWNERS_ALIASES in new repositories In an organisation with many repositories and developers that are frequently shifting the maintenance of OWNERS and OWNERS_ALIASES files can be tedious. In the passing year a couple of functionalities has been added to help with this. To avoid maintaining the OWNERS_ALIASES file in many repositories you can now refer to the OWNERS_ALIASES file in another repository. In the Jenkins X project we have the main OWNERS_ALIASES file in the jx-community repository. So in the jx repository the OWNERS_ALIASES file only looks like this: foreignAliases : - name : jx-community foreignAliases : - name : jx-community The organisation defaults to be the same as for the repository, but can specify as well. So in the jx-project repository the OWNERS_ALIASES file looks like this: foreignAliases : - name : jx-community org : jenkins-x foreignAliases : - name : jx-community org : jenkins-x Using the filed ref you can also specify a branch or tag to use instead of the default one of the repository. ref When creating or importing a repository using jx project the default content of OWNERS and OWNERS_ALIASES isn‚Äôt that useful since only the current user are put in the files. jx project If you create your own quickstarts you place the OWNERS and / or OWNERS_ALIASES files with the content of your liking in those. A recent new functionality is that you can put OWNERS and / or OWNERS_ALIASES files in the extensions directory of your cluster repository. These files will then be used as the default content of the files in new repositories. extensions ‚Üê Previous.</description></item><item><title>Blog: Project ideas for Google Summer of Code 2023 ‚òÄÔ∏è</title><link>https://kubermates.org/docs/2023-02-06-blog-project-ideas-for-google-summer-of-code-2023/</link><pubDate>Mon, 06 Feb 2023 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2023-02-06-blog-project-ideas-for-google-summer-of-code-2023/</guid><description>Project ideas for Google Summer of Code 2023 ‚òÄÔ∏è 1. CD events integration with Jenkins X 2. Implement drift detection (gitops) 3. RBAC (Role Based Access Control) in Jenkins X UI 4. Simplifying Jenkins X pipeline syntax 5. Multi-tenancy in Jenkins X Next Steps We have put together some project ideas as part of our application to participate in the Google Summer of Code 2023 program. The cdEvents project standardises the way systems talk to each other, which enables Interoperability between systems so they speak a common language through the cdEvents spec in the event. Creating a capability in Jenkins X that can receive and sent a cdEvent would benefit the project and the DevOps ecosystem in general, by stopping glue code used to integrate systems and power innovation by letting end users swap out tools with no effort. Ability to receive cdEvents Ability to parse cdEvents so Jenkins X understands them Ability to send cdEvents Jenkins X, Kubernetes, golang, cdEvents Brad McCoy https://cloudevents. io/ https://www. youtube. com/watch?v=yg7RuDWHwV8 https://www.</description></item><item><title>Blog: GSoC 2022 Final Report: Building Jenkins X UI</title><link>https://kubermates.org/docs/2022-11-13-blog-gsoc-2022-final-report-building-jenkins-x-ui/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-11-13-blog-gsoc-2022-final-report-building-jenkins-x-ui/</guid><description>GSoC 2022 Final Report: Building Jenkins X UI Jenkins X New UI Why need a new UI? How to use it? Work Done Stop a running or pending PipelineActivity from UI Show message with status of the PipelineActivity Implement a DAG for PipelineActivity What‚Äôs next? Acknowledgements It is a web application built with Golang for the backend and Sveltekit for the frontend, both of which are built together and used in the same container. To function properly, it must be installed as a helm chart with Jenkins X CRDs. üåü It has light and dark themes. A good UI is essential for a CI/CD tool, as not everyone is familiar with the CLI. The current UI (jx-pipeline-visualizer) is a read-only UI, the user can view the logs of PipelineActivity but neither can start nor stop the pipeline. Features that the UI will provide: Start and Stop a PipelineActivity. Have an audit trail. A graphical representation of PipelineActivity. RBAC to limit access to certain functionalities. New Jenkins X UI focus on Simplicity, Security and a Superb User Experience. This is NOT GA (General Availability) yet. Visit the project repo here to try it.</description></item><item><title>Blog: GSoC 2022 Final Report: Improving Supply Chain Security</title><link>https://kubermates.org/docs/2022-11-08-blog-gsoc-2022-final-report-improving-supply-chain-security/</link><pubDate>Tue, 08 Nov 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-11-08-blog-gsoc-2022-final-report-improving-supply-chain-security/</guid><description>GSoC 2022 Final Report: Improving Supply Chain Security Project Description Work Done Enhancing the jx version output Integrating with Tekton Chains to sign TaskRuns and PipelineRuns Software Bill of Materials (SBOM) Signing Jenkins X artifacts What‚Äôs next? Acknowledgements Supply chain security is a rising concern in the current software era. Securing the software supply chain encompasses vulnerability remediation and the implementation of controls throughout the software development process. Due to massive increase in attacks on software supply chain and the diversity of its types , Jenkins X has to make efforts to ensure that the build process is secure. As part of securing Jenkins X installation by default I worked on both securing our own components and enabling our users to use these features in their build and release steps. The work done so far covers these four sections. Enhancing the jx version output jx version Integrating with Tekton Chains to sign TaskRuns and PipelineRuns Software Bill of Materials (SBOM) Signing Jenkins X artifacts jx version Description: A first step towards securing Jenkins X supply chain is to increase the amount of information gained from running jx version command. jx version Implementation The issue created for this task is here. The PR to fix it is here. Description: As Jenkins X uses tekton as its pipeline execution engine, TaskRun and PipelineRun are considered the key components of Jenkins X pipeline activities and steps Tekton Chains monitors the execution of all TaskRun and PipelineRun inside the cluster and takes a snapshot upon completion of each of them to sign with user-provided cryptographic keys and store them on the backend storage. The payload and signature cn be verified later using cosign verify-blob. TaskRun PipelineRun activities steps TaskRun PipelineRun cosign verify-blob Implementation I used the helm chart developed by Chainguard for integrating Chains with Jenkins X. To integrate the chart and added support for it on jx3-versions to make installation of helm chart easy for our users.</description></item><item><title>Blog: Hacktoberfest 2022</title><link>https://kubermates.org/docs/2022-10-03-blog-hacktoberfest-2022/</link><pubDate>Mon, 03 Oct 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-10-03-blog-hacktoberfest-2022/</guid><description>Hacktoberfest 2022 Contribute to Jenkins X Ask us questions We are excited to announce that Jenkins X will be participating in Hacktoberfest again this year! Hacktoberfest is a month-long global celebration of open source software. All backgrounds and skill levels are encouraged to participate in Hacktoberfest and join a global community of open source contributors. Learn more about Hacktoberfest and sign up here. We welcome your contributions to the Jenkins X project ! Issues labelled ‚Äúhacktoberfest‚Äù generally indicate good first issues. However, all pull requests will count towards your Hacktoberfest challenge. Refer to the contribution guides for making code and documentation changes. Refer to this document to get an idea about the location of the different Jenkins X source code repositories. Normally the labels assigned to the ticket will help you in deciding which part of the Jenkins X codebase to look at. The maintainers will also try to link the relevant repository for hacktoberfest issues in the issue comment. Once you are done with the contribution, request a review from the maintainers by adding the comment in your pull request. /cc @ankitm123 @babadofar @msvticket @osamamagdy @rajatgupta24 @tomhobson /cc @ankitm123 @babadofar @msvticket @osamamagdy @rajatgupta24 @tomhobson We‚Äôre happy to help if you have any questions. Talk to us on our slack channels, which are part of the Kubernetes slack.</description></item><item><title>Blog: Introduction to Software Bill Of Materials</title><link>https://kubermates.org/docs/2022-07-24-blog-introduction-to-software-bill-of-materials/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-07-24-blog-introduction-to-software-bill-of-materials/</guid><description>Introduction to Software Bill Of Materials Introduction Definition: What is SBOM? Use cases in Supply chain security Before going through Software Bill Of Materials (SBOMs), we need to set the ground for a rising concern in the software industry which is Software Supply Chain Security. Like traditional industries, deploying a piece of a software artifact goes through multiple stages composed of collecting source code components, libraries, tools, and processes used in those stages. Fig. 1 https://blog. convisoappsec. com/en/is-your-software-supply-chain-secure/ A supply chain attack can occur along the chain from submitting unauthorized malicious code in your source, unauthorized injection of harmful dependencies, and even replacing packages after being built with other compromised artifacts. A more detailed explanation about those types of attacks is here Due to its importance and being a critical issue, generating SBOM for your software adds another layer of protection to this threat. As far as we know, developers around the world are building web applications using hundreds of third-party open-source libraries and packages. You can confidently tell that 90% of the software products around the world are built over open-source components. With that in mind, we need to keep track of using these dependencies while building our applications. What if there are vulnerabilities in the libraries we use? How to efficiently protect ourselves against it?. Software Bill Of Materials (SBOM) is a complete formally structured list of the materials (components, packages, libraries, SDK) used to build (i.</description></item><item><title>Blog: Software Bill Of Materials Formats</title><link>https://kubermates.org/docs/2022-07-24-blog-software-bill-of-materials-formats/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-07-24-blog-software-bill-of-materials-formats/</guid><description>Software Bill Of Materials Formats Prerequisite Different SBOM formats comparison 1 - The Software Package Data Exchange (SPDX) 2 - Software Identification (SWID) Tags 3 - CycloneDX Generate SBOMs manually? definitely not If you don‚Äôt understand what is Software Bill of Materials (SBOM), please read this blog post first. The National Telecommunications and Information Administration (NTIA) in the U. S. defined minimum requirements for SBOM formats : Identifying the supplier of the software component. Identifying the details about the version of the component. Including unique identifiers for the component like cryptographic hash functions. Including the relationships between all dependencies inside the component. Including a timestamp of when and by whom the SBOM report was created or last modified In this section, we discuss different kinds and formats for SBOM standards and make a brief comparison between them. Three commonly used standards achieved the NTIA minimum requirements for SBOM generation and each one results in a different final SBOM document. History: SPDX is an open-source machine-readable format adopted by the Linux Foundation as an industry standard. The specifications are implemented as a file format that identifies the software components within a larger piece of computer software and fulfilling the requirements of NTIA. The SPDX project started in 2010 and was initially dedicated to solving the issues around open source licensing compliance.</description></item><item><title>Blog: Software Bill Of Materials generation tools</title><link>https://kubermates.org/docs/2022-07-24-blog-software-bill-of-materials-generation-tools/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-07-24-blog-software-bill-of-materials-generation-tools/</guid><description>Software Bill Of Materials generation tools Prerequisite Different SBOM generation tools comparison 1 - Anchore Syft 2- Opensbom‚Äôs Spdx-Sbom-Generator 3- Kubernetes BOM 4- Microsoft SBOM tool 5- Tern Before you read this, you have to understand what are SBOMs and what are different formats of SBOMs If you got this far, you already realize the importance of SBOM generation, and also it should meet certain requirements to achieve its purpose. Due to various requirements depending on what standard you‚Äôre following, there has to be a way to automatically generate different output formats for different standards. Also, it has to be suited for ci/cd solutions to keep up with the increasing number of releases for each organization. Note: Here we‚Äôre only considering open source tools Introduction: Anchore is a platform that implements sbom-powered supply chain security solutions for developers and enterprises. For generating SBOMs, a CLI tool and library named Syft was developed by Anchore that could be injected into your ci/cd pipeline to generate SBOMs from container images and filesystems at each step. Integration and Support: Syft is supported on Linux, Mac, and Windows and it can run as a docker container which makes it a great suit for CI systems. Other than the 3 SBOM standards, Syft can generate its JSON standard format to be input for other Anchore tools like Grype which is a vulnerability scanner for container images and filesystems. It supports projects based on the following package managers: Alpine (apk) C (conan) C++ (conan) Dart (pubs) Debian (dpkg) Dotnet (deps. json) Objective-C (cocoapods) Go (go. mod, Go binaries) Haskell (cabal, stack) Java (jar, ear, war, par, sar) JavaScript (npm, yarn) Jenkins Plugins (jpi, hpi) PHP (composer) Python (wheel, egg, poetry, requirements. txt) Red Hat (rpm) Ruby (gem) Rust (cargo. lock) Swift (cocoapods) Features and Specs: Easy to use Syft can generate a simple basic sbom by just running syft &lt;image&gt; this will only include the softwares included in the image‚Äôs final layer.</description></item><item><title>Blog: GSoC 2022 Community Bonding Period with Jenkins X</title><link>https://kubermates.org/docs/2022-07-12-blog-gsoc-2022-community-bonding-period-with-jenkins-x/</link><pubDate>Tue, 12 Jul 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-07-12-blog-gsoc-2022-community-bonding-period-with-jenkins-x/</guid><description>GSoC 2022 Community Bonding Period with Jenkins X Introduction How I started What I learned during Community Bonding Period Highlights Hello everyone, I am Rajat Gupta, pursuing my bachelor‚Äôs in Information Technology. In 2022, I have been selected as a student developer in Google Summer of Code under Jenkins X. We will be building a new UI for Jenkins X. I got this news on May 20th, as I received an email from google. The technologies needed were Golang , Kubernetes , and GitOps. I used golang only once before, while linting Jenkins X codebase, I only used Kubernetes once before while setting up a k3s cluster to run Jenkins X pipelines. These tasks were necessary to do for all GSoC participants. Apart from that, I was a total beginner. So, when I got selected, I had a lot to learn, my mentors gave me a 30 Day plan. They also suggested some resources and conference talks which made it simple for me to start. 30 Day plan was: Learn golang Getting started with Kubernetes Learn what is a CRD and how they are used? Complete a tutorial on Kubebuilder Getting started with Tekton pipelines Learn Jenkins X We also had some amazing pair programming sessions, where I used to share my screen and my mentor guided me through, which is not common because mentors have a very busy schedule. But my mentors helped me a lot.</description></item><item><title>Blog: Kubernetes 1.22 - Breaking change!</title><link>https://kubermates.org/docs/2022-04-22-blog-kubernetes-1-22-breaking-change/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-04-22-blog-kubernetes-1-22-breaking-change/</guid><description>Kubernetes 1. 22 - Breaking change! To allow Jenkins X to support Kubernetes 1. 22, we had to update our version of Tekton. This updated version of Tekton contains breaking changes that has consequences if you made your own custom Jenkins X pipelines. To make sure that your custom pipelines continue to work after this upgrade, you must edit the resource settings in your pipelines. Otherwise your pipelines will most likely not be able to start at all, or if they do, consume a lot of resources. Tekton made changes in how to calculate the resources needed to run a pipeline, in order to support the concept of LimitRange in Kubernetes (introduced in Kubernetes version 1. 10). Previously, Tekton simply used the maximum requested cpu and memory of any single step, and set that as limits for the all steps in the pipeline. For more details, please read the Tekton documentation on LimitRange. In the Tekton pipeline files, the StepTemplate needs to be changed to not specify resource requests , but only setting an empty resource limits : requests limits stepTemplate : image : uses:jenkins-x/jx3-pipeline-catalog/tasks/go/release. yaml@a5ab19ebc5a074e0402c5016b11bc11b32cc5c83 name : &amp;quot;&amp;quot; resources : # override limits for all containers here limits : {} stepTemplate : image : uses:jenkins-x/jx3-pipeline-catalog/tasks/go/release.</description></item><item><title>Blog: Google Summer of Code 2022 project proposal template ‚òÄÔ∏è</title><link>https://kubermates.org/docs/2022-04-05-blog-google-summer-of-code-2022-project-proposal-template/</link><pubDate>Tue, 05 Apr 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-04-05-blog-google-summer-of-code-2022-project-proposal-template/</guid><description>Google Summer of Code 2022 project proposal template ‚òÄÔ∏è Proposal template Full name: Country: Time zone: Email: Github ID: Personal blog (optional): Twitter/LinkedIn/others: Have you participated in the Google Summer of Code previously? Please describe your experience. Are you applying to any other organizations this year? If so, please list them. How many hours will you devote to your GSoC project each week? Do you have any other commitments during the summer? Have you ever contributed code to Jenkins X? If you have, post the Pull Request (PR) links (It‚Äôs ok if they have not been merged/approved yet) Do you plan on contributing to the Jenkins X project after GSoC is finished? Were you able to install Jenkins X locally on your laptop? If no, please explain why (Unsupported architecture, missing documentation, time constraints etc)? If yes, how was the installation experience (missing documentation, complexity etc)? If no, please explain why (Unsupported architecture, missing documentation, time constraints etc)? If yes, how was the installation experience (missing documentation, complexity etc)? Have you used kubernetes in the past? Please provide a brief description and if possible links to the work. Have you used golang in the past? Please provide a brief description and if possible some code samples. (If you are interested in the UI project) Have you worked with a frontend framework/library in the past? Please provide a brief description and if possible some code samples. Repeat this section for as many project ideas as you want (Go in the order most likely to least likely). Title of the idea that you are interested in Brief description of the idea. Have you worked on a similar project in the past? If yes, please provide a brief description (with links if possible) How will the project benefit Jenkins X and the community Will it help in driving adoption of Jenkins X? If yes, then how/why? Will it help in driving adoption of Jenkins X? If yes, then how/why? Deliverables Include any milestones and deadlines Include time for investigation, coding and documentation Include any milestones and deadlines Include time for investigation, coding and documentation ‚Üê Previous.</description></item><item><title>Blog: Project proposal for Google Season of Docs 2022 üìÑ</title><link>https://kubermates.org/docs/2022-03-23-blog-project-proposal-for-google-season-of-docs-2022/</link><pubDate>Wed, 23 Mar 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-03-23-blog-project-proposal-for-google-season-of-docs-2022/</guid><description>Project proposal for Google Season of Docs 2022 üìÑ Project proposal Timeline Budget Additional information Other ideas We have put together a project proposal as part of our application to participate in the Google Season of Docs 2022 program. Jenkins X provides automated CI/CD for Kubernetes with Preview Environments on Pull Requests using Cloud Native pipelines from Tekton. End users of Jenkins X are unable to find information on how to use Jenkins X for real world use cases which includes: Production best practices Scanning images in Jenkins X pipelines How to make your app use different configuration/secrets for each environment Observability for your apps, logging, metrics, tracing Tests (Integration, e2e) Artifact management Multi cluster Integration with other tools in the cloud native sector Production best practices Scanning images in Jenkins X pipelines How to make your app use different configuration/secrets for each environment Observability for your apps, logging, metrics, tracing Tests (Integration, e2e) Artifact management Multi cluster Integration with other tools in the cloud native sector Audit the current Jenkins X documentation and create a friction log Use the friction log as a guide for understanding the gaps in the documentation Interact with the Jenkins X community to create a list of top use cases Create a survey Look at the github issues and slack messages Create a survey Look at the github issues and slack messages Work with the volunteers to incorporate those changes into the documentation Establish a feedback loop (the target customers are the end users of Jenkins X) to improve the documentation Decrease in the number of github issues raised by end users on documentation related to common real world use cases Short 1-2 minute videos on common tasks that end users of Jenkins X would like to perform. Must have: Experience with github Communication skills to work with the Jenkins X community Creating online surveys Experience with github Communication skills to work with the Jenkins X community Creating online surveys Nice to have: Basic experience with docker compose (local development scripts use compose) Good video editing skills. Some knowledge working with the documentation of other tools in the kubernetes ecosystem Basic experience with docker compose (local development scripts use compose) Good video editing skills. Some knowledge working with the documentation of other tools in the kubernetes ecosystem Ankit D Mohapatra Christoffer Vig M√•rten Svantesson Tom Hobson The project will take roughly 6 months to complete. Once the technical writer is selected, we will do an orientation to bring him up to speed. This is the timeline we have in mind, but we are flexible. The cost of the t-shirt was taken from here. The t-shirts are for the technical writer, volunteers and any member of the jenkins X community (not officially listed as a volunteer) who helps out by answering the technical writer‚Äôs questions. Previous participation in Season of Docs, Google Summer of Code or others Jenkins X participated in the 2020 Season of docs. The maturity level matrix created by the technical writer is still used by the community to evaluate if Jenkins X will work for their use case, as well as used by the Jenkins X maintainers to plan the roadmap for improving Jenkins X.</description></item><item><title>Blog: Google Summer of Code 2022 ‚òÄÔ∏è</title><link>https://kubermates.org/docs/2022-03-12-blog-google-summer-of-code-2022/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-03-12-blog-google-summer-of-code-2022/</guid><description>Google Summer of Code 2022 ‚òÄÔ∏è How many contributors are we looking for? What are we looking for in an ideal Jenkins X contributor? What can prospective contributors do? (March 7 - April 19) Interview process and selection criteria (April 19 and May 12) We are very happy to announce that Jenkins X has been selected to participate in the Google Summer of Code (GSoC) 2022! If you are new to GSoC and want to learn more about it, check out their new site. You can find the list of project ideas from Jenkins X here. If you are interested in applying to Jenkins X, please check the timeline. Apply as early as possible. This post aims to give GSoC contributors insight into the selection process and how to get started. We have 3 mentors signed up at the moment and are looking to select a maximum of 2 applicants. We want you to have a great experience contributing to Jenkins X and learn lots of new things! Willingness to learn Jenkins X and engage with the community Independence and a drive to investigate and propose solutions to complex issues that might occur during implementation (Optional) Eventually become a Jenkins X maintainer (and some day mentor new GSoC contributors)! You do not have to complete all of these tasks. This is presented here so that you have some clarity around where to start and which resources to follow. Recommended: Join the jenkins X community slack channels and say hello :) We prefer you post messages in the jenkins-x-dev channel Attend the office hours We prefer you post messages in the jenkins-x-dev channel Attend the office hours Recommended: Interact with potential mentors to understand/review the requirements of the projects. Recommended: Start working on your proposal early on. Optional: Learn about docker Optional: Learn about kubernetes Optional: Learn the basics of golang Optional: Understand Jenkins X concepts and fundamentals by going over the documentation Optional: Set up Jenkins X locally and give it a go (Please don‚Äôt spend money running Jenkins X in the cloud). We prefer you use k3s for this, as it‚Äôs less resource intensive and can be installed locally on your workstation (linux).</description></item><item><title>Blog: Project ideas for Google Summer of Code 2022 ‚òÄÔ∏è</title><link>https://kubermates.org/docs/2022-02-20-blog-project-ideas-for-google-summer-of-code-2022/</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-02-20-blog-project-ideas-for-google-summer-of-code-2022/</guid><description>Project ideas for Google Summer of Code 2022 ‚òÄÔ∏è 1. Cloud events integration with Jenkins X 2. Supply chain security: Improve integration with sigstore and look at tekton chains 3. New Jenkins X UI 4. Quickstart Improvements 5. Implement drift detection (gitops) 6. Multi-tenancy in Jenkins X Next Steps We have put together some project ideas as part of our application to participate in the Google Summer of Code 2022 program. The only way to trigger jobs/workflows in Jenkins X at the moment is by listening to events from Source Control Management (SCM) providers like github, gitlab, bitbucket, however it would be nice to listen to other event sources and trigger jobs/pipelines in Jenkins X. One interesting application would be to trigger some Jenkins X job in response to some alerting event (pagerduty, opsgenie). As a start we should focus on (emitting and listening to) cloudevents which define a common format for events produced from different sources. This will also help make Jenkins X compatible with other platforms. Jenkins X should be able to emit cloud events Jenkins X should be able to listen to cloud events, and run pipelines Updated documentation Golang, kubernetes, cloudevents, familiarity with lighthouse would be great, but not required Ankit D Mohapatra Christopher Vig Tom Hobson https://cloudevents.</description></item><item><title>Blog: Jenkins X Survey Result Details</title><link>https://kubermates.org/docs/2022-02-15-blog-jenkins-x-survey-result-details/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-02-15-blog-jenkins-x-survey-result-details/</guid><description>Jenkins X Survey Result Details What do you enjoy the most with Jenkins X? What do you believe should be improved with Jenkins X? For more information on the Jenkins X survey see Survey results Some highlights from the free text answers. Cloud-native feel, ‚Äúyou know Kubernetes, you know how to use JX‚Äù, plugins-based architecture Complete CI/CD platform in a k8s cluster Configuration as code, auto generation of k8s files, flexibility easy to create preview/dev/staging/prod environments. modularity and ease to extend/change Everything works out of the box. Very intuitive Lightweight and easy to manage. The community is incredible. I really like how everything works together. love the community. scalability and how fast it is! Integration with different secret backends is easy. Also love the community. It‚Äôs opinionated No vendor lock in run it against a local running cluster to test changes to Jenkins-X before updated in GitHub. run it against a local running cluster to test changes to Jenkins-X before updated in GitHub. Integration with on-premise (Gitlab) as a lot of organizations are not using public cloud due to security policies, Integration with on-premise (Gitlab) as a lot of organizations are not using public cloud due to security policies, Proper guide on installing into existing cluster without using terraform.</description></item><item><title>Blog: Jenkins X Survey Results</title><link>https://kubermates.org/docs/2022-02-15-blog-jenkins-x-survey-results/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-02-15-blog-jenkins-x-survey-results/</guid><description>Jenkins X Survey Results The Jenkins X survey was active for four weeks and closed on February 11 2022. We received lots of valuable insights into how people are using Jenkins X. We need more contributors in the Jenkins X community, so if you feel strongly about how Jenkins X should evolve, your best bet is to dive in and get your hands dirty:) Some highlights of the free text responses we got are collected here According to the survey, a typical Jenkinx X user works with Devops and Software Engineering This person is using Jenkins X version 3 on Amazon working in a company of 1-50 people. She finds it somewhat difficult to find documentation, average 2. 9 out of 5 The Jenkins X user tries to find information mainly on the main web site, sometimes on slack and less often on github. What he enjoys most about Jenkins X is that it is an easy way to learn, play around and work with Kubernetes. The git(ops(ish)) style of configuration, the preview environments, and the staging /production environments. But one thing is sure, documentation is confusing and shold be improved. The typical Jenkins X user would like to run Jenkins X offline, either to run on a laptop, or behind a (corporate) firewall. Proper support for multi-tenancy would be nice, and who can ignore security in these times. A clear governance of Jenkins X needs to be established, The typical person who answers surveys on Jenkins X is planning to attend Jenkins X Office hours, which is great! See you there next week then! ‚Üê Previous.</description></item><item><title>Blog: January 2022 updates from the JX community</title><link>https://kubermates.org/docs/2022-02-02-blog-january-2022-updates-from-the-jx-community/</link><pubDate>Wed, 02 Feb 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-02-02-blog-january-2022-updates-from-the-jx-community/</guid><description>January 2022 updates from the JX community Community effort Features Bug fixes Documentation improvement Plumbing/Quality improvements Happy new year 2022! This monthly blog post series is an attempt to showcase all the incredible work being done by the Jenkins X community to the wider audience. Lot of exciting features, bug fixes and documentation improvements were made. We restarted the office hours this month ( https://jenkins-x. io/community/#office-hours). Drop by to say hello, we are a friendly group! First Jenkins X survey was also created this month ( https://jenkins-x. io/blog/2022/01/21/survey-1-2022/). We have extended the deadline by 2 weeks (Feb 11, 2022 midnight UTC), so fill it out if you have not yet. We will use this for the roadmap moving forward. Monthly blog post update series to keep up with all the amazing progress. jx-plugins/jx-gitops: Cron job to delete old boot jobs Option to Keep n boot jobs older than default age Cron job to delete old boot jobs Option to Keep n boot jobs older than default age jenkins-x/lighthouse: Support for using gitlab nested repositories Allow running lighthouse with cluster scoped permissions Add a flag to keep polling releases until commit status is successful Do not include tekton roles when tekton engine is disabled Support for using gitlab nested repositories Allow running lighthouse with cluster scoped permissions Add a flag to keep polling releases until commit status is successful Do not include tekton roles when tekton engine is disabled jx-plugins/jx-pipeline: Use pager to aid in visualizing long pipeline logs Use pager to aid in visualizing long pipeline logs jenkins-x-terraform/terraform-jx-azure Support provisioning spot instances in the azure terraform jx module Support provisioning spot instances in the azure terraform jx module jx-plugins/jx-verify: Support specifying label for jx verify install Support specifying label for jx verify install jenkins-x-plugins/jx-registry: Support adding ECR registry policy using jx-registry Support adding ECR registry policy using jx-registry jenkins-x-charts/jxboot-helmfile-resources: Make all storage locations available as envrironment variables Make all storage locations available as envrironment variables GoogleContainerTools/kaniko (upstream fix - outside jx codebase): Kaniko in jx pipelines can now push to ACR (Azure Container Registry) Kaniko in jx pipelines can now push to ACR (Azure Container Registry) jenkins-x/terraform-aws-eks-jx: Remove deprecated jx v2 keys from requirements configmap Fix issue with on-demand billing mode of dynamodb Remove deprecated jx v2 keys from requirements configmap Fix issue with on-demand billing mode of dynamodb jenkins-x-plugins/jx-promote: Fix local chart check when using cloud buckets to store helm charts Fix local chart check when using cloud buckets to store helm charts jenkins-x-plugins/jx-project: Fix jx project rendering invalid chart. yaml files on import for custom packs in catalog Fix jx project rendering invalid chart. yaml files on import for custom packs in catalog Guides on configuring Azure service principle and GCP service account for terraform users ( https://jenkins-x.</description></item><item><title>Blog: Jenkins X Survey</title><link>https://kubermates.org/docs/2022-01-21-blog-jenkins-x-survey/</link><pubDate>Fri, 21 Jan 2022 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2022-01-21-blog-jenkins-x-survey/</guid><description>Jenkins X Survey We have made a short survey where we try to gain insight into how people experience Jenkins X. This is meant to be used as guidelines going forward so we can be more focused on what areas to improve. All contributions are welcome, if you are just browsing or have used it for years, we want to know you all! We have extended the survey period and it will now be open untill Tuesday February 11 2022 midnight UTC. All submissions are anonymous and the results will be published. So don‚Äôt hesitate, fill in the Jenkins X survey today ‚Üê Previous.</description></item><item><title>Blog: Incident: Kaniko and ACR</title><link>https://kubermates.org/docs/2021-12-28-blog-incident-kaniko-and-acr/</link><pubDate>Tue, 28 Dec 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-12-28-blog-incident-kaniko-and-acr/</guid><description>Incident: Kaniko and ACR So what happened? So what are you going to do about it? How can I fix it in the meantime? We‚Äôre hoping to make this simpler Help us find and fix things like this in future We‚Äôve recently had an issue with one of our packages come to light. We wanted to talk through the resolution steps we‚Äôre going to put into place. Azure users started reporting seeing the following error within the build step: error checking push permissions &amp;ndash; make sure you entered the correct tag name, and that you are authenticated correctly, and try again: checking push permission for &amp;ldquo;xyz. azurecr. io/myorg/myrepo:0. 0. 1&amp;rdquo;: resolving authorization for xyz. azurecr. io failed: error getting credentials - err: exec: &amp;ldquo;docker-credential-acr-env&amp;rdquo;: executable file not found in $PATH error checking push permissions &amp;ndash; make sure you entered the correct tag name, and that you are authenticated correctly, and try again: checking push permission for &amp;ldquo;xyz. azurecr. io/myorg/myrepo:0. 0.</description></item><item><title>Blog: Hacktoberfest conclusion 2021</title><link>https://kubermates.org/docs/2021-11-22-blog-hacktoberfest-conclusion-2021/</link><pubDate>Mon, 22 Nov 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-11-22-blog-hacktoberfest-conclusion-2021/</guid><description>Hacktoberfest conclusion 2021 Ask us questions Hacktoberfest 2021 is over, and we got quite a few contributions from the open source community. Contributions included various document improvements, adding jira as an issue tracker for generating changelogs and adding initial support for external vault! The top contributors to Jenkins X in hacktoberfest 2021 were: Marten Svantesson Christopher vig James Rawlings Hays Clark Anatoli Babenia We would also like to thank all the contributors who participated and made it a success. The strength of Jenkins X lies in it‚Äôs vast community, and we hope to see many more major contributions from them in the near and far future. Missed this year‚Äôs hacktoberfest? No worries, you can always contribute to Jenkins X. We‚Äôre happy to help if you have any questions. Talk to us on our slack channels, which are part of the Kubernetes slack. Join Kubernetes slack here and find us on our channels: #jenkins-x-dev for developers of Jenkins X #jenkins-x-user for users of Jenkins X We look forward to participating in the next hacktoberfest! ‚Üê Previous.</description></item><item><title>Blog: Hacktoberfest 2021</title><link>https://kubermates.org/docs/2021-10-06-blog-hacktoberfest-2021/</link><pubDate>Wed, 06 Oct 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-10-06-blog-hacktoberfest-2021/</guid><description>Hacktoberfest 2021 Contribute to Jenkins X docs Ask us questions We are excited to announce that Jenkins X will be participating in Hacktoberfest again this year! Hacktoberfest is a month-long global celebration of open source software. All backgrounds and skill levels are encouraged to participate in Hacktoberfest and join a global community of open source contributors. Learn more about Hacktoberfest and sign up here. We welcome your contributions to the Jenkins X documentation project ! Issues labelled ‚Äúhacktoberfest‚Äù generally indicate good first issues. However, all pull requests will count towards your Hacktoberfest challenge. We‚Äôre happy to help if you have any questions. Talk to us on our slack channels, which are part of the Kubernetes slack. Join Kubernetes slack here and find us on our channels: #jenkins-x-dev for developers of Jenkins X #jenkins-x-user for users of Jenkins X Find out more about becoming involved in the Jenkins X community here. We look forward to seeing you in open source, fixing all the things! ‚Üê Previous.</description></item><item><title>Blog: Moving Jenkins X v2 artifacts</title><link>https://kubermates.org/docs/2021-08-26-blog-moving-jenkins-x-v2-artifacts/</link><pubDate>Thu, 26 Aug 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-08-26-blog-moving-jenkins-x-v2-artifacts/</guid><description>Moving Jenkins X v2 artifacts ACTION REQUIRED Why the disruption? What is changing? v2 users v3 users When will all this take place? Why are only the most recent versions v2 images copied to GitHub packages and not all versions? I‚Äôm on v2 and use a builder image which is not available on GitHub container registry, how do I build my own version to work with the new helm and image repositories? I‚Äôm getting a missing arg &amp;ndash;provider-values-dir and helm repository https://jenkins-x-charts. github. io/v2 does not have an associated prefix in in the ‚Äòcharts/repositories. yml‚Äô error TL;DR - Jenkins X specific helm repositories and container registries hosted on GCP have been moved to GitHub. This will mainly affect jx v2 users but there is expected to be a small impact on v3 users too. Below describes the steps we believe are needed to keep Jenkins X installations working as normal but there will be some action needed. When Jenkins X first started we made heavy use of GCP‚Äôs services for hosting the cloud infrastructure needed by users to install and run Jenkins X. This was great as we could use the same IAM to push and maintain content from our own hosted build infrastructure and ensure we were validating the same experience of using cloud provider hosted services wherever possible. As Jenkins X grew in popularity the cloud costs began to increase with the pricing model from GCP , specifically the networking costs of cross continent egress. Given this, for jx3 we decided to see if switching to GitHub packages for container images and GitHub pages for helm repositories would be better, the result was it is better. In fact we have made it super easy for users to switch to using GitHub pages for releasing helm charts and using GitHub packages. Now that we have validated GitHub is more cost effective for hosting public images and helm charts for the Jenkins X project, we want to switch to using GitHub for all v2 plus v3 users, then shutdown the GCP services which are causing unnecessary cost.</description></item><item><title>Blog: How to debug your Tekton pipelines</title><link>https://kubermates.org/docs/2021-08-18-blog-how-to-debug-your-tekton-pipelines/</link><pubDate>Wed, 18 Aug 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-08-18-blog-how-to-debug-your-tekton-pipelines/</guid><description>How to debug your Tekton pipelines How to debug Tekton Pipelines Prerequisites Enable a breakpoint Viewing breakpoints Using a breakpoint Opening a shell Continuing after the breakpoint Removing breakpoints Conclusion Tekton recently introduced a debug feature when you create TaskRun resources so that steps can be paused at a breakpoint until told to move forwards so that you can diagnose why pipeline steps fail. TaskRun The latest Tekton release only supports breakpoints on TaskRun resources but there is a Pull Request #4145 to add support also to debugging PipelineRun resources as well. If you are reading this please add your thumbs up emoji feedback to the PR #4145 TaskRun PipelineRun We‚Äôve switched Jenkins X to use a preview image of Tekton with PR #4145 included so that Jenkins X developers can easily debug their pipelines (which typically are PipelineRun resources). PipelineRun Here is a demo which shows how to debug pipelines: Make sure your cluster is upgraded to the latest version stream. If you intend to use the jx in the below examples make sure you upgrade the CLI too jx To enable a breakpoint you can: use the Lens UI as shown in the above video by: right click on a Pipeline action menu select Breakpoint -&amp;gt; Add right click on a Pipeline action menu Pipeline select Breakpoint -&amp;gt; Add Breakpoint -&amp;gt; Add you can use the jx pipeline debug command then select the pipeline to add/remove a breakpoint. You can view breakpoints in the Lens UI in the Breakpoints tab or via: Breakpoints kubectl get lighthousebreakpoints # you can use the short name: kubectl get lhbp kubectl get lighthousebreakpoints # you can use the short name: kubectl get lhbp Once you have set a breakpoint defined for a particular Pipeline you need to trigger the pipeline. e. g. perform a git commit on the git branch to trigger a new pipeline to execute. The pipeline will execute as normal; you‚Äôll be able to view it execute via: Lens UI run jx pipeline grid to watch pipelines run and select the one you wish to view the log run jx pipeline log to watch the log of a specific pipeline Once your breakpoint is reached the pipeline pod will pause, waiting to continue. At this point you can then open a shell inside the container. The easiest way to do this is via the Lens UI , click on the Pipeline action menu then Shell -&amp;gt; latest step and a shell will open.</description></item><item><title>Blog: How to use GitOps and Kubernetes External Secrets for better audit and security</title><link>https://kubermates.org/docs/2021-08-17-blog-how-to-use-gitops-and-kubernetes-external-secrets-for-better-audit-and-secu/</link><pubDate>Tue, 17 Aug 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-08-17-blog-how-to-use-gitops-and-kubernetes-external-secrets-for-better-audit-and-secu/</guid><description>How to use GitOps and Kubernetes External Secrets for better audit and security Standardising GitOps layouts Why Jenkins X uses helmfile template Why we use Kubernetes External Secrets How to use this approach to GitOps and Secrets if not using Jenkins X Summary So GitOps is a cool approach to managing kubernetes resources in a cluster, by checking in the source code for: the kubernetes YAMLs details of the helm charts you want to install along with any configuration kustomize scripts. Then everything is versioned and audited; you know who changed what, when and why. If a change breaks things, just revert via git like any other source code change. You can then add pipelines to verify changes in the Pull Requests result in valid kubernetes YAML etc. Then if you merge changes to git then an operator detect the change and do the kubectl apply (or helm install or whatever). kubectl apply helm install There are a number of tools out there for doing this. e. g. Anthos Config Management , argo cd , fleet , flux cd and kapp controller So why did Jenkins X not use these tools and instead created its own git operator ? Over time it would be great to have more standardisation of the Git layout given the different tool. Our current recommended layout that works with many GitOps tools is described here. A number of solutions in the GitOps space define which helm charts to install in git with configuration files; or specify which kustomize templates to apply etc. However Jenkins X defaults to using helmfile to manage installing, upgrading and configuring multiple helm charts.</description></item><item><title>Blog: Jenkins X 3 and Argo CD</title><link>https://kubermates.org/docs/2021-06-28-blog-jenkins-x-3-and-argo-cd/</link><pubDate>Mon, 28 Jun 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-06-28-blog-jenkins-x-3-and-argo-cd/</guid><description>Jenkins X 3 and Argo CD Install Argo CD with Jenkins X Conclusion There have been a number of requests from the Jenkins X community to use Argo CD for the last mile deployment phase of their continuous delivery pipelines. This blog explains some of the advantages of using Jenkins X and Argo CD all together. What‚Äôs included? Jenkins X for Cloud Infrastructure using Terraform, core installation management with GitOps, external secret management, ingress controller, quickstarts, automated CI + CD pipelines, ChatOps Tekton for pipeline orchestration Argo CD for end users application deployments (not the main installation) Argo CD provides a declarative GitOps approach to deploying Kubernetes based applications. There is a GUI which helps construct the deployment definition (in the form of an Application custom resource) which offers a number of configuration options, as well and providing insight into your clusters applications. Application You might be wondering why you would want to use BOTH Jenkins X and Argo CD together. Jenkins X aims to embrace OSS, where possible providing a nice UX to integrate with other projects and help provide better solutions for building, developing and running software on Kubernetes. Jenkins X indeed does have a git operator that applies Kubernetes YAML from a Git repository but there are some differences: Jenkins X uses GitOps principles for the entire installation, i. e. the starting point is a Git repository which is used to provision a cluster and manage (automatic if users wish) upgrades whereas today Argo CD uses a manual kubectl apply to manage the Argo installation itself. Jenkins X uses GitOps principles for the entire installation, i. e. the starting point is a Git repository which is used to provision a cluster and manage (automatic if users wish) upgrades whereas today Argo CD uses a manual kubectl apply to manage the Argo installation itself.</description></item><item><title>Blog: Continuous microservices with databases in Jenkins X</title><link>https://kubermates.org/docs/2021-06-25-blog-continuous-microservices-with-databases-in-jenkins-x/</link><pubDate>Fri, 25 Jun 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-06-25-blog-continuous-microservices-with-databases-in-jenkins-x/</guid><description>Continuous microservices with databases in Jenkins X Before you start Create the quickstart How does it work Previews How we can improve More languages and frameworks Cloud databases More modularity options Conclusion A common question we get asked on the Jenkins X project is how to get started creating microservices that use databases with automated CI/CD with GitOps Promotion and Preview Environments. To make things a little easier to get started we‚Äôve created a new node-postgresql quickstart. If you are using the cloud then we prefer cloud over kubernetes for things like databases, storage, ingress and secret managers so please try use your clouds managed databases if you can. So ideally you‚Äôd set up your database via your infrastructure as code solution, such as terraform , and then associate your kubernetes Service Account to a cloud IAM role to access the database. However to provide something simple that just works in any kubernetes cluster this quickstart uses the postgres-operator to manage setting up each database cluster in each environment. So to be able to use this quickstart you will need to install this operator into your cluster. You can add charts to your cluster via the CLI. From inside a git clone of your cluster git repository run the following command: jx gitops helmfile add &amp;ndash;chart commonground/postgres-operator &amp;ndash;repository https://charts. commonground. nl/ &amp;ndash;namespace postgres &amp;ndash;version 1. 6. 2 jx gitops helmfile add &amp;ndash;chart commonground/postgres-operator &amp;ndash;repository https://charts.</description></item><item><title>Blog: Jenkins X at cdCon</title><link>https://kubermates.org/docs/2021-06-22-blog-jenkins-x-at-cdcon/</link><pubDate>Tue, 22 Jun 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-06-22-blog-jenkins-x-at-cdcon/</guid><description>Jenkins X at cdCon Tuesday, June 22 GitOps Summit Wednesday, June 23 Thursday, June 24 cdCon 2021 is about to start with lots of great sessions. Here‚Äô a list of the Jenkins X related sessions: Best Practices for Secret Management with GitOps - Kara de la Marck , CloudBees GitOps uses Git as the ‚Äúsingle source of truth‚Äù for declarative infrastructure and enables developers to manage infrastructure with the same Git-based workflows they use to manage a codebase. Having all configuration files version-controlled by Git has many advantages, but best practices for securely managing secrets with GitOps remain contested. Join us in this presentation about GitOps and Secret Management. Attendees will learn about different approaches to secret management with GitOps, the issues involved, and the secret management solutions offered by various tools and platforms. We will discuss the pros and cons of Vault, SOPS, offerings by public cloud providers, and more. GitOps uses Git as the ‚Äúsingle source of truth‚Äù for declarative infrastructure and enables developers to manage infrastructure with the same Git-based workflows they use to manage a codebase. Having all configuration files version-controlled by Git has many advantages, but best practices for securely managing secrets with GitOps remain contested. Join us in this presentation about GitOps and Secret Management. Attendees will learn about different approaches to secret management with GitOps, the issues involved, and the secret management solutions offered by various tools and platforms. We will discuss the pros and cons of Vault, SOPS, offerings by public cloud providers, and more. MLOps with Jenkins-X: Production-ready Machine Learning by Terry Cox Explore ways to treat Machine Learning assets as first class citizens within a DevOps process as Jenkins-X MLOps Lead, Terry Cox demonstrates how to automate your training and release pipeline in Cloud environments, using the library of ML template projects provided with Jenkins-X.</description></item><item><title>Blog: Don't use docker, use kubernetes</title><link>https://kubermates.org/docs/2021-05-17-blog-don-t-use-docker-use-kubernetes/</link><pubDate>Mon, 17 May 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-05-17-blog-don-t-use-docker-use-kubernetes/</guid><description>Don&amp;rsquo;t use docker, use kubernetes Why use kubernetes instead of docker? How to get kubernetes? How do I connect to kubernetes? How do I replace docker with kubernetes? docker run =&amp;gt; kubectl run docker build =&amp;gt; kubectl build compose =&amp;gt; helm testcontainers =&amp;gt; sidecars / kubedock help! we are not even using kubernetes yet other handy kubectl commands inner loop Conclusion Are you developing software that‚Äôs intended to run on kubernetes? If so we recommend not to use docker on your laptop. Docker on Windows/MacOS helps you run a VM that can then run linux containers easily. But why bother? We highly recommend just use a development kubernetes cluster - build and run your containers there instead then you‚Äôre closer to a production like environment. why test on a completely different VM and container orchestrator than production? It‚Äôs better to test on a similar environment to where you are really going to deploy your code test your kubernetes yaml / helm chart and associated configuration at the same time as you run your containers helps you catch mistakes earlier: it‚Äôs not just about running the container image; it‚Äôs about lots of other things too like networking, configuration, secrets, storage/volumes, cloud infrastructure, service mesh, liveness/readiness/startup probes - so why not test all of those things rather than just the image? it‚Äôs not just about running the container image; it‚Äôs about lots of other things too like networking, configuration, secrets, storage/volumes, cloud infrastructure, service mesh, liveness/readiness/startup probes - so why not test all of those things rather than just the image? some corporate environments don‚Äôt let you run VMs on your laptop anyway so running docker locally isn‚Äôt an option First you‚Äôll need a kubernetes cluster. I fully agree with James Ward that developers should not need to run kubernetes. Friends don‚Äôt let friends setup and manage kubernetes clusters by hand :). So try ask your infrastructure team for a development cluster or, if you can, use the cloud to set-up a managed kubernetes cluster. All the public clouds have a relatively straightforward way to spin up a fully managed kubernetes cluster for you that will be relatively inexpensive &amp;amp; they are easy to scale down when you don‚Äôt need them. e. g. on Google Cloud it‚Äôs a couple of clicks and about 5 minutes later you‚Äôll have a fully managed kubernetes cluster ready to use. Its easy to enable auto-scaling too.</description></item><item><title>Blog: Jenkins X 3 - May 2021 LTS</title><link>https://kubermates.org/docs/2021-05-12-blog-jenkins-x-3-may-2021-lts/</link><pubDate>Wed, 12 May 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-05-12-blog-jenkins-x-3-may-2021-lts/</guid><description>Jenkins X 3 - May 2021 LTS May 2001 LTS release is now available! LTS is a slower cadence version stream which contains a verified set of releases and configurations that have been used by teams tracking the bleeding edge Jenkins X. Included in this release: Protect Pipeline Visualiser with OAuth2 how to docs Terraform repositories are now protected by the Jenkins X version stream external-dns helm chart upgrade to v5. 0. 0 Reduce external secrets polling of cloud services to reduce cloud costs [Jenkins] for users using Jenkins the Tekton Client plugin is now installed by default Stackdriver format logging enabled when using GKE and services that use jx-logging library. If you enable the Stackdriver API in GCP you will get well formatted logs and alerts via Stackdriver. Jenkins X Grafana dashboards updates with Lighthouse telemetry ‚Üê Previous.</description></item><item><title>Blog: Jenkins X 3.x GA is here!</title><link>https://kubermates.org/docs/2021-04-15-blog-jenkins-x-3-x-ga-is-here/</link><pubDate>Thu, 15 Apr 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-04-15-blog-jenkins-x-3-x-ga-is-here/</guid><description>Jenkins X 3. x GA is here! Demo Documentation Changes since the 3. x beta User Changes since 2. x Platform Changes Getting started Final thoughts I‚Äôm super excited to announce the 3. 0 GA (General Availability) release of Jenkins X! Jenkins X automates your CI/CD on kubernetes to help you accelerate : Automated CI/CD pipelines lets you focus on your actually application code while Jenkins X automatically creates battle tested Tekton CI/CD pipelines for your project which are managed via GitOps so that its super easy to keep your pipelines up to date across your repositories or to upgrade or override pipelines or steps for specific repositories. Automatic promotion of versioned artifacts via GitOps through your Environments such as Staging , Pre-production and Production whether they are running in the same kubernetes cluster or you are using multiple clusters for your environments Staging Pre-production Production Preview Environments lets you propose code changes via Pull Requests and have a Preview Environment automatically created, running your code in kubernetes to get fast feedback from your team before agreeing to merge changes to the main branch ChatOps comment on Pull Requests to give feedback, approve/hold changes, trigger optional pipelines for additional testing and other ChatOps commands Here‚Äôs a demo of how to develop code with Jenkins X the main documentation of the changes are: the new architecture with modular plugins and improved extension points what has changed since 3. x started how 3. x compares to 2. x DevOps Guides and DevOps Patterns provides an overview of our learnings in the DevOps space here‚Äôs a brief summary of the differences: The following improvements have been made since the first beta : Integrated observability and monitoring with Pipeline Tracing Auto scale preview environments with Osiris Enable auto upgrade to keep your cluster up to date As a user the high level UX of Jenkins X is similar: automated Continuous Delivery pipelines for using tekton for your repositories with automatic promotion between your environments pull requests on your repositories create separate Preview Environments where your team can review your changes and give fast feedback before your changes are approved and merged into the main trunk. we now default to vanilla tekton YAML for defining pipelines while accelerating your tekton with tekton catalog we include an open source dashboard for visualising pipelines and logs which you can invoke via: jx dash jx dash we now use helm (3. x) and helmfile along with optionally kustomize in a GitOps style to define and configure both Jenkins X itself, your tools and applications in any namespace support multi cluster out of the box so you can keep Staging and Production in separate clusters to your development cluster where your pipelines run, you create and release immutable container images and other artifacts. Staging Production to setup or upgrade Jenkins X we use terraform to setup your cloud resources on Azure , Amazon or Google while also supporting on-premises, minkube and OpenShift - see the Admin Guides for more detail the actual installation of kubernetes resources takes place using the git operator so it runs reliably inside the cluster itself the actual installation of kubernetes resources takes place using the git operator so it runs reliably inside the cluster itself we default to using Kubernetes External Secrets to manage all secrets for Jenkins X itself, development tools and your applications too.</description></item><item><title>Blog: Jenkins X 3 - April 2021 LTS</title><link>https://kubermates.org/docs/2021-04-12-blog-jenkins-x-3-april-2021-lts/</link><pubDate>Mon, 12 Apr 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-04-12-blog-jenkins-x-3-april-2021-lts/</guid><description>Jenkins X 3 - April 2021 LTS This is the second LTS release for Jenkins X 3. x. LTS is a slower cadence version stream which contains a verified set of releases and configurations that have been used by teams tracking the bleeding edge Jenkins X. Initially when we decided to maintain an LTS version stream we thought we‚Äôd aim for monthly releases however this second release comes two months after the first. This has given us more chances to run fixes and chart upgrades on Jenkins X own infrastructure to verify stability. Note This LTS release is intended to be the final one before Jenkins X 3 is made Generally Available so stay tuned for the exciting news coming very soon! We will of course continue to develop and release LTS post GA. Included in this release: General beta bug fixes and helm chart upgrades Enable Observability Enable Slack notifications Support for GitLab, Gitea, BitBucket Server and GitHub Enterprise Please be aware of these changes Breaking changes If using Vault move it outside of being managed by Jenkins X GitOps important notes ‚Üê Previous.</description></item><item><title>Blog: Traces for your pipelines</title><link>https://kubermates.org/docs/2021-04-08-blog-traces-for-your-pipelines/</link><pubDate>Thu, 08 Apr 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-04-08-blog-traces-for-your-pipelines/</guid><description>Traces for your pipelines How can you benefit from it in your own Jenkins X cluster? What‚Äôs next? Now that Jenkins X has solid integration with Grafana for its observability , it‚Äôs time to start building fun things! And the first one is tracing for all your pipelines : With it, you can easily see the timings of all your pipelines, stages, and steps. This is great to inspect a ‚Äúslow‚Äù pipeline and quickly see the slower steps. We are using OpenTelemetry to generate a ‚Äúlogical‚Äù view of the pipeline, with 1 trace per pipeline and 1 span for each stage and step. By default, these traces are ingested by Grafana Tempo. But if you prefer to export them to a different destination, it‚Äôs very easy, and thanks to the OpenTelemetry Collector you can export to a lot of different services. You can see the full list here and here. The trace identifier is also stored in the pipeline itself so that the Jenkins X Pipelines Visualizer UI can link directly to the trace. You just need to enable the observability stack, as explained in the observability admin guide. Then, trigger a pipeline, and once it‚Äôs finished, go to the web UI, and click on the ‚ÄúTrace‚Äù button on the top-right. That‚Äôs it! This is only the first step of native tracing support in Jenkins X. Stay tuned for more! ‚Üê Previous.</description></item><item><title>Blog: Jenkins X v3: now with built-in observability</title><link>https://kubermates.org/docs/2021-04-01-blog-jenkins-x-v3-now-with-built-in-observability/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-04-01-blog-jenkins-x-v3-now-with-built-in-observability/</guid><description>Jenkins X v3: now with built-in observability Platform Observability Continuous Delivery Indicators Roadmap As a Continuous Delivery platform, Jenkins X has a central part in your infrastructure. If it becomes unstable or unusable, it will impact the whole software delivery of your organization. This is why observability is a critical topic for Jenkins X, and work has started to get observability built-in for Jenkins X v3: Platform Observability : visualize logs and metrics for everything running in the Kubernetes cluster: Jenkins X‚Äôs own components - Tekton, Lighthouse, cert-manager, ‚Ä¶ - but also your own applications, that will be deployed either in preview environments or in the staging/prod environments. Continuous Delivery Indicators : visualize pull requests, pipelines, releases, and deployments metrics, collected from cluster events and git events. We‚Äôre using Grafana as the central visualization component: the main entry point from which you can get a complete overview of both your application‚Äôs lifecycle - development, build, tests, releases, deployments, runtime - and your Continuous Delivery platform. Platform observability is not enabled by default for the moment, so the first step is to enable it, as explained in the platform observability admin guide. Once it‚Äôs done, you‚Äôll get a running Grafana instance, pre-configured with data sources for applications logs - using Loki - and applications metrics - using Prometheus. But most important, it comes with a set of pre-defined Grafana dashboards for the main platform components: Tekton, Lighthouse, cert-manager, ‚Ä¶ Here is an example of such a dashboard, using a mix of data sources to display cert-manager metrics collected by Prometheus - including the certificates expiration dates - and logs collected by Loki/Promtail: Continuous Delivery Indicators‚Äô main goal is to give people insights into their workflows/processes so that they can continuously improve them. This is based on the DORA devops metrics and the SPACE framework. The CD Indicators addon is not enabled by default for the moment, so the first step is to enable it, as explained in the continuous delivery indicators admin guide. Once it‚Äôs done, you‚Äôll get a running collector, along with a PostgreSQL database. The collector will listen for various events, both from the cluster and the git repositories, and store pull requests, pipelines, releases, and deployments data in the PostgreSQL database.</description></item><item><title>Blog: Scaling Preview Environments with Osiris</title><link>https://kubermates.org/docs/2021-04-01-blog-scaling-preview-environments-with-osiris/</link><pubDate>Thu, 01 Apr 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-04-01-blog-scaling-preview-environments-with-osiris/</guid><description>Scaling Preview Environments with Osiris Osiris How can you benefit from it in your own Jenkins X cluster? How does it work? One of Jenkins X‚Äôs core features is the preview environments : temporary environments created automatically for each Pull Requests, to deploy your application and its dependencies. You can then use this preview environment to run integration tests, or manually use/test your application. This is all great until you have more and more applications, each with a few dependencies (postgresql, mongodb, ‚Ä¶) and a few opened pull requests at any time. This means that you‚Äôll get more and more pods running in your Kubernetes cluster, in addition to Jenkins X‚Äôs own components, your build pipelines, and of course your staging and production applications - unless you are using multi-cluster. The result is that you‚Äôll need more nodes or bigger nodes. Which means more money. But, these preview environments are in fact idle most of the time: they are only used for the integration tests, and sometimes when someone manually uses them. The rest of the time - including all night for example - they are just staying there, idle, and consuming resources. What if we could easily scale them down when they are idle, and automatically bring them up when we need them? So that a Pull Request staying opened for 2 weeks because someone went on vacation won‚Äôt consume resources in your cluster. Enter Osiris ! Initially created by the Deislabs team , Osiris is a Kubernetes component that will automatically scale down your ‚Äúidle‚Äù pods, and scale them up when a request comes in. Although the original project has been archived, the Dailymotion team has taken over the maintenance of a fork. And they have been using it with success in their Jenkins X dev cluster for more than 2 years: they regularly have around 50 preview environments active at any time, and‚Ä¶ 0 pods from these environments running at night - or on weekends.</description></item><item><title>Blog: cdCon 2021 - Call for Jenkins X Proposals</title><link>https://kubermates.org/docs/2021-02-25-blog-cdcon-2021-call-for-jenkins-x-proposals/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-02-25-blog-cdcon-2021-call-for-jenkins-x-proposals/</guid><description>cdCon 2021 - Call for Jenkins X Proposals Topics Hear ye! Hear ye! Jenkins X Community, cdCon 2021 (the Continuous Delivery Foundation‚Äôs annual flagship event) is happening June 23-24 and its call for papers is open! This is your chance to share what you‚Äôve been doing with Jenkins X. Are you building something cool? Using it to solve real-world problems? Are you making things fast? Secure? Or maybe you‚Äôre a contributor and want to share what‚Äôs new. In all cases, we want to hear from you! Submit your talk for cdCon 2021 to be part of the conversation driving the future of software delivery for technology teams, enterprise leadership, and open-source communities. Submission Deadline : Friday, March 5 at 11:59 PM PST Here are the suggested tracks: Continuous Delivery Ecosystem ‚Äì This track spans the entire Continuous Delivery ecosystem, from workflow orchestration, configuration management, testing, security, release automation, deployment strategies, developer experience, and more. Advanced Delivery Techniques ‚Äì For talks on the very cutting edge of continuous delivery and emerging technology, for example, progressive delivery, observability, and MLOps. GitOps &amp;amp; Cloud-Native CD ‚Äì Submit to this track for talks related to continuous delivery involving containers, Kubernetes, and cloud*native technologies. This includes GitOps, cloud-native CD pipelines, chatops, best practices, etc. Continuous Delivery in Action ‚Äì This track is for showcasing real-world continuous delivery addressing challenges in specific domains e. g. fintech, embedded, healthcare, retail, etc. Talks may cover topics such as governance, compliance, security, etc. Leadership Track ‚Äì Talks for leaders and decision-makers on topics such as measuring DevOps, build vs buy, scaling, culture, security, FinOps, and developer productivity.</description></item><item><title>Blog: GitOps your cloud native pipelines</title><link>https://kubermates.org/docs/2021-02-25-blog-gitops-your-cloud-native-pipelines/</link><pubDate>Thu, 25 Feb 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-02-25-blog-gitops-your-cloud-native-pipelines/</guid><description>GitOps your cloud native pipelines The problem Previous solutions GitOps your pipelines Sharing Tasks and Steps across repositories SourceURI notation Reusing Tasks and Steps from Tekton Catalog How it looks Customizing an inherited step Inlining a pipeline step locally Viewing the effective pipeline Summary Tekton pipelines are cloud native and are designed from the ground up for kubernetes and the cloud: there‚Äôs no single point of failure and the pipelines are elastically scalable each pipeline is completely declarative and self defined each pipeline executes independently of any others pipelines are orchestrated via the sophisticated kubernetes scheduler: can use pipeline specific metadata for resource limits and node selectors: memory, CPU, machine type (GPU, windows/macOS/linux etc) can use pipeline specific metadata for resource limits and node selectors: memory, CPU, machine type (GPU, windows/macOS/linux etc) its easy to associate pipelines with Cloud IAM roles to avoid you having to upload cluster admin secrets to your public CI service which really helps security and helps reduce accidental bitcoin mining on your cloud account In a previous blog we talked about how you can accelerate your use of tekton with Jenkins X. We are moving towards a microservice kind of world with many teams writing many bits of software in many repositories. So there are lots and lots of pipelines. These pipelines keep getting more sophisticated over time; doing much more (all kinds of building, analysis, reporting, testing, ChatOps etc) and the software/images/approaches they use change. So how can we manage, configure and maintain them all so that there are many pipelines for many repositories; where each repository can customise anything it needs but we can easily maintain everything continuously and its easy to understand and tool around? We‚Äôve tried to tackle this problem in a number of ways over the years; each has pros and cons. One option is to put all your pipelines in a shared library. You can then reference the pipelines by name in each of your repositories. But what if you want to change a bit of a pipeline for a specific repository? If you change it globally for everyone you can break things. You may just want local customisation for your repository only. You can add parameters into your pipelines. They are quite verbose on Pipelines and PipelineRuns ; but it‚Äôs hard to think up front of every parameterisation that may be required by downstream repositories. e.</description></item><item><title>Blog: Jenkins X 3 - February 2021 LTS</title><link>https://kubermates.org/docs/2021-02-01-blog-jenkins-x-3-february-2021-lts/</link><pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-02-01-blog-jenkins-x-3-february-2021-lts/</guid><description>Jenkins X 3 - February 2021 LTS What‚Äôs the difference? Anything else to be aware of? What‚Äôs next? This is the first LTS release for Jenkins X 3. x. We are still in the Beta release and the leadup to GA includes ensuring the process for LTS monthly releases is validated and working well. This first releases focuses on: community feedback following the Beta release general helm chart upgrades improved developer UX when editing Tekton pipelines here support for in-repo and shared Tekton pipeline libraries including git URI support, e. g. uses:jenkins-x/jx3-pipeline-catalog/packs/javascript/. lighthouse/jenkins-x/pullrequest. yaml@v1. 2. 3 ` uses:jenkins-x/jx3-pipeline-catalog/packs/javascript/. lighthouse/jenkins-x/pullrequest. yaml@v1.</description></item><item><title>Blog: Jenkins X 3.x walkthroughs</title><link>https://kubermates.org/docs/2021-01-26-blog-jenkins-x-3-x-walkthroughs/</link><pubDate>Tue, 26 Jan 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-01-26-blog-jenkins-x-3-x-walkthroughs/</guid><description>Jenkins X 3. x walkthroughs Intro + high level architecture Installation and setup Infrastructure and provisioning TLS and DNS Using Jenkins X GitOps Health Extending pipelines Secrets Upgrades Version Streams Cluster recovery Jenkins X 3. x is now looking ahead towards a GA release, with that we are producing walkthroughs for key areas to help users not only get started but get the most out of Jenkins X. To kick this off we are going to start with 9 videos that we‚Äôll follow up with more dedicated blogs over the coming weeks. The complete playlist can be found here however the blog below gives a more context for each one. There are a few key areas we are focusing on here: Starting off with a very quick introduction including what to expect from the walkthrough series. Jenkins X 3. x has focussed on clearer lines of separation, making the architecture significantly more pluggable, extensible and maintainable. With better tooling including UIs and more reliable guard rails for installations and upgrades. Jenkins X 3 also minimises abstractions and wrapping; so it promotes the direct use of open source projects like Helm, Helmfile and Tekton. Decoupling the management of Cloud infrastructure away from Jenkins X to tools that are better suited for the job. Jenkins X has started with Terraform and this manages all the cloud resources needed by Jenkins X Kubernetes cluster Cloud Service Accounts IAM bindings Storage buckets Over time Jenkins X plans to support other tools (aided by the Kubernetes Cluster API ) users in the Kubernetes ecosystem leverage such as crossplane.</description></item><item><title>Blog: New features in the pipelines visualizer UI</title><link>https://kubermates.org/docs/2021-01-18-blog-new-features-in-the-pipelines-visualizer-ui/</link><pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2021-01-18-blog-new-features-in-the-pipelines-visualizer-ui/</guid><description>New features in the pipelines visualizer UI Pipeline View Homepage Roadmap Contributing The Jenkins X Pipelines Visualizer UI has recently received a number of new features, so let‚Äôs do a little tour of these new features! When viewing a pipeline, the biggest new feature is the collapsed logs. No more hundreds - or thousands - of log lines, we now group the logs per-container (step), which are collapsed by default. Along with the status of the step and its duration, so it‚Äôs easier to go to the interesting part of the logs. Clicking on a log line will expand the logs for this specific container. You can also use the ‚ÄúToggle Steps‚Äù button to expand/collapse the logs for all the steps at once. While we‚Äôre talking about the logs, you can notice the 2 new buttons: View raw logs Download raw logs On top of the logs, we now display some information about the pipeline: the pipeline meta information : name, context, build, and a link to see the raw YAML representation of the pipeline the pipeline status : status, started/finished date/time, and duration the pipeline source : git repository, pull request or branch, commit SHA, author the pipeline stages , with links to see the timeline of the steps in each stage. You can also click on the ‚ÄúShow Timeline‚Äù button to view the pipeline timeline with all stages and steps. The pipeline timeline has been improved to include all the steps for all stages, but it is currently hidden by default - to avoid using too much space. Clicking on a stage will bring you to the steps, and clicking on a step will bring you to the logs for this step. Note that for a pipeline which includes a deployment to a Preview Environment, the UI will also display a link to the application‚Äôs URL in that specific Preview Environment. The homepage got some love too, with: a few stats about the pipelines: top statuses, repositories, authors and durations - with links to filter the pipelines direct links to the git repositories and pull requests the Jenkins X logo and a favicon We started this project at v0, and we believe that now it has enough features to be a v1! On our roadmap - without any specific order - we have: #73 live refresh of a running pipeline - for now only the logs are updated live, not the meta information of the pipeline (status, stages/steps timings) #42 support local timezone - for now everything is in UTC improve the support for archived pipelines : load pipelines archived in the long-term storage Thanks to all the contributors! All contributions are welcomed, the source code is: github. com/jenkins-x/jx-pipelines-visualizer.</description></item><item><title>Blog: Jenkins X 3.x beta is here!</title><link>https://kubermates.org/docs/2020-12-09-blog-jenkins-x-3-x-beta-is-here/</link><pubDate>Wed, 09 Dec 2020 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2020-12-09-blog-jenkins-x-3-x-beta-is-here/</guid><description>Jenkins X 3. x beta is here! User Changes Platform Changes Getting started Final thoughts I‚Äôm super excited to announce the 3. 0 beta of Jenkins X! Christmas has come early this year! the main documentation of the changes are: the new architecture with modular plugins and improved extension points what has changed since 3. x started how 3. x compares to 2. x but here‚Äôs a brief summary of the differences: As a user the high level UX of Jenkins X is similar: automated Continuous Delivery pipelines for using tekton for your repositories with automatic promotion between your environments pull requests on your repositories create separate Preview Environments where your team can review your changes and give fast feedback before your changes are approved and merged into the main trunk. we now default to vanilla tekton YAML for defining pipelines while accelerating your tekton with tekton catalog we include an open source dashboard for visualising pipelines and logs which you can invoke via: jx dash jx dash we now use helm (3. x) and helmfile along with optionally kustomize in a GitOps style to define and configure both Jenkins X itself, your tools and applications in any namespace support multi cluster out of the box so you can keep Staging and Production in separate clusters to your development cluster where your pipelines run, you create and release immutable container images and other artifacts. Staging Production to setup or upgrade Jenkins X we use terraform to setup your cloud resources on Azure , Amazon or Google while also supporting on-premises, minkube and OpenShift - see the Admin Guides for more detail the actual installation of kubernetes resources takes place using the git operator so it runs reliably inside the cluster itself the actual installation of kubernetes resources takes place using the git operator so it runs reliably inside the cluster itself we default to using Kubernetes External Secrets to manage all secrets for Jenkins X itself, development tools and your applications too. This means we can support various secret backends such as Alibaba Cloud KMS Secret Manager, Amazon Secret Manager, Azure Key Vault, Hashicorp Vault or GCP Secret Manager It also means we can then check in all kubernetes resources and custom resources directly into git (apart from Kubernetes Secrets ) so that it super easy to version, review and reason about your kubernetes resources in a GitOps way. Secrets built in TLS and DNS support along with Heath reporting and visualising via kuberhealthy we now have an LTS distribution which lets you switch to a much more slower cadence of releases of Jenkins X We have been using Jenkins X 3. x in production now for many months (for CI/CD of all of the 3.</description></item><item><title>Blog: Jenkins X 3.x - beta is close!</title><link>https://kubermates.org/docs/2020-12-04-blog-jenkins-x-3-x-beta-is-close/</link><pubDate>Fri, 04 Dec 2020 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2020-12-04-blog-jenkins-x-3-x-beta-is-close/</guid><description>Jenkins X 3. x - beta is close! It has been ‚Äòall hands on deck‚Äô in recent months with the focus on Jenkins X 3 alpha. First off a huge thankyou to everyone involved. The OSS community spirit has really shone through what has been a very difficult year for everyone. Knowing that people from all over the world come and help each other, share banter and work at all hours of the day to help build out a true open source cloud native continuous delivery solution for developers - it‚Äôs quite fantastic to see and amazing to be apart of. As a result of all this hard work the Beta is iminent so this is a good opportunity to thank all involved so far and to outline what to expect in the coming days. While we‚Äôve been in the Alpha phase it has provided us with the opportunity to deprecate and remove APIs, commands and obsolete features that existed in v2. This means we will not have any code dependency on the v2 codebase and so going forward v3 will be easier to maintain without the tech debt. With that, we aim to make a big push and roll out a few last changes in preparation for Beta, here‚Äôs a couple you will notice if you are already on the Alpha. We recommend taking time to understand these, and avoid upgrading for a few days so that changes can be handled in one go, as there will be a constant stream of larger updates happening: jx requirements - this is the yaml file used to describe install needs for Jenkins X, until now there have been options available that were unsupported, confusing and in some cases did nothing. These have now all been removed and the structure of the file has changed to be CRD like including an API version. Upon upgrade jx gitops upgrade will migrate your jx-requirements.</description></item><item><title>Blog: Accelerate your Tekton with Jenkins X</title><link>https://kubermates.org/docs/2020-11-11-blog-accelerate-your-tekton-with-jenkins-x/</link><pubDate>Wed, 11 Nov 2020 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2020-11-11-blog-accelerate-your-tekton-with-jenkins-x/</guid><description>Accelerate your Tekton with Jenkins X Version 2. x Vision Version 3. x Using Tekton in your repository Reusing Tekton Catalog Tasks Sharing steps between Tasks Custom Pipeline Catalogs Conclusion One of the goals of Jenkins X has always been to help accelerate and automate Continuous Delivery so that developers can focus on delivering value to their customers; either by creating that new microservice or adding features to an existing project and not writing and managing pipelines. Pipeline engines like Jenkins and Tekton are awesome - they can do anything! But they start as a blank sheet of paper where you have to fill in all the details of how to compile your code, test it, verify it, tag it, release, distribute and delivery it to production. Figuring all that stuff out can take a huge amount of time to create and maintain. This gets even more complex as we are all creating more and more microservices each with their own pipelines making more and more things to create and manage. We want to be able to reuse pipelines and tasks to get work done. But at the same time we want flexibility; not all applications are the same and sometimes things need to be changed on a per team or application basis. In Jenkins X 2. x we went with a jenkins-x. xml approach to pipelines which let you inherit pipelines from reuable pipeline library and then use a composition DSL above Tekton which lets you add/remove/replace steps. jenkins-x.</description></item><item><title>Blog: Hacktoberfest</title><link>https://kubermates.org/docs/2020-09-23-blog-hacktoberfest/</link><pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2020-09-23-blog-hacktoberfest/</guid><description>Hacktoberfest Contribute to Jenkins X Contribute to jx source code Contribute to the docs Ask us questions We are excited to announce that Jenkins X will be participating in Hacktoberfest again this year! Hacktoberfest is a month-long global celebration of open source software. From October 1 to October 31, submit four pull requests to qualify for the limited edition Hacktoberfest shirt. All backgrounds and skill levels are encouraged to participate in Hacktoberfest and join a global community of open source contributors. Learn more about Hacktoberfest and sign up here. We welcome your contributions to the Jenkins X project! Issues labelled ‚Äúhacktoberfest‚Äù generally indicate good first issues. However, all pull requests will count towards your Hacktoberfest challenge. Jenkins X welcomes contributors to both: the Jenkins X jx source code jx the Jenkins X documentation website jx There are plenty of open issues , and we welcome your help in making Jenkins X even more awesome. Jenkins X is written largely in Go, but you don‚Äôt need to be an expert to contribute! If you are new to the project, search for issues labelled ‚Äúgood-first-issue‚Äù. Our Contributing Guide has advice for getting started with contributing to Jenkins X. We welcome your help in improving the Jenkins X documenation. If you see areas of the documentation that need fixing or augmentation please raise a pull request. Our guide for Contributing to the Documentation has advice for getting started with contributing to the Jenkins X docs.</description></item><item><title>Blog: New UI to visualize your pipelines and logs</title><link>https://kubermates.org/docs/2020-09-23-blog-new-ui-to-visualize-your-pipelines-and-logs/</link><pubDate>Wed, 23 Sep 2020 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2020-09-23-blog-new-ui-to-visualize-your-pipelines-and-logs/</guid><description>New UI to visualize your pipelines and logs Why a new UI? Features Roadmap Demo Next steps Welcome to the Jenkins X Pipelines Visualizer : a new open-source read-only UI for Jenkins X, with a very specific goal and scope: visualize the pipelines and logs. This project was started at Dailymotion and quickly shared with the Jenkins X community. There is already the Octant-based UI , so why a new UI? The main reason is that Octant ‚Äúis an application and is intended as a single client tool and at this time there are no plans to support hosted versions of Octant‚Äù - see this thread on the Octant github repository for more information and details. So while Octant answers to a lot of use-cases, there is one for which it is not suited: quickly printing the build logs on a browser, for a specific pipeline. We want to be able to click on a link from a Pull/Merge Request, and get the pipeline logs. This is the specific use-case covered by the Pipelines Visualizer. We want to keep it small, focused, and fast. It‚Äôs a read-only UI, so there won‚Äôt be ‚Äúactions‚Äù to trigger a pipeline - because it can already be done using ‚Äúchatops‚Äù commands in the Pull Request for example. But there are a few interesting features already: first, it‚Äôs very fast to get the logs. Much faster than the old JXUI. it can retrieve the logs from pipelines that have been garbage-collected - if you configure the URL of the buckets where the logs are stored. it has URLs compatible with the old JXUI - so it‚Äôs very easy to replace the old JXUI with this new UI and keep all the links working.</description></item><item><title>Blog: Jenkins X Talks at CDCon</title><link>https://kubermates.org/docs/2020-09-16-blog-jenkins-x-talks-at-cdcon/</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2020-09-16-blog-jenkins-x-talks-at-cdcon/</guid><description>Jenkins X Talks at CDCon Wednesday, October 7 Thursday, October 8 Register for CDCon There will be six Jenkins X talks given by various speakers at the first-ever CDCon on October 7-8. The two-day virtual event, hosted by the Continuous Delivery Foundation, will focus on improving the world‚Äôs capacity to deliver software with security and speed. Register to attend the virtual event for only 25 USD and get access to all of the following Jenkins X talks and more. A CI/CD Framework for Production Machine Learning at Massive Scale (using Jenkins X and Seldon Core) Speaker: Alejandro Saucedo, Seldon Time: 1:15 PM PDT Managing production machine learning systems as internal data science infrastructure requirements grow, has uncovered new challenges which have required fundamentally different approaches to that of traditional CI/CD in software engineering. In this talk we will dive into the work we are doing at the SIG-MLOps and the CD Foundation towards developing the methodologies that encompass best practices to continuously integrate and deploy machine learning in production at massive scale. In this talk, we‚Äôll provide key insights on the core MLOps concepts, as well as a hands-on coding example where we take a text classification model through its training, deployment and promotion as canary and shadow deployments, which will also allow us to get deeper and more specific insight on our production environment. Dailymotion‚Äôs Continuous Delivery Story Speaker: Vincent Behar, Dailymotion Time: 3:30 PM PDT In this session, Vincent will share Dailymotion‚Äôs Continuous Delivery story with Jenkins, Jenkins X and Tekton. He will come back on the initial state and issues faced on the CI/CD topic, and how it was solved. He will insist on the practices that were put in place and the benefits that resulted from switching to Jenkins X. He will conclude with the new challenges brought by improving Dailymotion‚Äôs Continuous Delivery platform. If you are wondering if Jenkins X is the right tool for you, and the impact it can have on your team(s), then this is the right session for you! Moving from Jenkins to Jenkins X: Scaling and Accelerating CI/CD Speaker: Dr Michael Garbade, Education Ecosystem Time: 12:00 PM PDT Jenkins has served as a continuous integration (CI) tool long before the emergence of Kubernetes and distributed systems running on cloud-native platforms. Working with Jenkins as a stand-alone open-source tool has proved to be extremely difficult for distributed systems engineers, as it is designed for small projects and not scalable to bigger projects.</description></item><item><title>Blog: Welcome to Jenkins X 3.x alpha!</title><link>https://kubermates.org/docs/2020-09-16-blog-welcome-to-jenkins-x-3-x-alpha/</link><pubDate>Wed, 16 Sep 2020 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2020-09-16-blog-welcome-to-jenkins-x-3-x-alpha/</guid><description>Welcome to Jenkins X 3. x alpha! We are very pleased to announce the alpha release of Jenkins X version 3 You can read more about the overview of the architecture and components here. This release has lots of benefits over version 2 is much easier to use, understand and manage. It is more flexible and simpler to configure for different infrastructures and cloud providers. The new release works well with any combination of helm 3, helmfile, kpt and/or kustomize. For those who‚Äôve used Jenkins X version 2 you can check out a comparison of the two versions Here is a demo video showing how to get started with Jenkins X on Google Cloud with Terraform and Vault : We also did a live demo of getting started and using version 3 at the octant office hours last week. We also included the helmfile based preview environments enhancement via the new jx-preview plugin which makes it much easier to make more sophisticated previews such as using multiple namespaces for you previews using per preview namespaces or deploying previews into shared namespaces (e. g. via Canaries) using helmfile to cleanly remove resources We now have support, via Terraform for 2 of the big 3 public clouds: Amazon Google Azure support is getting really close; if you‚Äôd like to help get it ready join us on slack Also when using your laptop or local kubernetes cluster without terraform we support: Minikube so you can run Jenkins X on your laptop On-Premises so you can use any vanilla kubernetes cluster We are working on improving the UX of the installation/upgrade; we‚Äôre hoping to soon have a pure terraform (or Terraform Cloud) way to spin up a Jenkins X installation on a public cloud with a minimum of fuss. We‚Äôll hopefully blog about that soon‚Ä¶ So please take it for a spin and let us know what you think ! If you can think of any ways we can improve let us know! ‚Üê Previous.</description></item><item><title>Blog: Octant: the OSS UI for Jenkins X</title><link>https://kubermates.org/docs/2020-08-06-blog-octant-the-oss-ui-for-jenkins-x/</link><pubDate>Thu, 06 Aug 2020 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2020-08-06-blog-octant-the-oss-ui-for-jenkins-x/</guid><description>Octant: the OSS UI for Jenkins X Why Octant? Features Demo A common question we have heard in the community over the years is Is there an open source UI for Jenkins X?. Well we now have an answer: its Octant using the octant-jx plugin. We love Octant because: open source and very easy to extend with plugins in Go or TypeScript/JavaScript lets you visualise and work with all kubernetes and custom resources across multiple clusters thanks to octant-jx has awesome integration with Jenkins X components like apps, environments, pipelines, repositories etc. Longer term we‚Äôre planning on making most of the developer and operations features of Jenkins X available through the UI via octant-jx. e. g. we hope as part of Jenkins X 3. x you‚Äôll be able to install or upgrade Jenkins X and watch the installation proceed all via Octant. But already right now today you can: view applications, environments, pipelines, repositories for a pipeline quickly navigate to: its Pod, Log, Pull Request or Preview Environment for each step you can view the step detail or log of the step its Pod, Log, Pull Request or Preview Environment for each step you can view the step detail or log of the step see the various jobs and pipelines used to operate Jenkins X itself over time will add management UI capabilities for installing, upgrading and administering Jenkins Find out more about installing and using Octant here. We did a demo of octant-jx at the last office hours. We also presented octant-jx at the octant office hours this week. Here is a demo video showing octant in action with Jenkins X : ‚Üê Previous.</description></item></channel></rss>