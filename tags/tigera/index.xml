<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tigera on Kubermates</title><link>https://kubermates.org/tags/tigera/</link><description>Recent content in Tigera on Kubermates</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 25 Aug 2025 22:17:49 +0000</lastBuildDate><atom:link href="https://kubermates.org/tags/tigera/index.xml" rel="self" type="application/rss+xml"/><item><title>What’s New in Calico – Summer 2025</title><link>https://kubermates.org/docs/2025-08-25-what-s-new-in-calico-summer-2025/</link><pubDate>Mon, 25 Aug 2025 22:17:49 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-25-what-s-new-in-calico-summer-2025/</guid><description>As Kubernetes adoption scales across enterprise architectures, platform architects face mounting pressure to implement consistent security guardrails across distributed, multi-cluster environments while maintaining operational velocity. Modern infrastructure demands a security architecture that can adapt without introducing complexity or performance penalties. Traditional approaches force architects to cobble together separate solutions for ingress protection, network policies, and application-layer security, creating operational friction and increasing attack surface. Today, we’re announcing significant enhancements to Calico that eliminate this architectural complexity. This release introduces native Web Application Firewall (WAF) capabilities integrated directly into Calico’s Ingress Gateway, enabling platform architects to deploy a single technology stack for both ingress management and HTTP-layer threat protection. Combined with enhanced Role-Based Access Controls (RBAC) controls, and centralized observability across heterogeneous workloads, platform architects can now design and implement comprehensive security all within a unified platform. The new features in this release can be grouped under two main categories: Ingress traffic into a Kubernetes cluster is a common entry point for attacks, so it’s critical to inspect and proactively secure it. Since clusters often receive traffic directly from the public internet, analyzing application-layer protocols like HTTP and gRPC for threats is a fundamental security requirement. While there are options to deploy a standalone Web Application Firewall (WAF) with your ingress controller, using an integrated WAF simplifies operations and can reduce both complexity and cost. Calico Ingress Gateway , our implementation of the Kubernetes Gateway API, now includes a built-in WAF that allows you to inspect, authorize, and secure ingress traffic at runtime. The WAF that is integrated with Ingress Gateway is the same as the one used in Calico’s workload-based WAF , giving you consistent threat detection across both ingress points and internal services. With this built-in WAF, you can define and enforce security rules directly within the Ingress Gateway, enabling deep inspection of HTTP and gRPC traffic and blocking known threats before they reach your workloads.</description></item><item><title>Calico at KubeCon + CloudNativeCon North America 2025!</title><link>https://kubermates.org/docs/2025-08-15-calico-at-kubecon-cloudnativecon-north-america-2025/</link><pubDate>Fri, 15 Aug 2025 13:34:02 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-15-calico-at-kubecon-cloudnativecon-north-america-2025/</guid><description>Get ready, North America! The Calico team is thrilled to announce our participation in KubeCon + CloudNativeCon North America 2025, where we’ll be showcasing the latest advancements in Kubernetes networking, security, and observability. We’re excited to connect with the vibrant cloud-native community, share insights, and demonstrate how Calico Open Source continues to empower organizations worldwide. We have a packed agenda designed to offer you multiple ways to engage with our team and learn more about Calico. Mark your calendars for these exciting opportunities! Join us at CalicoCon North America 2025 , your go-to event for the latest in Kubernetes networking, security, and observability. Hosted by the Calico team, this hybrid event is your chance to hear directly from Calico engineers and leadership, get hands-on with new features, and take an in-depth look at the state of Project Calico. We’ll dive into Calico 3. 30, Calico eBPF, and Calico Whisker: open source observability for Kubernetes. Add CalicoCon to your existing KubeCon + CloudNativeCon registration ‌to secure your spot. If you are not attending KubeCon + CloudNativeCon North America but would still like to attend CalicoCon, please reach out to us ‌on the Calico User Slack. Event Details Date : November 10, 2025 Time : 1:00pm to 5:00pm EST Location : Virtual | The Westin Peachtree Plaza Atlanta Register Now After a day of deep dives and technical discussions, unwind and network with other Calico users and the team at our exclusive Happy Hour with Calico ! This is a fantastic opportunity to relax, mingle with fellow Kubernetes enthusiasts, and connect with Calico engineers in a casual setting. Enjoy good food, drinks, and great company as we celebrate the cloud-native community. Event Details Date : November 10, 2025 Time : 5:00pm to 7:00pm EST Location : The Sun Dial Restaurant, Atlanta, GA Register Now Be sure to stop by booth #521 to discuss Calico’s latest Kubernetes network security and observability advancements.</description></item><item><title>How 1&amp;1 Mail &amp; Media Scaled Kubernetes Networking with eBPF and Calico</title><link>https://kubermates.org/docs/2025-08-05-how-1-1-mail-media-scaled-kubernetes-networking-with-ebpf-and-calico/</link><pubDate>Tue, 05 Aug 2025 16:12:16 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-05-how-1-1-mail-media-scaled-kubernetes-networking-with-ebpf-and-calico/</guid><description>“We started in 2017 with Calico and never regretted it!” —Stephan Fudeus, Product Owner/Lead Architect, 1&amp;amp;1 Mail &amp;amp; Media 1&amp;amp;1 Mail &amp;amp; Media, part of the United Internet, powers popular European internet brands including GMX and Web. de, serving more than 50% of Germany’s population with critical identity and email infrastructure. With roughly 45 to 50 million users, network reliability is non-negotiable. Any downtime could affect millions. By 2022, the company had containerized 80% of its workloads on Kubernetes across three self-managed data centers. While the platform, backed by bare metal nodes and custom network layers, was highly scalable, network throughput bottlenecks began to emerge. Pods were limited to 2. 5 Gbps of bandwidth due to IP encapsulation overhead, despite 10 Gbps network interfaces. The team needed a solution that: 1&amp;amp;1 Mail &amp;amp; Media had adopted Calico back in 2017, largely for its unique Kubernetes NetworkPolicy standard support. As their Kubernetes platform evolved, with clusters scaling to 300 bare metal nodes, 16,000 pods, and over 4 million conntrack entries, the team turned to Calico’s eBPF data plane to unlock performance gains. Following successful initial trials of eBPF in development and integration environments, the team moved forward with production migrations in 2023. While early versions of Calico on older Linux kernel versions presented some limitations, these challenges were quickly addressed with proactive collaboration between the Calico maintainers and the team.</description></item><item><title>Top 5 Kubernetes Network Issues You Can Catch Early with Calico Whisker</title><link>https://kubermates.org/docs/2025-07-29-top-5-kubernetes-network-issues-you-can-catch-early-with-calico-whisker/</link><pubDate>Tue, 29 Jul 2025 18:54:43 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-29-top-5-kubernetes-network-issues-you-can-catch-early-with-calico-whisker/</guid><description>Kubernetes networking is deceptively simple on the surface, until it breaks, silently leaks data, or opens the door to a full-cluster compromise. As modern workloads become more distributed and ephemeral, traditional logging and metrics just can’t keep up with the complexity of cloud-native traffic flows. That’s where Calico Whisker comes in. Whisker is a lightweight Kubernetes-native observability tool created by Tigera. It offers deep insights into real-time traffic flow patterns, without requiring you to deploy heavyweight service meshes or packet sniffer. And here’s something you won’t get anywhere else: Whisker is data plane-agnostic. Whether you run Calico eBPF data plane, nftables, or iptables, you’ll get the same high-fidelity flow logs with consistent fields, format, and visibility. You don’t have to change your data plane, Whisker fits right in and shows you the truth, everywhere. Let’s walk through 5 network issues Whisker helps you catch early, before they turn into outages or security incidents. Traditional observability tools often show whether a packet was forwarded, accepted or dropped, but not why. They lack visibility into which Kubernetes network policy was responsible or if one was even applied. With Whisker, each network flow is paired with: This lets you immediately spot: This makes it easy to answer questions like: You get proactive visibility into gaps in enforcement long before someone accidentally exposes an internal app to the public internet.</description></item><item><title>Kubernetes Is Powerful, But Not Secure (at least not by default)</title><link>https://kubermates.org/docs/2025-07-24-kubernetes-is-powerful-but-not-secure-at-least-not-by-default/</link><pubDate>Thu, 24 Jul 2025 19:38:47 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-24-kubernetes-is-powerful-but-not-secure-at-least-not-by-default/</guid><description>Kubernetes has transformed how we deploy and manage applications. It gives us the ability to spin up a virtual data center in minutes, scaling infrastructure with ease. But with great power comes great complexities, and in the case of Kubernetes, that complexity is security. By default, Kubernetes permits all traffic between workloads in a cluster. This “allow by default” stance is convenient during development, and testing but it’s dangerous in production. It’s up to DevOps, DevSecOps, and cloud platform teams to lock things down. To improve the security posture of a Kubernetes cluster, we can use microsegmentation , a practice that limits each workload’s network reach so it can only talk to the specific resources it needs. This is an essential security method in today’s cloud-native environments. We all understand that network policies can achieve microsegmentation; or in other words, it can divide our Kubernetes network model into isolated pieces. This is important since Kubernetes is usually used to provide multiple teams with their infrastructural needs or host multiple workloads for different tenants. With that, you would think network policies are first citizens of clusters. However, when we dig into implementing them, three operational challenges make most practitioners reluctant about implementing policies.</description></item><item><title>Dry Run: Your Kubernetes network policies with Calico staged network policies</title><link>https://kubermates.org/docs/2025-07-15-dry-run-your-kubernetes-network-policies-with-calico-staged-network-policies/</link><pubDate>Tue, 15 Jul 2025 14:01:01 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-15-dry-run-your-kubernetes-network-policies-with-calico-staged-network-policies/</guid><description>Kubernetes Network Policies (KNP) are powerful resources that help secure and isolate workloads in a cluster. By defining what traffic is allowed to and from specific pods, KNPs provide the foundation for zero-trust networking and least-privilege access in cloud-native environments. But there’s a problem: KNPs are risky, and applying them without a clear game plan can be potentially disruptive. Without deep insight into existing traffic flows, applying a restrictive policy can instantly break connectivity killing live workloads, user sessions, or critical app dependencies. An even scarier scenario is when we implement policies that we think cover everything and workloads actually work, but after a restart or scaling operation we hit new problems. Kubernetes, with all of its features, has no built-in “dry run” mode for policies, and no first-class observability to show what would be blocked or allowed which is the right decision since Kubernetes is an orchestrator not an implementer. This forces platform teams into a difficult choice, deploy permissive or no policies and weaken security, or Risk service disruption while debugging restrictive ones. As a result, many teams delay implementing network policies entirely only to regret it after a zero-day exploit like Log4Shell, XZ backdoor, or other vulnerabilities that can impact production. The fear of breaking something becomes the top reason why Kubernetes environments go unsegmented. You can’t enforce what you can’t test safely. For instance, let’s say you want to secure a workload deployed by another team. You don’t control how it was configured.</description></item><item><title>Calico Whisker &amp; Staged Network Policies: Secure Kubernetes Workloads Without Downtime</title><link>https://kubermates.org/docs/2025-07-07-calico-whisker-staged-network-policies-secure-kubernetes-workloads-without-downt/</link><pubDate>Mon, 07 Jul 2025 20:00:17 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-07-calico-whisker-staged-network-policies-secure-kubernetes-workloads-without-downt/</guid><description>Rolling out network policies in a live Kubernetes cluster can feel like swapping wings mid-flight—one typo or overly broad rule and critical traffic is grounded. Calico’s Staged Network Policies remove the turbulence by letting you deploy policies in staged mode, so you can observe their impact before enforcing anything. Add Whisker , the open-source policy enforcement and testing tool (introduced as part of Calico Open Source 3. 30 ) that captures every flow and tags it with a policy verdict, and you’ve got a safety harness that proves your change is sound long before you flip the switch. In this post, we’ll walk you through how you can leverage these capabilities to tighten security, validate intent, and ship changes confidently—without a single packet of downtime. Calico for Policy is a CNI agnostic tool. Refer to the Calico Open Source docs for a list of supported CNIs. The git repository for this blog post can be found here. For this post, let’s deploy a simple AKS cluster with Azure CNI. Now that our cluster is deployed. Let’s provision a demo application. For this post, we will deploy a three-tier web application called “yet-another-bank” (yaobank).</description></item><item><title>A Detailed Look at Calico Cloud Free Tier</title><link>https://kubermates.org/docs/2025-07-02-a-detailed-look-at-calico-cloud-free-tier/</link><pubDate>Wed, 02 Jul 2025 20:23:35 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-02-a-detailed-look-at-calico-cloud-free-tier/</guid><description>As Kubernetes environments grow in scale and complexity, platform teams face increasing pressure to secure workloads without slowing down application delivery. But managing and enforcing network policies in Kubernetes is notoriously difficult—especially when visibility into pod-to-pod communication is limited or nonexistent. Teams are often forced to rely on manual traffic inspection, standalone logs, or trial-and-error policy changes, increasing the risk of misconfiguration and service disruption. Safe policy management and microsegmentation becomes a daunting task without clear knowledge or insight into which services should communicate with each other. In this detailed look, we’ll explore how Calico Cloud Free Tier builds upon Calico Open Source , and helps platform teams visualize traffic with a dynamic service graph, simplifies policy management, and even analyzes actual traffic to recommend policies. Calico Cloud Free Tier is a managed SaaS, no-cost offering that extends the capabilities of Calico Open Source 3. 30 and higher to help Kubernetes teams improve network visibility, simplify policy management, and improve security by simplifying microsegmentation. Designed for single-cluster environments, it provides platform engineers and operators with powerful observability and policy management tools. With a seamless onboarding experience for users already running Calico Open Source 3. 30 or higher, Calico Cloud Free Tier empowers teams to take control of their Kubernetes traffic—without additional cost or vendor lock-in. Let’s take a closer look at the key features that make Calico Cloud Free Tier a powerful solution for Kubernetes network security and observability: Calico’s primary observability solution is Dynamic Service Graph , a powerful visualization tool that maps real-time pod-to-pod communication across your cluster. This Service Graph, which is available in Calico Cloud Free Tier, gives you an immediate understanding of how workloads interact, making it far easier to identify unexpected traffic patterns or missing connections.</description></item><item><title>Switching to eBPF One Step at a Time with Calico DNS Inline Policy</title><link>https://kubermates.org/docs/2025-06-25-switching-to-ebpf-one-step-at-a-time-with-calico-dns-inline-policy/</link><pubDate>Wed, 25 Jun 2025 16:05:49 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-25-switching-to-ebpf-one-step-at-a-time-with-calico-dns-inline-policy/</guid><description>Calico Enterprise lets users write network policies using domain names instead of IP addresses. This is done by dynamically mapping domain names to IP addresses and matching the egress traffic against these IPs. We have discussed this feature in detail when we introduced the Inline mode for the eBPF data plane in Calico Enterprise 3. 20 release! It addresses the latency and performance issues of the various modes used by Calico in iptables/nftables data planes. It is a shame that Calico users who are not yet ready to switch completely to eBPF would miss out on this big DNS policy improvement. Don’t worry! We found a way to port it to iptables to enhance our users’ experience without forcing users to make a huge leap. In Calico Enterprise v3. 21, we have extended the Inline DNS policy mode to iptables. In this mode, DNS policies are updated in real time as DNS responses are parsed by eBPF within the data plane, thus improving the performance. In all the existing modes in the iptables data plane, the DNS response packets are sent to Felix – Calico’s userspace agent. It parses the packets and updates the data plane since advanced packet parsing is not feasible with standard iptables rules. However, iptables has an xt_bpf extension which lets us process and match the packets by an eBPF program the same way we do that in the eBPF data plane! An iptables rule that allows it may look something like this: The iptables rule calls the eBPF DNS parser program on the response packet and updates the data plane inline.</description></item><item><title>Securing Kubernetes Traffic with Calico Ingress Gateway</title><link>https://kubermates.org/docs/2025-06-17-securing-kubernetes-traffic-with-calico-ingress-gateway/</link><pubDate>Tue, 17 Jun 2025 16:26:04 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-17-securing-kubernetes-traffic-with-calico-ingress-gateway/</guid><description>If you’ve managed traffic in Kubernetes, you’ve likely navigated the world of Ingress controllers. For years, Ingress has been the standard way of getting our HTTP/S services exposed. But let’s be honest, it often felt like a compromise. We wrestled with controller-specific annotations to unlock critical features, blurred the lines between infrastructure and application concerns, and sometimes wished for richer protocol support or a more standardized approach. This “pile of vendor annotations,” while functional, highlighted the limitations of a standard that struggled to keep pace with the complex demands of modern, multi-team environments and even led to security vulnerabilities. Yes, and it’s a crucial one. The Kubernetes Gateway API isn’t just an Ingress v2; it’s a fundamental redesign, the “future” of Kubernetes ingress, built by the community to address these very challenges head-on. There are three main points that I came across while evaluating GatewayAPI and Ingress controllers: The Ingress controller landscape is a mishmash of vendors with cool ideas. While they all can route HTTP/S traffic into your cluster, expanding your services to include other protocols puts you at the mercy of that vendor and the capabilities that they implement. On top of that, if you try to migrate from your old Ingress Controller to a new one at some point, there is that sweet conversation of vendor lock-in which ties your hands. If you are wondering how vendor lock-in plays a role here, then take a closer look at your Ingress resources, don’t they all share some sort of annotation? That “pile of vendor annotations,” while functional, is specific to that one great solution you are currently using, highlighting the limitations of a standard that struggled to keep pace and even led to security vulnerabilities. While Ingress isn’t disappearing tomorrow, the direction is clear.</description></item><item><title>Secure and Scalable Kubernetes for Multi-Cluster Management</title><link>https://kubermates.org/docs/2025-06-10-secure-and-scalable-kubernetes-for-multi-cluster-management/</link><pubDate>Tue, 10 Jun 2025 20:03:12 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-10-secure-and-scalable-kubernetes-for-multi-cluster-management/</guid><description>This story is becoming more and more common in the Kubernetes world. What starts as a manageable cluster or two can quickly balloon into a sprawling, multi-cluster architecture spanning public clouds, private data centers, or a bit of both. And with that growth comes a whole new set of headaches. How do you keep tabs on compliance across wildly different configurations? When a service goes down across multiple clusters, how do you pinpoint the cause amidst the chaos? And what about those hard-to-diagnose latency issues that seem to crop up between regions? The truth is, achieving secure and scalable multi-cluster Kubernetes isn’t about throwing more tools at the problem. It’s about having the right tools and adopting the right best practices. This is where a solution like Calico Cluster Mesh shines, offering those essential capabilities for a seamless multi-cluster experience without the complexity or overhead that you expect with traditional service meshes. So, why are so many organizations finding themselves in this multi-cluster maze? Often, it’s driven by solid business reasons: While these motivations are sound, the challenges that emerge in these multi-cloud environments are remarkably consistent: This is where Calico Cluster Mesh comes into play. It provides seamless connectivity between clusters deployed across different regions, VPCs, or VNETs, allowing you to interact with services as if they were local. Calico handles the networking with a VXLAN overlay, which means less reliance on cloud vendor-specific networking and fewer unnecessary network hops. Securing Kubernetes isn’t just about drawing lines around your network. It’s about truly understanding how your workloads interact and then enforcing granular policies, even across distributed clusters. A consistent and scalable policy model is absolutely vital in multi-cluster deployments.</description></item><item><title>Is It Time to Migrate? A Practical Look at Kubernetes Ingress vs. Gateway API</title><link>https://kubermates.org/docs/2025-06-04-is-it-time-to-migrate-a-practical-look-at-kubernetes-ingress-vs-gateway-api/</link><pubDate>Wed, 04 Jun 2025 14:10:48 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-04-is-it-time-to-migrate-a-practical-look-at-kubernetes-ingress-vs-gateway-api/</guid><description>If you’ve managed traffic in Kubernetes, you’ve likely navigated the world of Ingress controllers. For years, Ingress has been the standard way of getting HTTP/S services exposed. But let’s be honest, it often felt like a compromise. We wrestled with controller-specific annotations to unlock critical features, blurred the lines between infrastructure and application concerns, this complexity didn’t just make portability more difficult, it sometimes led to security vulnerabilities and other complications. As part of Calico Open Source v3. 30 , we have released a free and open source Calico Ingress Gateway that implements a custom built Envoy proxy with the Kubernetes Gateway API standard to help you navigate Ingress complexities with style. This blog post is designed to get you up to speed on why such a change might be the missing link in your environment. The challenge with traditional Ingress wasn’t a lack of effort, since the landscape is full of innovative solutions. However, the problem was the lack of a unified, expressive, and role-aware standard. Existing ingress controllers were capable, implemented advanced features, however at the same time tied you to a specific project/vendor. This meant: This “Ingress rut” had tangible consequences. Platform teams struggled to enforce security standards and provide a consistent ingress experience.</description></item><item><title>Why we need a unified approach to Kubernetes environments</title><link>https://kubermates.org/docs/2025-05-26-why-we-need-a-unified-approach-to-kubernetes-environments/</link><pubDate>Mon, 26 May 2025 16:46:48 +0000</pubDate><guid>https://kubermates.org/docs/2025-05-26-why-we-need-a-unified-approach-to-kubernetes-environments/</guid><description>Today, organizations struggle managing disparate technologies for their Kubernetes networking and network security needs. Leveraging multiple technologies for networking and security for in-cluster, ingress, egress, and traffic across clusters creates challenges, including operational complexities and increased costs. For example, to manage ingress traffic for Kubernetes clusters, users cobble together multiple solutions from different providers such as ingress controllers or gateways and load balancers for routing traffic, as well as Web Application Firewalls (WAFs) for enhanced security. Despite the challenges it brings, deploying disparate technologies has been a “necessary evil” for organizations to get all the capabilities needed for holistic Kubernetes networking. Here, we’ll explore challenges this proliferation of tooling introduces, and provide actionable tips for today’s platform and security teams to overcome these issues. The fragmented approach to networking and network security in Kubernetes leads to challenges and inefficiencies, including: Take managing ingress traffic, and everything that goes with it. It is typical in a Kubernetes environment, that a user might need to manage multiple tools and services, such as cloud provider load balancers, application gateways, and ingress controllers like NGINX or others, to enable traffic flow and security. This can lead to complexity and fragmentation when integrating these components across your cloud infrastructure and Kubernetes clusters. The user is then required to learn about these individual tools, how they work, what their API is, how to manage them, deploy them, and troubleshoot them. And when it comes to troubleshooting, different sources for logging leads to issues identifying the source of an issue—and, in turn, challenges remediating said issue. Organizations can address these challenges by adopting a unified approach to Kubernetes networking. Deploying a single, unified solution for Kubernetes networking from the application to the networking layer eliminates the need for separate tools to manage ingress, egress, in-cluster, and cross-cluster traffic, significantly simplifying operations and reducing costs without compromising performance or security.</description></item><item><title>What’s New in Calico: Spring 2025</title><link>https://kubermates.org/docs/2025-05-21-what-s-new-in-calico-spring-2025/</link><pubDate>Wed, 21 May 2025 21:52:07 +0000</pubDate><guid>https://kubermates.org/docs/2025-05-21-what-s-new-in-calico-spring-2025/</guid><description>Calico provides a unified platform for all your Kubernetes networking, network security, and observability requirements. From ingress/egress management and east-west policy enforcement to multi-cluster connectivity, Calico delivers comprehensive capabilities. It is distribution-agnostic, preventing vendor lock-in and offering a consistent experience across popular Kubernetes distributions and managed services. Calico eliminates silos, providing seamless networking and observability for containers, VMs, and bare metal servers, and extends effortlessly to multi-cluster environments, in the cloud, on-premises, and at the edge. With the recent release of Calico Open Source 3. 30 , we added: And to expand on our robust Calico Open Source 3. 30 offering, we’re excited to introduce Calico Cloud Free Tier. This new product edition further expands our open source offerings by providing enhanced observability and policy management capabilities to help visualize and troubleshoot workload communication, and simplify network security enforcement and microsegmentation. Already using Calico Open Source 3. 30 or higher? Get started in less than five minutes. All you need to do is connect your Calico Open Source 3. 30 cluster to Calico Cloud Free Tier and see the difference! Calico Cloud Free Tier is designed to expand on the capabilities of Calico Open Source and address the many challenges faced by Kubernetes operators and platform engineers, including: Gain deep insights into workload communication with Calico Dynamic Service Graph Calico Cloud Free Tier directly addresses these challenges by offering enhanced capabilities, including: Calico Policy Board simplifies microsegmentation by making it easier to create, stage, and safely deploy network policies.</description></item><item><title>Recap: KubeCon + CloudNativeCon Europe 2025</title><link>https://kubermates.org/docs/2025-04-23-recap-kubecon-cloudnativecon-europe-2025/</link><pubDate>Wed, 23 Apr 2025 20:32:36 +0000</pubDate><guid>https://kubermates.org/docs/2025-04-23-recap-kubecon-cloudnativecon-europe-2025/</guid><description>When I got the assignment to attend KubeCon 1st of April I thought it was an April prank, but as the date got closer I realized—this is for real and I’ll be on the ground in London at the tenth anniversary of cloud native computing. I’ve seen a lot of tech events during my years in the industry while trying not to get replaced by AI and I have to say this one stands out! Image source: CNCF YouTube Channel Here is my recap of KubeCon + CloudNativeCon Europe 2025. CalicoCon is an event that happens twice every year, as a co-located event during KubeCon NA and EU. It’s a free event that allows you to learn about Tigera’s vision for the future of networking and security in the cloud. There’s also an after-party to celebrate our community and people like you who are on this journey with us! This year our main focus was on Calico v3. 30 , our upcoming release that will add a lot of anticipated features to Calico, unlocking things like observability, staged network policy, and gateway api. CalicoCon brought together cloud-native enthusiasts to explore the latest advancements in Calico and Kubernetes networking. The following is a brief summary of this year’s CalicoCon sessions. Note: The CalicoCon playlist with session recordings is now available on YouTube. Peter Kelly, VP of Engineering at Tigera, highlighted the new features in Calico v3. 30. A key focus was on the new observability features, including the “Whisker” dashboard, designed to provide deeper insights into network behavior.</description></item><item><title>How to get started with Calico Observability features</title><link>https://kubermates.org/docs/2025-04-15-how-to-get-started-with-calico-observability-features/</link><pubDate>Tue, 15 Apr 2025 15:37:28 +0000</pubDate><guid>https://kubermates.org/docs/2025-04-15-how-to-get-started-with-calico-observability-features/</guid><description>Kubernetes, by default, adopts a permissive networking model where all pods can freely communicate unless explicitly restricted using network policies. While this simplifies application deployment, it introduces significant security risks. Unrestricted network traffic allows workloads to interact with unauthorized destinations, increasing the potential for cyberattacks such as Remote Code Execution (RCE), DNS spoofing, and privilege escalation. To better understand these problems, let’s examine a sample Kubernetes application: ANP Demo App. This application comprises a deployment that spawns pods and a service that exposes them to external users in a similar situation like any real word workload which you will encounter in your environment. If you open the application service before implementing any policies, the application reports the following messages: In this blog post we are going through a scenario to secure our cluster by preventing our workloads from accessing the external resources. Number 1 and 3 from the previous list. In Kubernetes, the default permissive networking model, where all pods can freely communicate, poses a significant security challenge. While network policies are crucial for enforcing a Zero Trust security model, identifying the necessary network flows for an application to function correctly can be difficult. Using CLI tools to inspect network traffic and deduce the required policies can be a complex and time-consuming task. It often involves sifting through large amounts of data and requires a deep understanding of network protocols and Kubernetes internals. Even for experienced administrators, accurately capturing all necessary flows without disrupting application functionality is a challenge.</description></item></channel></rss>