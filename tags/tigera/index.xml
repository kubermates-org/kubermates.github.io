<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tigera on Kubermates</title><link>https://kubermates.org/tags/tigera/</link><description>Recent content in Tigera on Kubermates</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 25 Aug 2025 22:17:49 +0000</lastBuildDate><atom:link href="https://kubermates.org/tags/tigera/index.xml" rel="self" type="application/rss+xml"/><item><title>What‚Äôs New in Calico ‚Äì Summer 2025</title><link>https://kubermates.org/docs/2025-08-25-what-s-new-in-calico-summer-2025/</link><pubDate>Mon, 25 Aug 2025 22:17:49 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-25-what-s-new-in-calico-summer-2025/</guid><description>Security at Scale with a Unified Platform Calico Ingress Gateway with Integrated WAF Granular Dashboard access with new RBAC and UI enhancements Simplified Operations for Kubernetes, VM, and bare metal workloads Policy Recommendations Now Available in Calico Cloud Free Tier Centralized log forwarding for VM and bare metal hosts Improved visualization of VM and bare metal hosts in Calico Service Graph Summary As Kubernetes adoption scales across enterprise architectures, platform architects face mounting pressure to implement consistent security guardrails across distributed, multi-cluster environments while maintaining operational velocity. Modern infrastructure demands a security architecture that can adapt without introducing complexity or performance penalties. Traditional approaches force architects to cobble together separate solutions for ingress protection, network policies, and application-layer security, creating operational friction and increasing attack surface. Today, we‚Äôre announcing significant enhancements to Calico that eliminate this architectural complexity. This release introduces native Web Application Firewall (WAF) capabilities integrated directly into Calico‚Äôs Ingress Gateway, enabling platform architects to deploy a single technology stack for both ingress management and HTTP-layer threat protection. Combined with enhanced Role-Based Access Controls (RBAC) controls, and centralized observability across heterogeneous workloads, platform architects can now design and implement comprehensive security all within a unified platform. The new features in this release can be grouped under two main categories: Security at Scale with a Unified Platform: This release introduces critical security features that make it easier to secure and scale Kubernetes workloads. Simplified Operations for Kubernetes, VM, and bare metal workloads: Reducing complexity is key to scaling Kubernetes, VM, and bare metal workloads, and this release introduces features that make security management more automated and scalable. Ingress traffic into a Kubernetes cluster is a common entry point for attacks, so it‚Äôs critical to inspect and proactively secure it. Since clusters often receive traffic directly from the public internet, analyzing application-layer protocols like HTTP and gRPC for threats is a fundamental security requirement. While there are options to deploy a standalone Web Application Firewall (WAF) with your ingress controller, using an integrated WAF simplifies operations and can reduce both complexity and cost. Calico Ingress Gateway , our implementation of the Kubernetes Gateway API, now includes a built-in WAF that allows you to inspect, authorize, and secure ingress traffic at runtime.</description></item><item><title>Calico at KubeCon + CloudNativeCon North America 2025!</title><link>https://kubermates.org/docs/2025-08-15-calico-at-kubecon-cloudnativecon-north-america-2025/</link><pubDate>Fri, 15 Aug 2025 13:34:02 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-15-calico-at-kubecon-cloudnativecon-north-america-2025/</guid><description>CalicoCon North America 2025 Happy Hour with Calico KubeCon + CloudNativeCon North America 2025 See you in Atlanta! Get ready, North America! The Calico team is thrilled to announce our participation in KubeCon + CloudNativeCon North America 2025, where we‚Äôll be showcasing the latest advancements in Kubernetes networking, security, and observability. We‚Äôre excited to connect with the vibrant cloud-native community, share insights, and demonstrate how Calico Open Source continues to empower organizations worldwide. We have a packed agenda designed to offer you multiple ways to engage with our team and learn more about Calico. Mark your calendars for these exciting opportunities! Join us at CalicoCon North America 2025 , your go-to event for the latest in Kubernetes networking, security, and observability. Hosted by the Calico team, this hybrid event is your chance to hear directly from Calico engineers and leadership, get hands-on with new features, and take an in-depth look at the state of Project Calico. We‚Äôll dive into Calico 3. 30, Calico eBPF, and Calico Whisker: open source observability for Kubernetes. Add CalicoCon to your existing KubeCon + CloudNativeCon registration ‚Äåto secure your spot. If you are not attending KubeCon + CloudNativeCon North America but would still like to attend CalicoCon, please reach out to us ‚Äåon the Calico User Slack. Event Details Date : November 10, 2025 Time : 1:00pm to 5:00pm EST Location : Virtual | The Westin Peachtree Plaza Atlanta Register Now After a day of deep dives and technical discussions, unwind and network with other Calico users and the team at our exclusive Happy Hour with Calico ! This is a fantastic opportunity to relax, mingle with fellow Kubernetes enthusiasts, and connect with Calico engineers in a casual setting. Enjoy good food, drinks, and great company as we celebrate the cloud-native community. Event Details Date : November 10, 2025 Time : 5:00pm to 7:00pm EST Location : The Sun Dial Restaurant, Atlanta, GA Register Now Be sure to stop by booth #521 to discuss Calico‚Äôs latest Kubernetes network security and observability advancements.</description></item><item><title>How 1&amp;1 Mail &amp; Media Scaled Kubernetes Networking with eBPF and Calico</title><link>https://kubermates.org/docs/2025-08-05-how-1-1-mail-media-scaled-kubernetes-networking-with-ebpf-and-calico/</link><pubDate>Tue, 05 Aug 2025 16:12:16 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-05-how-1-1-mail-media-scaled-kubernetes-networking-with-ebpf-and-calico/</guid><description>Challenge Solution Results What‚Äôs Next ‚ÄúWe started in 2017 with Calico and never regretted it!‚Äù ‚ÄîStephan Fudeus, Product Owner/Lead Architect, 1&amp;amp;1 Mail &amp;amp; Media 1&amp;amp;1 Mail &amp;amp; Media, part of the United Internet, powers popular European internet brands including GMX and Web. de, serving more than 50% of Germany‚Äôs population with critical identity and email infrastructure. With roughly 45 to 50 million users, network reliability is non-negotiable. Any downtime could affect millions. By 2022, the company had containerized 80% of its workloads on Kubernetes across three self-managed data centers. While the platform, backed by bare metal nodes and custom network layers, was highly scalable, network throughput bottlenecks began to emerge. Pods were limited to 2. 5 Gbps of bandwidth due to IP encapsulation overhead, despite 10 Gbps network interfaces. The team needed a solution that: Improved pod-to-pod network performance Maintained strong network policy isolation across up to 40 tenants per cluster Scaled to millions of network connections and 1. 4 million HTTP requests per second 1&amp;amp;1 Mail &amp;amp; Media had adopted Calico back in 2017, largely for its unique Kubernetes NetworkPolicy standard support. As their Kubernetes platform evolved, with clusters scaling to 300 bare metal nodes, 16,000 pods, and over 4 million conntrack entries, the team turned to Calico‚Äôs eBPF data plane to unlock performance gains. Following successful initial trials of eBPF in development and integration environments, the team moved forward with production migrations in 2023.</description></item><item><title>Top 5 Kubernetes Network Issues You Can Catch Early with Calico Whisker</title><link>https://kubermates.org/docs/2025-07-29-top-5-kubernetes-network-issues-you-can-catch-early-with-calico-whisker/</link><pubDate>Tue, 29 Jul 2025 18:54:43 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-29-top-5-kubernetes-network-issues-you-can-catch-early-with-calico-whisker/</guid><description>&lt;ol&gt;
&lt;li&gt;Policy Misconfigurations 2. Misconfigured ServiceAccount Trust Boundaries 3. Asymmetric or One-Sided Flow Patterns 4. Traffic to ‚ÄúPrivate Network‚Äù Destinations Without Explicit Source Policies 5. Zombie Connections and Stale Pod Traffic üß† Bonus: Why Whisker Stands Apart from Traditional Logs üß™ Ready to Try It? Kubernetes networking is deceptively simple on the surface, until it breaks, silently leaks data, or opens the door to a full-cluster compromise. As modern workloads become more distributed and ephemeral, traditional logging and metrics just can‚Äôt keep up with the complexity of cloud-native traffic flows. That‚Äôs where Calico Whisker comes in. Whisker is a lightweight Kubernetes-native observability tool created by Tigera. It offers deep insights into real-time traffic flow patterns, without requiring you to deploy heavyweight service meshes or packet sniffer. And here‚Äôs something you won‚Äôt get anywhere else: Whisker is data plane-agnostic. Whether you run Calico eBPF data plane, nftables, or iptables, you‚Äôll get the same high-fidelity flow logs with consistent fields, format, and visibility.&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Kubernetes Is Powerful, But Not Secure (at least not by default)</title><link>https://kubermates.org/docs/2025-07-24-kubernetes-is-powerful-but-not-secure-at-least-not-by-default/</link><pubDate>Thu, 24 Jul 2025 19:38:47 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-24-kubernetes-is-powerful-but-not-secure-at-least-not-by-default/</guid><description>Why Is Microsegmentation So Hard? üõ°Ô∏èSecuring the Default Cluster Posture with Kubernetes Network Policy üîê What Makes Admin Network Policy (ANP) So Special? üõ°Ô∏èReach Even Further with Calico Network Policies üß© Delegating Policy Ownership with Kubernetes RBAC üß™ Safely Testing and Troubleshooting Policies üëÄ Calico Whisker: Observe Before You Act üß™ Staged Network Policies: Test Without Breaking Things ü§ñ Policy Recommendation Engine (Free with Calico Cloud Free Tier) üó∫Ô∏è Bonus: Visual Tools in Calico Cloud Free Tier Conclusion: Microsegmentation Doesn‚Äôt Have to Be a Nightmare Kubernetes has transformed how we deploy and manage applications. It gives us the ability to spin up a virtual data center in minutes, scaling infrastructure with ease. But with great power comes great complexities, and in the case of Kubernetes, that complexity is security. By default, Kubernetes permits all traffic between workloads in a cluster. This ‚Äúallow by default‚Äù stance is convenient during development, and testing but it‚Äôs dangerous in production. It‚Äôs up to DevOps, DevSecOps, and cloud platform teams to lock things down. To improve the security posture of a Kubernetes cluster, we can use microsegmentation , a practice that limits each workload‚Äôs network reach so it can only talk to the specific resources it needs. This is an essential security method in today‚Äôs cloud-native environments. We all understand that network policies can achieve microsegmentation; or in other words, it can divide our Kubernetes network model into isolated pieces. This is important since Kubernetes is usually used to provide multiple teams with their infrastructural needs or host multiple workloads for different tenants. With that, you would think network policies are first citizens of clusters. However, when we dig into implementing them, three operational challenges make most practitioners reluctant about implementing policies.</description></item><item><title>Dry Run: Your Kubernetes network policies with Calico staged network policies</title><link>https://kubermates.org/docs/2025-07-15-dry-run-your-kubernetes-network-policies-with-calico-staged-network-policies/</link><pubDate>Tue, 15 Jul 2025 14:01:01 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-15-dry-run-your-kubernetes-network-policies-with-calico-staged-network-policies/</guid><description>Impact Resolution Let‚Äôs Set the Scene The Power of Staged Network Policies Where to Observe Staged Policies? Go Even Further With Calico Cloud Free Tier Outcome Kubernetes Network Policies (KNP) are powerful resources that help secure and isolate workloads in a cluster. By defining what traffic is allowed to and from specific pods, KNPs provide the foundation for zero-trust networking and least-privilege access in cloud-native environments. But there‚Äôs a problem: KNPs are risky, and applying them without a clear game plan can be potentially disruptive. Without deep insight into existing traffic flows, applying a restrictive policy can instantly break connectivity killing live workloads, user sessions, or critical app dependencies. An even scarier scenario is when we implement policies that we think cover everything and workloads actually work, but after a restart or scaling operation we hit new problems. Kubernetes, with all of its features, has no built-in ‚Äúdry run‚Äù mode for policies, and no first-class observability to show what would be blocked or allowed which is the right decision since Kubernetes is an orchestrator not an implementer. This forces platform teams into a difficult choice, deploy permissive or no policies and weaken security, or Risk service disruption while debugging restrictive ones. As a result, many teams delay implementing network policies entirely only to regret it after a zero-day exploit like Log4Shell, XZ backdoor, or other vulnerabilities that can impact production. The fear of breaking something becomes the top reason why Kubernetes environments go unsegmented. You can‚Äôt enforce what you can‚Äôt test safely. For instance, let‚Äôs say you want to secure a workload deployed by another team. You don‚Äôt control how it was configured.</description></item><item><title>Calico Whisker &amp; Staged Network Policies: Secure Kubernetes Workloads Without Downtime</title><link>https://kubermates.org/docs/2025-07-07-calico-whisker-staged-network-policies-secure-kubernetes-workloads-without-downt/</link><pubDate>Mon, 07 Jul 2025 20:00:17 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-07-calico-whisker-staged-network-policies-secure-kubernetes-workloads-without-downt/</guid><description>Deploying a Kubernetes Cluster Deploying the yaobank Application Installing Calico for Policy Connect to Whisker UI Deploy Staged Network Policy Summary Rolling out network policies in a live Kubernetes cluster can feel like swapping wings mid-flight‚Äîone typo or overly broad rule and critical traffic is grounded. Calico‚Äôs Staged Network Policies remove the turbulence by letting you deploy policies in staged mode, so you can observe their impact before enforcing anything. Add Whisker , the open-source policy enforcement and testing tool (introduced as part of Calico Open Source 3. 30 ) that captures every flow and tags it with a policy verdict, and you‚Äôve got a safety harness that proves your change is sound long before you flip the switch. In this post, we‚Äôll walk you through how you can leverage these capabilities to tighten security, validate intent, and ship changes confidently‚Äîwithout a single packet of downtime. Calico for Policy is a CNI agnostic tool. Refer to the Calico Open Source docs for a list of supported CNIs. The git repository for this blog post can be found here. For this post, let‚Äôs deploy a simple AKS cluster with Azure CNI. ## Configure az group create &amp;ndash;name calicooss &amp;ndash;location eastus2 ## Create a 3 node AKS cluster with Azure CNI az aks create &amp;ndash;resource-group calicooss &amp;ndash;name calico-whisker &amp;ndash;node-count 3 &amp;ndash;network-plugin azure &amp;ndash;kubernetes-version 1. 31. 8 ## Retrieve the kubeconfig file az aks get-credentials &amp;ndash;resource-group calicooss &amp;ndash;name calico-whisker Now that our cluster is deployed.</description></item><item><title>A Detailed Look at Calico Cloud Free Tier</title><link>https://kubermates.org/docs/2025-07-02-a-detailed-look-at-calico-cloud-free-tier/</link><pubDate>Wed, 02 Jul 2025 20:23:35 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-02-a-detailed-look-at-calico-cloud-free-tier/</guid><description>Why Calico Cloud Free Tier? What is Calico Cloud Free Tier? Enhanced Observability Simplified Microsegmentation Intuitive Dashboards Intelligent Policy Recommendations Seamless Path to Calico Cloud Free Tier How Calico Cloud Free Tier Enhances Calico Open Source Conclusion As Kubernetes environments grow in scale and complexity, platform teams face increasing pressure to secure workloads without slowing down application delivery. But managing and enforcing network policies in Kubernetes is notoriously difficult‚Äîespecially when visibility into pod-to-pod communication is limited or nonexistent. Teams are often forced to rely on manual traffic inspection, standalone logs, or trial-and-error policy changes, increasing the risk of misconfiguration and service disruption. Safe policy management and microsegmentation becomes a daunting task without clear knowledge or insight into which services should communicate with each other. In this detailed look, we‚Äôll explore how Calico Cloud Free Tier builds upon Calico Open Source , and helps platform teams visualize traffic with a dynamic service graph, simplifies policy management, and even analyzes actual traffic to recommend policies. Calico Cloud Free Tier is a managed SaaS, no-cost offering that extends the capabilities of Calico Open Source 3. 30 and higher to help Kubernetes teams improve network visibility, simplify policy management, and improve security by simplifying microsegmentation. Designed for single-cluster environments, it provides platform engineers and operators with powerful observability and policy management tools. With a seamless onboarding experience for users already running Calico Open Source 3. 30 or higher, Calico Cloud Free Tier empowers teams to take control of their Kubernetes traffic‚Äîwithout additional cost or vendor lock-in. Let‚Äôs take a closer look at the key features that make Calico Cloud Free Tier a powerful solution for Kubernetes network security and observability: Calico‚Äôs primary observability solution is Dynamic Service Graph , a powerful visualization tool that maps real-time pod-to-pod communication across your cluster. This Service Graph, which is available in Calico Cloud Free Tier, gives you an immediate understanding of how workloads interact, making it far easier to identify unexpected traffic patterns or missing connections.</description></item><item><title>Switching to eBPF One Step at a Time with Calico DNS Inline Policy</title><link>https://kubermates.org/docs/2025-06-25-switching-to-ebpf-one-step-at-a-time-with-calico-dns-inline-policy/</link><pubDate>Wed, 25 Jun 2025 16:05:49 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-25-switching-to-ebpf-one-step-at-a-time-with-calico-dns-inline-policy/</guid><description>Calico iptables ‚Äì DNS Inline policy The outcome NFTABLES Conclusion Calico Enterprise lets users write network policies using domain names instead of IP addresses. This is done by dynamically mapping domain names to IP addresses and matching the egress traffic against these IPs. We have discussed this feature in detail when we introduced the Inline mode for the eBPF data plane in Calico Enterprise 3. 20 release! It addresses the latency and performance issues of the various modes used by Calico in iptables/nftables data planes. It is a shame that Calico users who are not yet ready to switch completely to eBPF would miss out on this big DNS policy improvement. Don‚Äôt worry! We found a way to port it to iptables to enhance our users‚Äô experience without forcing users to make a huge leap. In Calico Enterprise v3. 21, we have extended the Inline DNS policy mode to iptables. In this mode, DNS policies are updated in real time as DNS responses are parsed by eBPF within the data plane, thus improving the performance. In all the existing modes in the iptables data plane, the DNS response packets are sent to Felix ‚Äì Calico‚Äôs userspace agent. It parses the packets and updates the data plane since advanced packet parsing is not feasible with standard iptables rules. However, iptables has an xt_bpf extension which lets us process and match the packets by an eBPF program the same way we do that in the eBPF data plane! xt_bpf An iptables rule that allows it may look something like this: iptables -A INPUT -m bpf ‚Äìobject-pinned /sys/fs/bpf/dns_parser -j ACCEPT The iptables rule calls the eBPF DNS parser program on the response packet and updates the data plane inline.</description></item><item><title>Securing Kubernetes Traffic with Calico Ingress Gateway</title><link>https://kubermates.org/docs/2025-06-17-securing-kubernetes-traffic-with-calico-ingress-gateway/</link><pubDate>Tue, 17 Jun 2025 16:26:04 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-17-securing-kubernetes-traffic-with-calico-ingress-gateway/</guid><description>Wait a second, is this the ‚ÄòIngress vs. Gateway API‚Äô debate? What makes Gateway API different? The Ingress Rut The purpose of this blog post Requirements Spin up a Kubernetes Cluster Install Calico with Operator Deploy a Demo Application Enable Calico Ingress Gateway Deploy Gateway API Resources Gateway HTTPRoute SSL Certificate and Automated Certification Process with Cert-Manager Gateway API integration ClusterIssuer Enabling HTTPS using Calico Ingress Gateway Force Redirect to HTTPS Clean up Conclusion If you‚Äôve managed traffic in Kubernetes, you‚Äôve likely navigated the world of Ingress controllers. For years, Ingress has been the standard way of getting our HTTP/S services exposed. But let‚Äôs be honest, it often felt like a compromise. We wrestled with controller-specific annotations to unlock critical features, blurred the lines between infrastructure and application concerns, and sometimes wished for richer protocol support or a more standardized approach. This ‚Äúpile of vendor annotations,‚Äù while functional, highlighted the limitations of a standard that struggled to keep pace with the complex demands of modern, multi-team environments and even led to security vulnerabilities. Yes, and it‚Äôs a crucial one. The Kubernetes Gateway API isn‚Äôt just an Ingress v2; it‚Äôs a fundamental redesign, the ‚Äúfuture‚Äù of Kubernetes ingress, built by the community to address these very challenges head-on. There are three main points that I came across while evaluating GatewayAPI and Ingress controllers: Standardization &amp;amp; Portability: It aims to provide a core, standard way to manage ingress, reducing reliance on vendor-specific hacks and making it easier to switch implementations ‚Äì change the class, and it should ‚Äújust work. ‚Äù Role-Based Architecture: Its biggest win is arguably the separation of concerns. Infrastructure teams can manage the Gateway (the entry point, TLS, ports), while application teams manage their HTTPRoutes (or TCPRoutes, etc. ), defining where their specific traffic should go.</description></item><item><title>Secure and Scalable Kubernetes for Multi-Cluster Management</title><link>https://kubermates.org/docs/2025-06-10-secure-and-scalable-kubernetes-for-multi-cluster-management/</link><pubDate>Tue, 10 Jun 2025 20:03:12 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-10-secure-and-scalable-kubernetes-for-multi-cluster-management/</guid><description>The Multi-Cluster Challenge: When Complexity Takes Over Calico‚Äôs Approach: Seamless Security, Streamlined Operations, and Crystal-Clear Visibility Enhanced Security Across the Board Intelligent Traffic Management: North/South and East/West Unified Observability: Seeing is Securing The Outcome: A Robust and Efficient Kubernetes Infrastructure This story is becoming more and more common in the Kubernetes world. What starts as a manageable cluster or two can quickly balloon into a sprawling, multi-cluster architecture spanning public clouds, private data centers, or a bit of both. And with that growth comes a whole new set of headaches. How do you keep tabs on compliance across wildly different configurations? When a service goes down across multiple clusters, how do you pinpoint the cause amidst the chaos? And what about those hard-to-diagnose latency issues that seem to crop up between regions? The truth is, achieving secure and scalable multi-cluster Kubernetes isn‚Äôt about throwing more tools at the problem. It‚Äôs about having the right tools and adopting the right best practices. This is where a solution like Calico Cluster Mesh shines, offering those essential capabilities for a seamless multi-cluster experience without the complexity or overhead that you expect with traditional service meshes. So, why are so many organizations finding themselves in this multi-cluster maze? Often, it‚Äôs driven by solid business reasons: High Availability and Disaster Recovery: Spreading workloads across multiple regions or clusters means that if one goes down, your users shouldn‚Äôt notice. Performance Optimization: Shifting compute resources to take advantage of lower pricing or bringing processing closer to the data at the edge can make a big difference. Regulatory and Compliance Requirements: Sometimes, data simply has to reside in specific geographies. Hybrid Cloud Strategies: The reality is, not everything can or should move to the cloud. A hybrid approach allows organizations to keep sensitive or legacy systems on-premises while still leveraging the flexibility and scalability of public cloud. While these motivations are sound, the challenges that emerge in these multi-cloud environments are remarkably consistent: Inter-cluster communication is a beast.</description></item><item><title>Is It Time to Migrate? A Practical Look at Kubernetes Ingress vs. Gateway API</title><link>https://kubermates.org/docs/2025-06-04-is-it-time-to-migrate-a-practical-look-at-kubernetes-ingress-vs-gateway-api/</link><pubDate>Wed, 04 Jun 2025 14:10:48 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-04-is-it-time-to-migrate-a-practical-look-at-kubernetes-ingress-vs-gateway-api/</guid><description>The Situation: The Ingress Rut Kubernetes Gateway API vs. Ingress: The Core Differences ü§î The Implication: Tied Hands and Increased Risk The Resolution: Gateway API Meets Calico The Outcome: Secure, Streamlined, and Standardized If you‚Äôve managed traffic in Kubernetes, you‚Äôve likely navigated the world of Ingress controllers. For years, Ingress has been the standard way of getting HTTP/S services exposed. But let‚Äôs be honest, it often felt like a compromise. We wrestled with controller-specific annotations to unlock critical features, blurred the lines between infrastructure and application concerns, this complexity didn‚Äôt just make portability more difficult, it sometimes led to security vulnerabilities and other complications. As part of Calico Open Source v3. 30 , we have released a free and open source Calico Ingress Gateway that implements a custom built Envoy proxy with the Kubernetes Gateway API standard to help you navigate Ingress complexities with style. This blog post is designed to get you up to speed on why such a change might be the missing link in your environment. The challenge with traditional Ingress wasn‚Äôt a lack of effort, since the landscape is full of innovative solutions. However, the problem was the lack of a unified, expressive, and role-aware standard. Existing ingress controllers were capable, implemented advanced features, however at the same time tied you to a specific project/vendor. This meant: Vendor Lock-In: Migrating from one ingress controller to another became a painful exercise in translating a web of custom annotations.</description></item><item><title>Why we need a unified approach to Kubernetes environments</title><link>https://kubermates.org/docs/2025-05-26-why-we-need-a-unified-approach-to-kubernetes-environments/</link><pubDate>Mon, 26 May 2025 16:46:48 +0000</pubDate><guid>https://kubermates.org/docs/2025-05-26-why-we-need-a-unified-approach-to-kubernetes-environments/</guid><description>Challenges Managing Multiple Technologies Deploying Holistic Solutions to Drive Better Outcomes Meeting the Demands of Modern Application Architectures Today, organizations struggle managing disparate technologies for their Kubernetes networking and network security needs. Leveraging multiple technologies for networking and security for in-cluster, ingress, egress, and traffic across clusters creates challenges, including operational complexities and increased costs. For example, to manage ingress traffic for Kubernetes clusters, users cobble together multiple solutions from different providers such as ingress controllers or gateways and load balancers for routing traffic, as well as Web Application Firewalls (WAFs) for enhanced security. Despite the challenges it brings, deploying disparate technologies has been a ‚Äúnecessary evil‚Äù for organizations to get all the capabilities needed for holistic Kubernetes networking. Here, we‚Äôll explore challenges this proliferation of tooling introduces, and provide actionable tips for today‚Äôs platform and security teams to overcome these issues. The fragmented approach to networking and network security in Kubernetes leads to challenges and inefficiencies, including: Operational overhead: Each technology comes with its own learning curve, setup, configuration, integration, and maintenance requirements. This leads to a challenging user experience. Increased costs: Licensing and operational costs accumulate as more tools are deployed. Scaling challenges: As clusters grow or spread across diverse environments, ensuring consistent and secure networking becomes harder. Security gaps: Disjointed solutions impair visibility and may create security gaps. Troubleshooting issues: Without a single pane of glass, troubleshooting and understanding latency issues across clusters is a common problem operators face. Take managing ingress traffic, and everything that goes with it.</description></item><item><title>What‚Äôs New in Calico: Spring 2025</title><link>https://kubermates.org/docs/2025-05-21-what-s-new-in-calico-spring-2025/</link><pubDate>Wed, 21 May 2025 21:52:07 +0000</pubDate><guid>https://kubermates.org/docs/2025-05-21-what-s-new-in-calico-spring-2025/</guid><description>Introducing Calico Cloud Free Tier Why Calico Cloud Free Tier? How Calico Cloud Free Tier Enhances Calico Open Source Improved Accuracy and Encryption for Commercial Editions Improved accuracy of Calico policy reporting in flow logs WireGuard: Provide support for encryption between federated endpoints and services in different clusters Summary Calico provides a unified platform for all your Kubernetes networking, network security, and observability requirements. From ingress/egress management and east-west policy enforcement to multi-cluster connectivity, Calico delivers comprehensive capabilities. It is distribution-agnostic, preventing vendor lock-in and offering a consistent experience across popular Kubernetes distributions and managed services. Calico eliminates silos, providing seamless networking and observability for containers, VMs, and bare metal servers, and extends effortlessly to multi-cluster environments, in the cloud, on-premises, and at the edge. With the recent release of Calico Open Source 3. 30 , we added: Improved observability to visualize and troubleshoot workload communication with Calico Whisker and the Goldmane API. Kubernetes Network Policies are critical for preventing ransomware, achieving microsegmentation to isolate sensitive assets for compliance, and thwarting attacks from malicious actors. However, implementing them effectively can be challenging due to the complexity of identifying, testing, and rapidly updating policies to meet evolving threats. Calico Open Source 3. 30 introduces staged policies to enable teams to audit and validate policies before they are enforced, reducing the risk of misconfigured policies and improving security and compliance. The ability to manage Kubernetes ingress traffic with Calico Ingress Gateway, a 100% upstream, enterprise-ready implementation of the Kubernetes Gateway API. And to expand on our robust Calico Open Source 3.</description></item><item><title>Recap: KubeCon + CloudNativeCon Europe 2025</title><link>https://kubermates.org/docs/2025-04-23-recap-kubecon-cloudnativecon-europe-2025/</link><pubDate>Wed, 23 Apr 2025 20:32:36 +0000</pubDate><guid>https://kubermates.org/docs/2025-04-23-recap-kubecon-cloudnativecon-europe-2025/</guid><description>CalicoCon 2025 What‚Äôs New in Calico v3. 30 Enhanced Observability with Whisker Migrating to nftables and Calico eBPF Calico APIs and Integration AMA with Calico Engineers Party with Calico Cool Cats KubeCon Impressions In Summary When I got the assignment to attend KubeCon 1st of April I thought it was an April prank, but as the date got closer I realized‚Äîthis is for real and I‚Äôll be on the ground in London at the tenth anniversary of cloud native computing. I‚Äôve seen a lot of tech events during my years in the industry while trying not to get replaced by AI and I have to say this one stands out! Image source: CNCF YouTube Channel Here is my recap of KubeCon + CloudNativeCon Europe 2025. CalicoCon is an event that happens twice every year, as a co-located event during KubeCon NA and EU. It‚Äôs a free event that allows you to learn about Tigera‚Äôs vision for the future of networking and security in the cloud. There‚Äôs also an after-party to celebrate our community and people like you who are on this journey with us! This year our main focus was on Calico v3. 30 , our upcoming release that will add a lot of anticipated features to Calico, unlocking things like observability, staged network policy, and gateway api. CalicoCon brought together cloud-native enthusiasts to explore the latest advancements in Calico and Kubernetes networking. The following is a brief summary of this year‚Äôs CalicoCon sessions. Note: The CalicoCon playlist with session recordings is now available on YouTube. Peter Kelly, VP of Engineering at Tigera, highlighted the new features in Calico v3. 30.</description></item><item><title>How to get started with Calico Observability features</title><link>https://kubermates.org/docs/2025-04-15-how-to-get-started-with-calico-observability-features/</link><pubDate>Tue, 15 Apr 2025 15:37:28 +0000</pubDate><guid>https://kubermates.org/docs/2025-04-15-how-to-get-started-with-calico-observability-features/</guid><description>The Need for a Zero Trust Model Simplifying Network Flow Visibility with Calico Whisker Using Calico Whisker to Secure the ANP Demo APP What if you missed something? Conclusion Kubernetes, by default, adopts a permissive networking model where all pods can freely communicate unless explicitly restricted using network policies. While this simplifies application deployment, it introduces significant security risks. Unrestricted network traffic allows workloads to interact with unauthorized destinations, increasing the potential for cyberattacks such as Remote Code Execution (RCE), DNS spoofing, and privilege escalation. To better understand these problems, let‚Äôs examine a sample Kubernetes application: ANP Demo App. This application comprises a deployment that spawns pods and a service that exposes them to external users in a similar situation like any real word workload which you will encounter in your environment. If you open the application service before implementing any policies, the application reports the following messages: Container can reach the Internet ‚Äì Without network policies, an attacker can use our container as an entry point by exploiting it with a vulnerability. This could allow them to exfiltrate data or establish remote control over the workload by leveraging its Internet access. Container can reach CoreDNS Pods ‚Äì Kubernetes relies heavily on DNS, with records served using CoreDNS Pods. While communication between your Pods and CoreDNS is essential and not inherently a vulnerability, pairing it with unrestricted access to external DNS servers creates a significant security risk such as cluster wide DNS poisoning from a vulnerable pod or a pod with access to NET_RAW capabilities. Container can reach external DNS servers ‚Äì Without restricting network policies, attackers can leverage techniques such as DNS poisoning, where they manipulate DNS responses to redirect traffic to malicious destinations. Container can reach the Kubernetes API Server ‚Äì Often overlooked but without network policies all workloads can access the host via local networking addresses, or host sockets. While some applications require these communications, unrestricted access can serve as an escalation entry point for attackers to exploit internal services which are not managed by Kubernetes (e.</description></item></channel></rss>