<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tigera on Kubermates</title><link>https://kubermates.org/tags/tigera/</link><description>Recent content in Tigera on Kubermates</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 15 Oct 2025 15:53:20 +0000</lastBuildDate><atom:link href="https://kubermates.org/tags/tigera/index.xml" rel="self" type="application/rss+xml"/><item><title>How NRP Scales Global Scientific Research with Calico</title><link>https://kubermates.org/docs/2025-10-15-how-nrp-scales-global-scientific-research-with-calico/</link><pubDate>Wed, 15 Oct 2025 15:53:20 +0000</pubDate><guid>https://kubermates.org/docs/2025-10-15-how-nrp-scales-global-scientific-research-with-calico/</guid><description>Challenges Complex Network Visibility and Debugging Balancing Performance with Granular Security at Scale Managing Advanced Heterogeneous Networking Solutions Enhanced Observability with Calico Telemetry Performant Network Policy Enforcement Flexible Kubernetes Networking Results Customer Perspective What’s Next The National Research Platform (NRP) operates a globally distributed, high-performance computing and networking environment, with an average of 15,000 pods across 450 nodes supporting more than 3,000 scientific project namespaces. With its head node in San Diego, NRP connects research institutions and data centers worldwide via links ranging from 10 to 400 Gbps, serving more than 5,000 users in 70+ locations. Non-profit company Uses Calico Open Source NRP is a partnership of more than 50 institutions, led by researchers at UC San Diego, University of Nebraska-Lincoln, and Massachusetts Green High Performance Computing Center and includes contributions by the National Science Foundation, the Department of Energy, the Department of Defense, and many research universities and R&amp;amp;E networking organizations in the US and around the world. NRP needed a way to diagnose connectivity problems across globally distributed storage nodes. Frequent changes to edge network configurations, ACLs, firewalls, and static routes caused blocked ports, forcing manual troubleshooting with tools such as nmap and iperf. This process slowed down root-cause analysis and problem resolution. Scientific workflows demanded maximum throughput over 100/400 Gbps links and jumbo frames. Traditional host firewalls introduced unacceptable performance penalties, preventing researchers from mounting data and forcing the team to disable them. NRP required a centralized, high-performance network security solution that could enforce fine-grained policies at scale without degrading throughput. NRP’s workflows relied on advanced capabilities such as Layer 2 paths over WAN using ESnet Sense and AutoGOLE, dual-stack IPv4/IPv6 support, and experiments with multipath BGP. They also needed integration with specialized hardware such as FPGAs and smartNICs for P4 packet processing. Managing this mix of protocols, services, and hardware required a flexible CNI that could support complex, multi-layer orchestration.</description></item><item><title>How to Deploy Whisker and Goldmane in Manifest Only Calico Setups</title><link>https://kubermates.org/docs/2025-10-08-how-to-deploy-whisker-and-goldmane-in-manifest-only-calico-setups/</link><pubDate>Wed, 08 Oct 2025 19:29:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-10-08-how-to-deploy-whisker-and-goldmane-in-manifest-only-calico-setups/</guid><description>Your Step-by-Step to Observability Without the Operator Why Whisker and Goldmane Matter Installing Whisker and Goldmane Manually Requirements Generating Certificates and Certificate Authority (CA) Tuning Typha to use certificates Fixing DNS Issues Deploying Goldmane Tuning Goldmane Deployment Deploying Whisker UI Observability Unlocked (and Why the Operator Helps) Final Thoughts For Calico users who install using manifests, enabling the new observability features Whisker and Goldmane from version 3.30 has been a challenge. While these tools offer powerful insights into Kubernetes network flows and policy decisions, previous documentation was only for users who deployed with the Tigera operator. The operator automates several advanced, security-focused steps required to safely deploy Goldmane, which is why manifest users have had a more difficult time. These steps are crucial for protecting sensitive information. We’ve heard from many of you in the Calico Slack community: you’re eager to try out Whisker and Goldmane but aren’t sure how to set them up without Helm or the operator. For anyone who’s up for a challenge, this blog post provides a step-by-step guide on how to get everything wired up the hard way. However, even if you already use the operator, keep reading! We’re going to pull back the curtain on the magic it performs behind the scenes. Understanding these mechanics will help you troubleshoot, customize, and better appreciate a managed approach, whether you’re an SRE, platform engineer, or a curious cluster admin. What you will achieve at the end of this blog: You will learn how to get up and running with Whisker and Goldmane in a manifest based installation. You will learn why a Helm chart or the Tigera operator is our recommendation to manage your Kubernetes workloads at scale. You will have some hands on experience on what to look for when things are deployed in a real life scenario. Without Goldmane and tools, you’re essentially flying blind and you: Can’t easily debug why traffic is dropped Can’t visualize how policies affect flows Can’t trace service-to-service communication paths This leads to increased time-to-resolution for network bugs, frustration from teams consuming the platform, limited audit capabilities for security teams For manifest-only users, the lack of clear installation steps means many miss out on these benefits and as a developer advocate.</description></item><item><title>SUSE and Tigera: Empowering Secure, Scalable Kubernetes with Calico Enterprise</title><link>https://kubermates.org/docs/2025-10-03-suse-and-tigera-empowering-secure-scalable-kubernetes-with-calico-enterprise/</link><pubDate>Fri, 03 Oct 2025 23:32:25 +0000</pubDate><guid>https://kubermates.org/docs/2025-10-03-suse-and-tigera-empowering-secure-scalable-kubernetes-with-calico-enterprise/</guid><description>Modern Workloads Demand Modern Kubernetes Infrastructure Comprehensive Security Without Compromise Resilience and Visibility at Scale Operational Simplicity for Platform Teams Open Source Roots, Enterprise Strength Choice Backed by Enterprise Support The Path Forward As organizations expand Kubernetes adoption—modernizing legacy applications on VMs and bare metal, running next-generation AI workloads, and deploying intelligence at the edge—the demand for infrastructure that is scalable, flexible, resilient, secure, and performant has never been greater. At the same time, compliance, consistent visibility, and efficient management without overburdening teams remain critical. The combination of Calico Enterprise from Tigera and SUSE Rancher Prime delivers a resilient and scalable platform that combines high-performance networking, robust network security, and operational simplicity in one stack. Calico Enterprise provides a unified platform for Kubernetes networking, security, and observability: eBPF-powered networking for high performance without sidecar overhead One platform for all Kubernetes traffic: ingress, egress, in-cluster, and multi-cluster Security for every workload type: containers, VMs, and bare metal Seamless scaling with built-in multi-cluster networking and security Zero-trust security with identity-aware policies and workload-based microsegmentation Integrated observability for policy enforcement and troubleshooting Compliance features that simplify audits (PCI-DSS, HIPAA, SOC 2, FedRAMP) Deployed with Rancher Prime, these capabilities extend directly into every cluster, enabling security-conscious industries such as finance, healthcare, and government to confidently run Kubernetes for any use case—from application modernization to AI and edge computing. Modern enterprises run Kubernetes across multiple clusters, regions, and clouds. Rancher Prime simplifies and unifies this landscape, while Calico Enterprise adds: Highly available and resilient networking designed for mission-critical applications Standardized networking and network security controls across multiple clusters, regions, and clouds Centralized network policy and compliance enforcement across all clusters Dynamic service discovery and adaptive network controls Rich observability, including real-time flow logs and network performance metrics This combination gives Site Reliability Engineering (SRE) and DevSecOps teams the visibility they need to prevent outages, detect threats faster, and reduce downtime — even in complex multi-cloud topologies. Rancher Prime acts as the single pane of glass for cluster lifecycle management, while Calico Enterprise integrates seamlessly to provide a single pane of glass for network security, observability and troubleshooting with minimal operational burden. Together, they deliver a frictionless experience for platform teams : unified deployment, automated policy propagation, and security guardrails baked into the platform — not bolted on after the fact. Both SUSE and Tigera are committed to open innovation and customer choice. Calico, the open-source foundation of Calico Enterprise, is trusted by thousands of organizations and runs on more than 100,000 clusters worldwide. Rancher Prime is fully open source as well, backed by enterprise SLAs and global support from SUSE. Enterprises can modernize their infrastructure without lock-in, accelerating time-to-value for developers while staying in control of security and compliance.</description></item><item><title>How to Connect Nested KubeVirt Clusters with Calico and BGP Peering</title><link>https://kubermates.org/docs/2025-10-03-how-to-connect-nested-kubevirt-clusters-with-calico-and-bgp-peering/</link><pubDate>Fri, 03 Oct 2025 18:28:12 +0000</pubDate><guid>https://kubermates.org/docs/2025-10-03-how-to-connect-nested-kubevirt-clusters-with-calico-and-bgp-peering/</guid><description>Why BGP Peering for Nested Clusters? Key Challenges When Peering With Nested Clusters Dynamic IPs vs. With KubeVirt , a virtualization add-on for Kubernetes that uses QEMU (an open-source machine emulator and virtualizer), you can run full-featured Kubernetes clusters as virtual machines (VMs) inside a parent Kubernetes cluster. This nested architecture makes it possible to unify containerized and virtualized workloads, and opens the door to new platform engineering use cases. But here’s the challenge: how can you ensure that these nested clusters, and the workloads within, can reach, and be reached by, your physical network and are treated the same way as any other cluster? That’s where Calico’s Advanced BGP (Border Gateway Protocol) peering with workloads comes into play. By enabling BGP route exchange between the parent cluster and nested KubeVirt VMs, Calico extends dynamic routing directly to virtualized workloads. This allows nested clusters to participate in the broader network topology and advertise their pod and service IPs just like any other node. Thus eliminating the need for tunnels or overlays to achieve true layer 3 connectivity. In this blog, we’ll walk through the big picture, prerequisites, and step-by-step configuration for setting up BGP peering between parent clusters and nested clusters running inside KubeVirt. Platform engineering teams today face a common challenge: delivering a platform that meets performance, security, and cost requirements—without forcing developers to decide where their applications should run. Whether the underlying platform is on-premises, in the cloud, or virtualized with KubeVirt, those choices should be taken care of automatically, without developer involvement. Developers should simply request a resource to run their applications, while the platform team ensures the correct resources are delivered on available platforms. Enabling BGP peering on nested KubeVirt clusters means they can be treated just like any other cluster, with no ‘special’ or snowflake-style configurations required simply because they are virtualized.</description></item><item><title>Kubernetes Observability: Your Q&amp;A Guide to Calico Whisker</title><link>https://kubermates.org/docs/2025-09-24-kubernetes-observability-your-q-a-guide-to-calico-whisker/</link><pubDate>Wed, 24 Sep 2025 20:45:51 +0000</pubDate><guid>https://kubermates.org/docs/2025-09-24-kubernetes-observability-your-q-a-guide-to-calico-whisker/</guid><description>Frequently Asked Questions From The Community Do you have more questions? The Calico community is here to help! Calico Whisker is quickly becoming the go-to tool for teams that want granular, real-time visibility into their Kubernetes network traffic and security posture. It provides an intuitive, high-level view of your network, but as with any new tool, there are going to be questions: How does it handle manifest-based installations versus operator-based ones? Can it leverage eBPF for high-performance data collection? What’s the best way to export its rich flow logs to your existing SIEM or visualize traffic on a network map? Getting the most out of Whisker requires understanding its inner workings and this guide is designed to help you master this exciting tool with support from the Calico community. We’ve compiled the most frequently asked questions from our community Slack , support conversations, and CalicoCon sessions. This Q&amp;amp;A covers everything from initial installation tips and version requirements to advanced topics like filtering flow logs and integrating with Goldmane, the powerful API that underpins Whisker. Whether you’re just beginning to evaluate Whisker or looking to extract more value from your current deployment, this guide provides clear, actionable answers to help you level up your Kubernetes observability game. Yes you can, noting that Calico Whisker requires Calico v3.30 or higher. If you’re running an older version, you’ll need to upgrade your cluster first. To check your Calico version, run the following command: kubectl exec -it -n tigera-operator deployment/tigera-operator &amp;ndash; operator &amp;ndash;version kubectl exec -it -n tigera-operator deployment/tigera-operator &amp;ndash; operator &amp;ndash;version If your version is older than v3.30, follow the upgrade guide or 📹 watch the video below for a demonstration of how to upgrade Calico on Kubernetes: Yes! While we recommend upgrading to the operator-based installation for a smoother experience and easier lifecycle management, you can still use Whisker with a manifest-based installation. Check out this detailed installation guide for enabling Whisker manually. Whisker and Goldmane contain sensitive network and workload data and are secured via NetworkPolicies by default. We strongly recommend against exposing this data externally. If you absolutely must expose it, you can create a new ingress NetworkPolicy to allow external traffic.</description></item><item><title>Calico Whisker vs. Traditional Observability: Why Context Matters in Kubernetes Networking</title><link>https://kubermates.org/docs/2025-09-16-calico-whisker-vs-traditional-observability-why-context-matters-in-kubernetes-ne/</link><pubDate>Tue, 16 Sep 2025 19:43:02 +0000</pubDate><guid>https://kubermates.org/docs/2025-09-16-calico-whisker-vs-traditional-observability-why-context-matters-in-kubernetes-ne/</guid><description>What is Calico Whisker? How Does It Work? What Makes Calico Whisker Different? Practical Examples: Calico Whisker in Action Scenario 1: Safely Rolling Out a New Network Policy Scenario 2: Uncovering Hidden Security Risks How to Get Started with Calico Whisker Are you tired of digging through cryptic logs to understand your Kubernetes network? In today’s fast-paced cloud environments, clear, real-time visibility isn’t a luxury, it’s a necessity. Traditional logging and metrics often fall short, leaving you without the context needed to troubleshoot effectively. That’s precisely what Calico Whisker’s recent launch (with Calico v3.30) aims to solve. This tool provides clarity where logs alone fall short. In the sections below, you’ll get a practical overview of how it works and how it fits into modern Kubernetes networking and security workflows. If you’re relying on logs for network observability, you’re not alone. While this approach can provide some insights, it’s often a manual, resource-intensive process that puts significant load on your distributed systems. It’s simply not a cloud-native solution for real-time insights. So are we doomed? No. Calico Whisker transforms network observability from a chore into a superpower. Calico Whisker is a free, lightweight, Kubernetes-native observability user interface (UI) created by Tigera and introduced with Calico Open Source v3.30. It’s designed to give you a simple yet powerful window into your cluster’s network traffic, helping you understand network flows and evaluate policy behavior in real-time.</description></item><item><title>Securing AI Workloads in Kubernetes: Why Traditional Network Security Isn’t Enough</title><link>https://kubermates.org/docs/2025-09-11-securing-ai-workloads-in-kubernetes-why-traditional-network-security-isn-t-enoug/</link><pubDate>Thu, 11 Sep 2025 19:21:53 +0000</pubDate><guid>https://kubermates.org/docs/2025-09-11-securing-ai-workloads-in-kubernetes-why-traditional-network-security-isn-t-enoug/</guid><description>AI Architectures Introduce New Attack Vectors The Multi-Cluster Problem The East-West Traffic Dilemma Egress Control Complexity Why Kubernetes Native Security Falls Short NetworkPolicy Limitations in AI Contexts Multi-Cluster Networking, Security and Observability gaps Insufficient Observability for AI Workloads How Does Calico Help Secure AI Workloads? Four Core Calico Capabilities for AI Workload Security Calico in Action: Example Use Cases The AI revolution is here, and it’s running on Kubernetes. From fraud detection systems to generative AI platforms, AI-powered applications are no longer experimental projects; they’re mission-critical infrastructure. But with great power comes great responsibility, and for Kubernetes platform teams, that means rethinking security. But this rapid adoption comes with a challenge: 13% of organizations have already reported breaches of AI models or applications , while another 8% don’t even know if they’ve been compromised. Even more concerning, 97% of breached organizations reported that they lacked proper AI access controls. To address this, we must recognize that AI architectures introduce entirely new attack vectors that traditional security models aren’t equipped to handle. AI workloads running in Kubernetes environments introduce a new set of security challenges. Traditional security models often fall short in addressing the unique complexities of AI pipelines, specifically related to The Multi-Cluster Problem, The East-West Traffic Dilemma , and Egress Control Complexity. Let’s explore each of these critical attack vectors in detail. Most enterprise AI deployments don’t run in a single cluster. Instead, they typically follow this pattern: Training Infrastructure (GPU-Heavy) Dedicated clusters with high-memory GPU nodes Batch job processing for model training and fine-tuning Access to large-scale data stores and feature engineering pipelines Often deployed in public cloud for elastic capacity Inference Infrastructure (Latency-Optimized) CPU or smaller GPU configurations optimized for low-latency responses Real-time prediction APIs with auto-scaling based on demand Often deployed on-premises or in edge locations for compliance and latency Integration with production application stacks Development and Experimentation Clusters Mixed workloads for data science experimentation Access to production data for model development Often less stringently controlled than production environments This multi-cluster architecture creates network policy enforcement gaps. A data scientist with legitimate permissions to the development cluster shouldn’t be able to access production model weights, but traditional Kubernetes security tools can’t enforce consistent policies across these distributed environments.</description></item><item><title>Navigating DORA with Calico: Strengthening Kubernetes Operational Resilience in Financial Services</title><link>https://kubermates.org/docs/2025-09-09-navigating-dora-with-calico-strengthening-kubernetes-operational-resilience-in-f/</link><pubDate>Tue, 09 Sep 2025 17:58:02 +0000</pubDate><guid>https://kubermates.org/docs/2025-09-09-navigating-dora-with-calico-strengthening-kubernetes-operational-resilience-in-f/</guid><description>The Challenge DORA Seeks to Solve What is DORA? Why DORA Matters for Kubernetes 5 Ways Calico Products Can Help with DORA Compliance Granular Network Microsegmentation and Policy Enforcement Comprehensive Network Observability Threat Detection and Mitigation Automated Compliance Reporting and Audit Trails Secure Multi-Cluster and Hybrid Cloud Operations Mapping DORA Requirements to Calico Capabilities Summary A single cyberattack or system outage can threaten not just one financial institution, but the stability of a vast portion of the entire financial sector. For today’s financial enterprises, securing dynamic infrastructure like Kubernetes is a core operational and regulatory challenge. The solution lies in achieving DORA compliance for Kubernetes, which transforms your cloud-native infrastructure into a resilient, compliant, and secure backbone for critical financial services. Before DORA (Digital Operational Resilience Act), rules for financial companies primarily focused on making sure they had enough financial capital to cover losses. But what if a cyberattack or tech failure brought a large part of the financial system down? Even with plenty of financial capital, a major outage could stop most operations and cause big problems for the whole financial market. DORA steps in to fix this. It’s all about making sure financial firms can withstand, respond to, and recover quickly from cyberattacks and other digital disruptions. The Digital Operational Resilience Act (DORA) is a European Union (EU) regulation that came into effect on January 17, 2025 and is designed to strengthen the security of financial entities. It establishes uniform requirements across the financial sector for managing Information and Communication Technology (ICT) risk, reporting major ICT-related incidents, conducting digital operational resilience testing, and overseeing ICT third-party risk. DORA applies to a broad range of financial entities, including banks, insurance companies, investment firms, payment service providers, and their ICT third-party service providers, ensuring a consolidated and robust approach to digital resilience across the European Union. Kubernetes is the standard for deploying and managing cloud-native containerized applications, offering unparalleled agility, scalability, and efficiency. However, this power comes bundled with complexity.</description></item><item><title>Calico Egress Gateway: A Cost-Effective NAT for Kubernetes</title><link>https://kubermates.org/docs/2025-09-04-calico-egress-gateway-a-cost-effective-nat-for-kubernetes/</link><pubDate>Thu, 04 Sep 2025 20:51:58 +0000</pubDate><guid>https://kubermates.org/docs/2025-09-04-calico-egress-gateway-a-cost-effective-nat-for-kubernetes/</guid><description>The Need for a Kubernetes NAT Gateway The Challenge With Cloud NAT Gateways Calico’s Built-in NAT for Kubernetes Egress How Calico Egress Gateway works as a NAT gateway – a simple example: Advantages of Calico Egress Gateway Used as a NAT Use Cases for Calico Egress Gateway and NAT Examples of Calico Egress Gateway in Action Preventing Data Exfiltration with Firewalls Enabling Trusted Access to Databases Behind a Firewall The Bottom Line When Kubernetes workloads need to connect to the outside world, whether to access external APIs, integrate with external systems, or connect to partner networks, they often face a unique challenge. The problem? Pod IP addresses inside Kubernetes clusters are dynamic and non-routable. For external systems to recognize and trust this traffic, workloads need a consistent, dependable identity. This means outbound connections require fixed, routable IP addresses that external services can rely on. This is where Network Address Translation (NAT) becomes essential. It assigns Kubernetes pods with a static, consistent IP for all outbound traffic, ensuring those connections work properly. If you’re running Kubernetes in the cloud, a common solution is to use your cloud provider’s managed NAT gateway service. These are easy to use, but they can come at a cost. In AWS, Azure, and Google Cloud, cloud-managed NAT gateways charge both an hourly fee and a per-gigabyte data processing fee. For high-traffic deployments, those charges can quickly add up, sometimes even exceeding your compute costs. The good news: with Calico, you can handle NAT from inside your Kubernetes cluster, avoiding cloud NAT gateway fees and giving you more control over how egress works. Managed NAT gateways from cloud providers are designed for convenience, but they come with a few limitations: Ongoing hourly charges – even if you’re not sending much traffic.</description></item><item><title>What’s New in Calico – Summer 2025</title><link>https://kubermates.org/docs/2025-08-25-what-s-new-in-calico-summer-2025/</link><pubDate>Mon, 25 Aug 2025 22:17:49 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-25-what-s-new-in-calico-summer-2025/</guid><description>Security at Scale with a Unified Platform Calico Ingress Gateway with Integrated WAF Granular Dashboard access with new RBAC and UI enhancements Simplified Operations for Kubernetes, VM, and bare metal workloads Policy Recommendations Now Available in Calico Cloud Free Tier Centralized log forwarding for VM and bare metal hosts Improved visualization of VM and bare metal hosts in Calico Service Graph Summary As Kubernetes adoption scales across enterprise architectures, platform architects face mounting pressure to implement consistent security guardrails across distributed, multi-cluster environments while maintaining operational velocity. Modern infrastructure demands a security architecture that can adapt without introducing complexity or performance penalties. Traditional approaches force architects to cobble together separate solutions for ingress protection, network policies, and application-layer security, creating operational friction and increasing attack surface. Today, we’re announcing significant enhancements to Calico that eliminate this architectural complexity. This release introduces native Web Application Firewall (WAF) capabilities integrated directly into Calico’s Ingress Gateway, enabling platform architects to deploy a single technology stack for both ingress management and HTTP-layer threat protection. Combined with enhanced Role-Based Access Controls (RBAC) controls, and centralized observability across heterogeneous workloads, platform architects can now design and implement comprehensive security all within a unified platform. The new features in this release can be grouped under two main categories: Security at Scale with a Unified Platform: This release introduces critical security features that make it easier to secure and scale Kubernetes workloads. Simplified Operations for Kubernetes, VM, and bare metal workloads: Reducing complexity is key to scaling Kubernetes, VM, and bare metal workloads, and this release introduces features that make security management more automated and scalable. Ingress traffic into a Kubernetes cluster is a common entry point for attacks, so it’s critical to inspect and proactively secure it. Since clusters often receive traffic directly from the public internet, analyzing application-layer protocols like HTTP and gRPC for threats is a fundamental security requirement. While there are options to deploy a standalone Web Application Firewall (WAF) with your ingress controller, using an integrated WAF simplifies operations and can reduce both complexity and cost. Calico Ingress Gateway , our implementation of the Kubernetes Gateway API, now includes a built-in WAF that allows you to inspect, authorize, and secure ingress traffic at runtime.</description></item><item><title>Calico at KubeCon + CloudNativeCon North America 2025!</title><link>https://kubermates.org/docs/2025-08-15-calico-at-kubecon-cloudnativecon-north-america-2025/</link><pubDate>Fri, 15 Aug 2025 13:34:02 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-15-calico-at-kubecon-cloudnativecon-north-america-2025/</guid><description>CalicoCon North America 2025 Happy Hour with Calico KubeCon + CloudNativeCon North America 2025 See you in Atlanta! Get ready, North America! The Calico team is thrilled to announce our participation in KubeCon + CloudNativeCon North America 2025, where we’ll be showcasing the latest advancements in Kubernetes networking, security, and observability. We’re excited to connect with the vibrant cloud-native community, share insights, and demonstrate how Calico Open Source continues to empower organizations worldwide. We have a packed agenda designed to offer you multiple ways to engage with our team and learn more about Calico. Mark your calendars for these exciting opportunities! Join us at CalicoCon North America 2025 , your go-to event for the latest in Kubernetes networking, security, and observability. Hosted by the Calico team, this hybrid event is your chance to hear directly from Calico engineers and leadership, get hands-on with new features, and take an in-depth look at the state of Project Calico. We’ll dive into Calico 3.30, Calico eBPF, and Calico Whisker: open source observability for Kubernetes. Add CalicoCon to your existing KubeCon + CloudNativeCon registration ‌to secure your spot. If you are not attending KubeCon + CloudNativeCon North America but would still like to attend CalicoCon, please reach out to us ‌on the Calico User Slack. Event Details Date : November 10, 2025 Time : 1:00pm to 5:00pm EST Location : Virtual | The Westin Peachtree Plaza Atlanta Register Now After a day of deep dives and technical discussions, unwind and network with other Calico users and the team at our exclusive Happy Hour with Calico ! This is a fantastic opportunity to relax, mingle with fellow Kubernetes enthusiasts, and connect with Calico engineers in a casual setting. Enjoy good food, drinks, and great company as we celebrate the cloud-native community. Event Details Date : November 10, 2025 Time : 5:00pm to 7:00pm EST Location : The Sun Dial Restaurant, Atlanta, GA Register Now Be sure to stop by booth #521 to discuss Calico’s latest Kubernetes network security and observability advancements. Our experts will be on hand to provide demos of Calico’s leading capabilities in Kubernetes network security and observability.</description></item><item><title>How 1&amp;1 Mail &amp; Media Scaled Kubernetes Networking with eBPF and Calico</title><link>https://kubermates.org/docs/2025-08-05-how-1-1-mail-media-scaled-kubernetes-networking-with-ebpf-and-calico/</link><pubDate>Tue, 05 Aug 2025 16:12:16 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-05-how-1-1-mail-media-scaled-kubernetes-networking-with-ebpf-and-calico/</guid><description>Challenge Solution Results What’s Next “We started in 2017 with Calico and never regretted it!” —Stephan Fudeus, Product Owner/Lead Architect, 1&amp;amp;1 Mail &amp;amp; Media 1&amp;amp;1 Mail &amp;amp; Media, part of the United Internet, powers popular European internet brands including GMX and Web. de, serving more than 50% of Germany’s population with critical identity and email infrastructure. With roughly 45 to 50 million users, network reliability is non-negotiable. Any downtime could affect millions. By 2022, the company had containerized 80% of its workloads on Kubernetes across three self-managed data centers. While the platform, backed by bare metal nodes and custom network layers, was highly scalable, network throughput bottlenecks began to emerge. Pods were limited to 2.5 Gbps of bandwidth due to IP encapsulation overhead, despite 10 Gbps network interfaces. The team needed a solution that: Improved pod-to-pod network performance Maintained strong network policy isolation across up to 40 tenants per cluster Scaled to millions of network connections and 1.4 million HTTP requests per second 1&amp;amp;1 Mail &amp;amp; Media had adopted Calico back in 2017, largely for its unique Kubernetes NetworkPolicy standard support. As their Kubernetes platform evolved, with clusters scaling to 300 bare metal nodes, 16,000 pods, and over 4 million conntrack entries, the team turned to Calico’s eBPF data plane to unlock performance gains. Following successful initial trials of eBPF in development and integration environments, the team moved forward with production migrations in 2023. While early versions of Calico on older Linux kernel versions presented some limitations, these challenges were quickly addressed with proactive collaboration between the Calico maintainers and the team. The Calico team introduced key improvements such as auto-scaling of connection tracking tables, which enhanced resilience under load.</description></item><item><title>Top 5 Kubernetes Network Issues You Can Catch Early with Calico Whisker</title><link>https://kubermates.org/docs/2025-07-29-top-5-kubernetes-network-issues-you-can-catch-early-with-calico-whisker/</link><pubDate>Tue, 29 Jul 2025 18:54:43 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-29-top-5-kubernetes-network-issues-you-can-catch-early-with-calico-whisker/</guid><description>&lt;ol&gt;
&lt;li&gt;Policy Misconfigurations 2. Misconfigured ServiceAccount Trust Boundaries 3. Asymmetric or One-Sided Flow Patterns 4. Traffic to “Private Network” Destinations Without Explicit Source Policies 5. Zombie Connections and Stale Pod Traffic 🧠 Bonus: Why Whisker Stands Apart from Traditional Logs 🧪 Ready to Try It? Kubernetes networking is deceptively simple on the surface, until it breaks, silently leaks data, or opens the door to a full-cluster compromise. As modern workloads become more distributed and ephemeral, traditional logging and metrics just can’t keep up with the complexity of cloud-native traffic flows. That’s where Calico Whisker comes in. Whisker is a lightweight Kubernetes-native observability tool created by Tigera. It offers deep insights into real-time traffic flow patterns, without requiring you to deploy heavyweight service meshes or packet sniffer. And here’s something you won’t get anywhere else: Whisker is data plane-agnostic. Whether you run Calico eBPF data plane, nftables, or iptables, you’ll get the same high-fidelity flow logs with consistent fields, format, and visibility.&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Kubernetes Is Powerful, But Not Secure (at least not by default)</title><link>https://kubermates.org/docs/2025-07-24-kubernetes-is-powerful-but-not-secure-at-least-not-by-default/</link><pubDate>Thu, 24 Jul 2025 19:38:47 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-24-kubernetes-is-powerful-but-not-secure-at-least-not-by-default/</guid><description>Why Is Microsegmentation So Hard? 🛡️Securing the Default Cluster Posture with Kubernetes Network Policy 🔐 What Makes Admin Network Policy (ANP) So Special? 🛡️Reach Even Further with Calico Network Policies 🧩 Delegating Policy Ownership with Kubernetes RBAC 🧪 Safely Testing and Troubleshooting Policies 👀 Calico Whisker: Observe Before You Act 🧪 Staged Network Policies: Test Without Breaking Things 🤖 Policy Recommendation Engine (Free with Calico Cloud Free Tier) 🗺️ Bonus: Visual Tools in Calico Cloud Free Tier Conclusion: Microsegmentation Doesn’t Have to Be a Nightmare Kubernetes has transformed how we deploy and manage applications. It gives us the ability to spin up a virtual data center in minutes, scaling infrastructure with ease. But with great power comes great complexities, and in the case of Kubernetes, that complexity is security. By default, Kubernetes permits all traffic between workloads in a cluster. This “allow by default” stance is convenient during development, and testing but it’s dangerous in production. It’s up to DevOps, DevSecOps, and cloud platform teams to lock things down. To improve the security posture of a Kubernetes cluster, we can use microsegmentation , a practice that limits each workload’s network reach so it can only talk to the specific resources it needs. This is an essential security method in today’s cloud-native environments. We all understand that network policies can achieve microsegmentation; or in other words, it can divide our Kubernetes network model into isolated pieces. This is important since Kubernetes is usually used to provide multiple teams with their infrastructural needs or host multiple workloads for different tenants. With that, you would think network policies are first citizens of clusters. However, when we dig into implementing them, three operational challenges make most practitioners reluctant about implementing policies.</description></item><item><title>Dry Run: Your Kubernetes network policies with Calico staged network policies</title><link>https://kubermates.org/docs/2025-07-15-dry-run-your-kubernetes-network-policies-with-calico-staged-network-policies/</link><pubDate>Tue, 15 Jul 2025 14:01:01 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-15-dry-run-your-kubernetes-network-policies-with-calico-staged-network-policies/</guid><description>Impact Resolution Let’s Set the Scene The Power of Staged Network Policies Where to Observe Staged Policies? Go Even Further With Calico Cloud Free Tier Outcome Kubernetes Network Policies (KNP) are powerful resources that help secure and isolate workloads in a cluster. By defining what traffic is allowed to and from specific pods, KNPs provide the foundation for zero-trust networking and least-privilege access in cloud-native environments. But there’s a problem: KNPs are risky, and applying them without a clear game plan can be potentially disruptive. Without deep insight into existing traffic flows, applying a restrictive policy can instantly break connectivity killing live workloads, user sessions, or critical app dependencies. An even scarier scenario is when we implement policies that we think cover everything and workloads actually work, but after a restart or scaling operation we hit new problems. Kubernetes, with all of its features, has no built-in “dry run” mode for policies, and no first-class observability to show what would be blocked or allowed which is the right decision since Kubernetes is an orchestrator not an implementer. This forces platform teams into a difficult choice, deploy permissive or no policies and weaken security, or Risk service disruption while debugging restrictive ones. As a result, many teams delay implementing network policies entirely only to regret it after a zero-day exploit like Log4Shell, XZ backdoor, or other vulnerabilities that can impact production. The fear of breaking something becomes the top reason why Kubernetes environments go unsegmented. You can’t enforce what you can’t test safely. For instance, let’s say you want to secure a workload deployed by another team. You don’t control how it was configured.</description></item><item><title>Calico Whisker &amp; Staged Network Policies: Secure Kubernetes Workloads Without Downtime</title><link>https://kubermates.org/docs/2025-07-07-calico-whisker-staged-network-policies-secure-kubernetes-workloads-without-downt/</link><pubDate>Mon, 07 Jul 2025 20:00:17 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-07-calico-whisker-staged-network-policies-secure-kubernetes-workloads-without-downt/</guid><description>Deploying a Kubernetes Cluster Deploying the yaobank Application Installing Calico for Policy Connect to Whisker UI Deploy Staged Network Policy Summary Rolling out network policies in a live Kubernetes cluster can feel like swapping wings mid-flight—one typo or overly broad rule and critical traffic is grounded. Calico’s Staged Network Policies remove the turbulence by letting you deploy policies in staged mode, so you can observe their impact before enforcing anything. Add Whisker , the open-source policy enforcement and testing tool (introduced as part of Calico Open Source 3.30 ) that captures every flow and tags it with a policy verdict, and you’ve got a safety harness that proves your change is sound long before you flip the switch. In this post, we’ll walk you through how you can leverage these capabilities to tighten security, validate intent, and ship changes confidently—without a single packet of downtime. Calico for Policy is a CNI agnostic tool. Refer to the Calico Open Source docs for a list of supported CNIs. The git repository for this blog post can be found here. For this post, let’s deploy a simple AKS cluster with Azure CNI. ## Configure az group create &amp;ndash;name calicooss &amp;ndash;location eastus2 ## Create a 3 node AKS cluster with Azure CNI az aks create &amp;ndash;resource-group calicooss &amp;ndash;name calico-whisker &amp;ndash;node-count 3 &amp;ndash;network-plugin azure &amp;ndash;kubernetes-version 1.31.8 ## Retrieve the kubeconfig file az aks get-credentials &amp;ndash;resource-group calicooss &amp;ndash;name calico-whisker Now that our cluster is deployed. Let’s provision a demo application. yaobank For this post, we will deploy a three-tier web application called “yet-another-bank” (yaobank). The manifest for the application can be found at this link.</description></item><item><title>A Detailed Look at Calico Cloud Free Tier</title><link>https://kubermates.org/docs/2025-07-02-a-detailed-look-at-calico-cloud-free-tier/</link><pubDate>Wed, 02 Jul 2025 20:23:35 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-02-a-detailed-look-at-calico-cloud-free-tier/</guid><description>Why Calico Cloud Free Tier? What is Calico Cloud Free Tier? Enhanced Observability Simplified Microsegmentation Intuitive Dashboards Intelligent Policy Recommendations Seamless Path to Calico Cloud Free Tier How Calico Cloud Free Tier Enhances Calico Open Source Conclusion As Kubernetes environments grow in scale and complexity, platform teams face increasing pressure to secure workloads without slowing down application delivery. But managing and enforcing network policies in Kubernetes is notoriously difficult—especially when visibility into pod-to-pod communication is limited or nonexistent. Teams are often forced to rely on manual traffic inspection, standalone logs, or trial-and-error policy changes, increasing the risk of misconfiguration and service disruption. Safe policy management and microsegmentation becomes a daunting task without clear knowledge or insight into which services should communicate with each other. In this detailed look, we’ll explore how Calico Cloud Free Tier builds upon Calico Open Source , and helps platform teams visualize traffic with a dynamic service graph, simplifies policy management, and even analyzes actual traffic to recommend policies. Calico Cloud Free Tier is a managed SaaS, no-cost offering that extends the capabilities of Calico Open Source 3.30 and higher to help Kubernetes teams improve network visibility, simplify policy management, and improve security by simplifying microsegmentation. Designed for single-cluster environments, it provides platform engineers and operators with powerful observability and policy management tools. With a seamless onboarding experience for users already running Calico Open Source 3.30 or higher, Calico Cloud Free Tier empowers teams to take control of their Kubernetes traffic—without additional cost or vendor lock-in. Let’s take a closer look at the key features that make Calico Cloud Free Tier a powerful solution for Kubernetes network security and observability: Calico’s primary observability solution is Dynamic Service Graph , a powerful visualization tool that maps real-time pod-to-pod communication across your cluster. This Service Graph, which is available in Calico Cloud Free Tier, gives you an immediate understanding of how workloads interact, making it far easier to identify unexpected traffic patterns or missing connections. Need to troubleshoot a failed service call? Simply drill down into the graph to access real-time flow logs with detailed packet and policy metadata. This eliminates the guesswork from debugging and speeds up root-cause analysis dramatically.</description></item><item><title>Switching to eBPF One Step at a Time with Calico DNS Inline Policy</title><link>https://kubermates.org/docs/2025-06-25-switching-to-ebpf-one-step-at-a-time-with-calico-dns-inline-policy/</link><pubDate>Wed, 25 Jun 2025 16:05:49 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-25-switching-to-ebpf-one-step-at-a-time-with-calico-dns-inline-policy/</guid><description>Calico iptables – DNS Inline policy The outcome NFTABLES Conclusion Calico Enterprise lets users write network policies using domain names instead of IP addresses. This is done by dynamically mapping domain names to IP addresses and matching the egress traffic against these IPs. We have discussed this feature in detail when we introduced the Inline mode for the eBPF data plane in Calico Enterprise 3.20 release! It addresses the latency and performance issues of the various modes used by Calico in iptables/nftables data planes. It is a shame that Calico users who are not yet ready to switch completely to eBPF would miss out on this big DNS policy improvement. Don’t worry! We found a way to port it to iptables to enhance our users’ experience without forcing users to make a huge leap. In Calico Enterprise v3.21, we have extended the Inline DNS policy mode to iptables. In this mode, DNS policies are updated in real time as DNS responses are parsed by eBPF within the data plane, thus improving the performance. In all the existing modes in the iptables data plane, the DNS response packets are sent to Felix – Calico’s userspace agent. It parses the packets and updates the data plane since advanced packet parsing is not feasible with standard iptables rules. However, iptables has an xt_bpf extension which lets us process and match the packets by an eBPF program the same way we do that in the eBPF data plane! xt_bpf An iptables rule that allows it may look something like this: iptables -A INPUT -m bpf –object-pinned /sys/fs/bpf/dns_parser -j ACCEPT The iptables rule calls the eBPF DNS parser program on the response packet and updates the data plane inline. When the client connects for the first time, the policy is enforced without any delays, thus avoiding any retransmits or any impact on application performance. The parser program is the exact same as in the case of the eBPF data plane and is called in the exact spot in which the packets were formerly sent to userspace.</description></item><item><title>Securing Kubernetes Traffic with Calico Ingress Gateway</title><link>https://kubermates.org/docs/2025-06-17-securing-kubernetes-traffic-with-calico-ingress-gateway/</link><pubDate>Tue, 17 Jun 2025 16:26:04 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-17-securing-kubernetes-traffic-with-calico-ingress-gateway/</guid><description>Wait a second, is this the ‘Ingress vs. Gateway API’ debate? What makes Gateway API different? The Ingress Rut The purpose of this blog post Requirements Spin up a Kubernetes Cluster Install Calico with Operator Deploy a Demo Application Enable Calico Ingress Gateway Deploy Gateway API Resources Gateway HTTPRoute SSL Certificate and Automated Certification Process with Cert-Manager Gateway API integration ClusterIssuer Enabling HTTPS using Calico Ingress Gateway Force Redirect to HTTPS Clean up Conclusion If you’ve managed traffic in Kubernetes, you’ve likely navigated the world of Ingress controllers. For years, Ingress has been the standard way of getting our HTTP/S services exposed. But let’s be honest, it often felt like a compromise. We wrestled with controller-specific annotations to unlock critical features, blurred the lines between infrastructure and application concerns, and sometimes wished for richer protocol support or a more standardized approach. This “pile of vendor annotations,” while functional, highlighted the limitations of a standard that struggled to keep pace with the complex demands of modern, multi-team environments and even led to security vulnerabilities. Yes, and it’s a crucial one. The Kubernetes Gateway API isn’t just an Ingress v2; it’s a fundamental redesign, the “future” of Kubernetes ingress, built by the community to address these very challenges head-on. There are three main points that I came across while evaluating GatewayAPI and Ingress controllers: Standardization &amp;amp; Portability: It aims to provide a core, standard way to manage ingress, reducing reliance on vendor-specific hacks and making it easier to switch implementations – change the class, and it should “just work. ” Role-Based Architecture: Its biggest win is arguably the separation of concerns. Infrastructure teams can manage the Gateway (the entry point, TLS, ports), while application teams manage their HTTPRoutes (or TCPRoutes, etc. ), defining where their specific traffic should go.</description></item><item><title>Secure and Scalable Kubernetes for Multi-Cluster Management</title><link>https://kubermates.org/docs/2025-06-10-secure-and-scalable-kubernetes-for-multi-cluster-management/</link><pubDate>Tue, 10 Jun 2025 20:03:12 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-10-secure-and-scalable-kubernetes-for-multi-cluster-management/</guid><description>The Multi-Cluster Challenge: When Complexity Takes Over Calico’s Approach: Seamless Security, Streamlined Operations, and Crystal-Clear Visibility Enhanced Security Across the Board Intelligent Traffic Management: North/South and East/West Unified Observability: Seeing is Securing The Outcome: A Robust and Efficient Kubernetes Infrastructure This story is becoming more and more common in the Kubernetes world. What starts as a manageable cluster or two can quickly balloon into a sprawling, multi-cluster architecture spanning public clouds, private data centers, or a bit of both. And with that growth comes a whole new set of headaches. How do you keep tabs on compliance across wildly different configurations? When a service goes down across multiple clusters, how do you pinpoint the cause amidst the chaos? And what about those hard-to-diagnose latency issues that seem to crop up between regions? The truth is, achieving secure and scalable multi-cluster Kubernetes isn’t about throwing more tools at the problem. It’s about having the right tools and adopting the right best practices. This is where a solution like Calico Cluster Mesh shines, offering those essential capabilities for a seamless multi-cluster experience without the complexity or overhead that you expect with traditional service meshes. So, why are so many organizations finding themselves in this multi-cluster maze? Often, it’s driven by solid business reasons: High Availability and Disaster Recovery: Spreading workloads across multiple regions or clusters means that if one goes down, your users shouldn’t notice. Performance Optimization: Shifting compute resources to take advantage of lower pricing or bringing processing closer to the data at the edge can make a big difference. Regulatory and Compliance Requirements: Sometimes, data simply has to reside in specific geographies. Hybrid Cloud Strategies: The reality is, not everything can or should move to the cloud. A hybrid approach allows organizations to keep sensitive or legacy systems on-premises while still leveraging the flexibility and scalability of public cloud. While these motivations are sound, the challenges that emerge in these multi-cloud environments are remarkably consistent: Inter-cluster communication is a beast.</description></item><item><title>Is It Time to Migrate? A Practical Look at Kubernetes Ingress vs. Gateway API</title><link>https://kubermates.org/docs/2025-06-04-is-it-time-to-migrate-a-practical-look-at-kubernetes-ingress-vs-gateway-api/</link><pubDate>Wed, 04 Jun 2025 14:10:48 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-04-is-it-time-to-migrate-a-practical-look-at-kubernetes-ingress-vs-gateway-api/</guid><description>The Situation: The Ingress Rut Kubernetes Gateway API vs. Ingress: The Core Differences 🤔 The Implication: Tied Hands and Increased Risk The Resolution: Gateway API Meets Calico The Outcome: Secure, Streamlined, and Standardized If you’ve managed traffic in Kubernetes, you’ve likely navigated the world of Ingress controllers. For years, Ingress has been the standard way of getting HTTP/S services exposed. But let’s be honest, it often felt like a compromise. We wrestled with controller-specific annotations to unlock critical features, blurred the lines between infrastructure and application concerns, this complexity didn’t just make portability more difficult, it sometimes led to security vulnerabilities and other complications. As part of Calico Open Source v3.30 , we have released a free and open source Calico Ingress Gateway that implements a custom built Envoy proxy with the Kubernetes Gateway API standard to help you navigate Ingress complexities with style. This blog post is designed to get you up to speed on why such a change might be the missing link in your environment. The challenge with traditional Ingress wasn’t a lack of effort, since the landscape is full of innovative solutions. However, the problem was the lack of a unified, expressive, and role-aware standard. Existing ingress controllers were capable, implemented advanced features, however at the same time tied you to a specific project/vendor. This meant: Vendor Lock-In: Migrating from one ingress controller to another became a painful exercise in translating a web of custom annotations. Configurations were tied to the implementation, not the intent.</description></item><item><title>Why we need a unified approach to Kubernetes environments</title><link>https://kubermates.org/docs/2025-05-26-why-we-need-a-unified-approach-to-kubernetes-environments/</link><pubDate>Mon, 26 May 2025 16:46:48 +0000</pubDate><guid>https://kubermates.org/docs/2025-05-26-why-we-need-a-unified-approach-to-kubernetes-environments/</guid><description>Challenges Managing Multiple Technologies Deploying Holistic Solutions to Drive Better Outcomes Meeting the Demands of Modern Application Architectures Today, organizations struggle managing disparate technologies for their Kubernetes networking and network security needs. Leveraging multiple technologies for networking and security for in-cluster, ingress, egress, and traffic across clusters creates challenges, including operational complexities and increased costs. For example, to manage ingress traffic for Kubernetes clusters, users cobble together multiple solutions from different providers such as ingress controllers or gateways and load balancers for routing traffic, as well as Web Application Firewalls (WAFs) for enhanced security. Despite the challenges it brings, deploying disparate technologies has been a “necessary evil” for organizations to get all the capabilities needed for holistic Kubernetes networking. Here, we’ll explore challenges this proliferation of tooling introduces, and provide actionable tips for today’s platform and security teams to overcome these issues. The fragmented approach to networking and network security in Kubernetes leads to challenges and inefficiencies, including: Operational overhead: Each technology comes with its own learning curve, setup, configuration, integration, and maintenance requirements. This leads to a challenging user experience. Increased costs: Licensing and operational costs accumulate as more tools are deployed. Scaling challenges: As clusters grow or spread across diverse environments, ensuring consistent and secure networking becomes harder. Security gaps: Disjointed solutions impair visibility and may create security gaps. Troubleshooting issues: Without a single pane of glass, troubleshooting and understanding latency issues across clusters is a common problem operators face. Take managing ingress traffic, and everything that goes with it.</description></item><item><title>What’s New in Calico: Spring 2025</title><link>https://kubermates.org/docs/2025-05-21-what-s-new-in-calico-spring-2025/</link><pubDate>Wed, 21 May 2025 21:52:07 +0000</pubDate><guid>https://kubermates.org/docs/2025-05-21-what-s-new-in-calico-spring-2025/</guid><description>Introducing Calico Cloud Free Tier Why Calico Cloud Free Tier? How Calico Cloud Free Tier Enhances Calico Open Source Improved Accuracy and Encryption for Commercial Editions Improved accuracy of Calico policy reporting in flow logs WireGuard: Provide support for encryption between federated endpoints and services in different clusters Summary Calico provides a unified platform for all your Kubernetes networking, network security, and observability requirements. From ingress/egress management and east-west policy enforcement to multi-cluster connectivity, Calico delivers comprehensive capabilities. It is distribution-agnostic, preventing vendor lock-in and offering a consistent experience across popular Kubernetes distributions and managed services. Calico eliminates silos, providing seamless networking and observability for containers, VMs, and bare metal servers, and extends effortlessly to multi-cluster environments, in the cloud, on-premises, and at the edge. With the recent release of Calico Open Source 3.30 , we added: Improved observability to visualize and troubleshoot workload communication with Calico Whisker and the Goldmane API. Kubernetes Network Policies are critical for preventing ransomware, achieving microsegmentation to isolate sensitive assets for compliance, and thwarting attacks from malicious actors. However, implementing them effectively can be challenging due to the complexity of identifying, testing, and rapidly updating policies to meet evolving threats. Calico Open Source 3.30 introduces staged policies to enable teams to audit and validate policies before they are enforced, reducing the risk of misconfigured policies and improving security and compliance. The ability to manage Kubernetes ingress traffic with Calico Ingress Gateway, a 100% upstream, enterprise-ready implementation of the Kubernetes Gateway API. And to expand on our robust Calico Open Source 3.30 offering, we’re excited to introduce Calico Cloud Free Tier. This new product edition further expands our open source offerings by providing enhanced observability and policy management capabilities to help visualize and troubleshoot workload communication, and simplify network security enforcement and microsegmentation. Already using Calico Open Source 3.30 or higher? Get started in less than five minutes.</description></item><item><title>Recap: KubeCon + CloudNativeCon Europe 2025</title><link>https://kubermates.org/docs/2025-04-23-recap-kubecon-cloudnativecon-europe-2025/</link><pubDate>Wed, 23 Apr 2025 20:32:36 +0000</pubDate><guid>https://kubermates.org/docs/2025-04-23-recap-kubecon-cloudnativecon-europe-2025/</guid><description>CalicoCon 2025 What’s New in Calico v3.30 Enhanced Observability with Whisker Migrating to nftables and Calico eBPF Calico APIs and Integration AMA with Calico Engineers Party with Calico Cool Cats KubeCon Impressions In Summary When I got the assignment to attend KubeCon 1st of April I thought it was an April prank, but as the date got closer I realized—this is for real and I’ll be on the ground in London at the tenth anniversary of cloud native computing. I’ve seen a lot of tech events during my years in the industry while trying not to get replaced by AI and I have to say this one stands out! Image source: CNCF YouTube Channel Here is my recap of KubeCon + CloudNativeCon Europe 2025. CalicoCon is an event that happens twice every year, as a co-located event during KubeCon NA and EU. It’s a free event that allows you to learn about Tigera’s vision for the future of networking and security in the cloud. There’s also an after-party to celebrate our community and people like you who are on this journey with us! This year our main focus was on Calico v3.30 , our upcoming release that will add a lot of anticipated features to Calico, unlocking things like observability, staged network policy, and gateway api. CalicoCon brought together cloud-native enthusiasts to explore the latest advancements in Calico and Kubernetes networking. The following is a brief summary of this year’s CalicoCon sessions. Note: The CalicoCon playlist with session recordings is now available on YouTube. Peter Kelly, VP of Engineering at Tigera, highlighted the new features in Calico v3.30. A key focus was on the new observability features, including the “Whisker” dashboard, designed to provide deeper insights into network behavior. Reza, our developer advocate at TIgera, led a session dedicated to the new observability features in Calico Open Source v3.30, centered around the Whisker dashboard. The session emphasized the importance of network observability in dynamic Kubernetes environments and included a hands-on demo.</description></item><item><title>How to get started with Calico Observability features</title><link>https://kubermates.org/docs/2025-04-15-how-to-get-started-with-calico-observability-features/</link><pubDate>Tue, 15 Apr 2025 15:37:28 +0000</pubDate><guid>https://kubermates.org/docs/2025-04-15-how-to-get-started-with-calico-observability-features/</guid><description>The Need for a Zero Trust Model Simplifying Network Flow Visibility with Calico Whisker Using Calico Whisker to Secure the ANP Demo APP What if you missed something? Conclusion Kubernetes, by default, adopts a permissive networking model where all pods can freely communicate unless explicitly restricted using network policies. While this simplifies application deployment, it introduces significant security risks. Unrestricted network traffic allows workloads to interact with unauthorized destinations, increasing the potential for cyberattacks such as Remote Code Execution (RCE), DNS spoofing, and privilege escalation. To better understand these problems, let’s examine a sample Kubernetes application: ANP Demo App. This application comprises a deployment that spawns pods and a service that exposes them to external users in a similar situation like any real word workload which you will encounter in your environment. If you open the application service before implementing any policies, the application reports the following messages: Container can reach the Internet – Without network policies, an attacker can use our container as an entry point by exploiting it with a vulnerability. This could allow them to exfiltrate data or establish remote control over the workload by leveraging its Internet access. Container can reach CoreDNS Pods – Kubernetes relies heavily on DNS, with records served using CoreDNS Pods. While communication between your Pods and CoreDNS is essential and not inherently a vulnerability, pairing it with unrestricted access to external DNS servers creates a significant security risk such as cluster wide DNS poisoning from a vulnerable pod or a pod with access to NET_RAW capabilities. Container can reach external DNS servers – Without restricting network policies, attackers can leverage techniques such as DNS poisoning, where they manipulate DNS responses to redirect traffic to malicious destinations. Container can reach the Kubernetes API Server – Often overlooked but without network policies all workloads can access the host via local networking addresses, or host sockets. While some applications require these communications, unrestricted access can serve as an escalation entry point for attackers to exploit internal services which are not managed by Kubernetes (e.</description></item></channel></rss>