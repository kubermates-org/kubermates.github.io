<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Finops on Kubermates</title><link>https://kubermates.org/tags/finops/</link><description>Recent content in Finops on Kubermates</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Fri, 20 Sep 2024 06:50:50 +0000</lastBuildDate><atom:link href="https://kubermates.org/tags/finops/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding AKS NAP: Azure Kubernetes Service Node Auto-Provisioning (Powered by Karpenter) ðŸš€</title><link>https://kubermates.org/blog/understanding-aks-nap-azure-kubernetes-service-node-auto-provisioning-powered-by-karpenter-3djh/</link><pubDate>Fri, 20 Sep 2024 06:50:50 +0000</pubDate><guid>https://kubermates.org/blog/understanding-aks-nap-azure-kubernetes-service-node-auto-provisioning-powered-by-karpenter-3djh/</guid><description>&lt;p&gt;As more organizations embrace cloud-native technologies like &lt;strong&gt;Kubernetes&lt;/strong&gt;, keeping your infrastructure lean and scalable is key to success. Thankfully, Azure Kubernetes Service (AKS) offers a powerful featureâ€”&lt;strong&gt;Node Auto-Provisioning (NAP)&lt;/strong&gt;. NAP is powered by &lt;strong&gt;Karpenter&lt;/strong&gt;, a Kubernetes-native tool, and allows automatic node provisioning based on demand, ensuring that your clusterâ€™s resources are always just right. In this article, weâ€™ll explore how AKS NAP works, how it&amp;rsquo;s powered by &lt;strong&gt;Karpenter&lt;/strong&gt;, and why it can make your life a lot easier! ðŸŒŸ&lt;/p&gt;</description></item><item><title>Monitor and Optimize Multi-Cluster AKS Costs ðŸ’°</title><link>https://kubermates.org/blog/monitor-and-optimize-multi-cluster-aks-costs-4627/</link><pubDate>Thu, 12 Sep 2024 07:42:06 +0000</pubDate><guid>https://kubermates.org/blog/monitor-and-optimize-multi-cluster-aks-costs-4627/</guid><description>&lt;p&gt;As businesses scale their Kubernetes workloads across multiple Azure Kubernetes Service (AKS) clusters, managing and optimizing cloud costs becomes critical. Deploying and managing observability tools such as KubeCost and OpenTelemetry (OTel) across multiple clusters can be simplified using &lt;a href="https://github.com/Azure/fleet/blob/main/docs/concepts/README.md"&gt;AKS Fleet Manager&lt;/a&gt;, Microsoft Managed Prometheus, and Grafana.&lt;/p&gt;
&lt;p&gt;This guide will explain how to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Deploy &lt;strong&gt;KubeCost&lt;/strong&gt; and &lt;strong&gt;OpenTelemetry&lt;/strong&gt; across multiple AKS clusters using &lt;strong&gt;AKS Fleet Manager&lt;/strong&gt;.&lt;/li&gt;
&lt;li&gt;Expose metrics through OpenTelemetry.&lt;/li&gt;
&lt;li&gt;Centralize monitoring via &lt;strong&gt;Managed Prometheus&lt;/strong&gt; and &lt;strong&gt;Grafana&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Youâ€™ll gain a single-pane-of-glass view into your multi-cluster environment, enabling more efficient resource utilization and cost management.&lt;/p&gt;</description></item><item><title>Essential Tips for Setting Resource Limits in Kubernetes ðŸ“ˆ</title><link>https://kubermates.org/blog/essential-tips-for-setting-resource-limits-in-kubernetes-3b54/</link><pubDate>Mon, 19 Aug 2024 07:31:56 +0000</pubDate><guid>https://kubermates.org/blog/essential-tips-for-setting-resource-limits-in-kubernetes-3b54/</guid><description>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Kubernetes is like the ultimate conductor ðŸŽ¶ in an orchestra, ensuring that all your applications (the musicians) play in harmony without hogging too many resources (the instruments). But if you don&amp;rsquo;t set the right limits, things can get out of tune quickly! ðŸŽ» Setting the right resource limitations in Kubernetes helps keep everything running smoothly, preventing any one application from using too much CPU or memory and leaving the rest high and dry.&lt;/p&gt;</description></item></channel></rss>