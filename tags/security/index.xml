<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Security on Kubermates</title><link>https://kubermates.org/tags/security/</link><description>Recent content in Security on Kubermates</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 26 Feb 2025 14:44:59 +0000</lastBuildDate><atom:link href="https://kubermates.org/tags/security/index.xml" rel="self" type="application/rss+xml"/><item><title>🔐 Secure Secret Management with SOPS in Terraform &amp; Terragrunt</title><link>https://kubermates.org/blog/secure-secret-management-with-sops-in-terraform-terragrunt-231a/</link><pubDate>Wed, 26 Feb 2025 14:44:59 +0000</pubDate><guid>https://kubermates.org/blog/secure-secret-management-with-sops-in-terraform-terragrunt-231a/</guid><description>&lt;p&gt;When managing infrastructure as code (IaC), keeping secrets &lt;strong&gt;safe&lt;/strong&gt; while still making them accessible to Terraform/Terragrunt is a challenge. Storing secrets in plaintext is a &lt;strong&gt;security risk&lt;/strong&gt; 🚨—and that’s where &lt;strong&gt;SOPS&lt;/strong&gt; (Secrets OPerationS) comes in!&lt;/p&gt;
&lt;p&gt;In this guide, we’ll cover:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;✅ How to use &lt;strong&gt;SOPS&lt;/strong&gt; with &lt;strong&gt;age&lt;/strong&gt; and &lt;strong&gt;GPG&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;✅ How to configure &lt;strong&gt;SOPS with &lt;code&gt;sops.yaml&lt;/code&gt;&lt;/strong&gt; for better management&lt;/li&gt;
&lt;li&gt;✅ How to use &lt;strong&gt;Terragrunt’s built-in SOPS decryption&lt;/strong&gt; (without &lt;code&gt;run_cmd&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;✅ A &lt;strong&gt;GitHub Actions workflow&lt;/strong&gt; to securely use secrets in CI/CD&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="-why-use-sops"&gt;📌 Why Use SOPS?&lt;/h2&gt;
&lt;p&gt;SOPS is an open-source tool from Mozilla that lets you &lt;strong&gt;encrypt and decrypt&lt;/strong&gt; secrets easily. It supports multiple encryption methods, including &lt;strong&gt;GPG&lt;/strong&gt;, &lt;strong&gt;AWS KMS&lt;/strong&gt;, &lt;strong&gt;Azure Key Vault&lt;/strong&gt;, &lt;strong&gt;Google Cloud KMS&lt;/strong&gt;, and &lt;strong&gt;age&lt;/strong&gt;.&lt;/p&gt;</description></item><item><title>Admission Controllers in Kubernetes: OPA GateKeeper, Kyverno, and Azure Policy Add-on for AKS—Which One Wins? 🏆</title><link>https://kubermates.org/blog/admission-controllers-in-kubernetes-opa-gatekeeper-kyverno-and-azure-policy-add-on-for-aks-which-one-wins-237d/</link><pubDate>Tue, 17 Sep 2024 07:25:52 +0000</pubDate><guid>https://kubermates.org/blog/admission-controllers-in-kubernetes-opa-gatekeeper-kyverno-and-azure-policy-add-on-for-aks-which-one-wins-237d/</guid><description>&lt;p&gt;When managing a Kubernetes cluster, controlling what gets deployed and ensuring resources comply with security, governance, and operational policies is essential. Admission controllers act as &amp;ldquo;gatekeepers&amp;rdquo; for your cluster, ensuring only compliant resources get through. 🛡️&lt;/p&gt;
&lt;p&gt;Three popular options for extending Kubernetes&amp;rsquo; admission control functionality are &lt;strong&gt;OPA GateKeeper&lt;/strong&gt;, &lt;strong&gt;Kyverno&lt;/strong&gt;, and the &lt;strong&gt;Azure Policy Add-on for AKS&lt;/strong&gt; (which incorporates OPA GateKeeper&amp;rsquo;s engine). In this article, we’ll compare these solutions and show why &lt;strong&gt;Kyverno&lt;/strong&gt; is still the most user-friendly and versatile option for Kubernetes users. 🌊&lt;/p&gt;</description></item><item><title>🚀 Enhancing Container Security: The Complete Guide to Secure and Clean Kubernetes Clusters 🛡️🧼</title><link>https://kubermates.org/blog/enhancing-container-security-the-complete-guide-to-secure-and-clean-kubernetes-clusters-1ida/</link><pubDate>Wed, 11 Sep 2024 07:19:50 +0000</pubDate><guid>https://kubermates.org/blog/enhancing-container-security-the-complete-guide-to-secure-and-clean-kubernetes-clusters-1ida/</guid><description>&lt;p&gt;As Kubernetes continues to grow in popularity, ensuring the security and cleanliness of your container images is crucial. In this guide, we’ll cover two key strategies: &lt;strong&gt;image signing using Notary&lt;/strong&gt; 🖋️ and the &lt;strong&gt;AKS Image Cleaner (Eraser)&lt;/strong&gt; add-on 🧼. Together, they form a robust, secure, and efficient container management workflow.&lt;/p&gt;
&lt;p&gt;By the end, you&amp;rsquo;ll know how to ensure that your AKS cluster pulls only verified, trusted images and stays free of unused images that could pose a risk to your environment.&lt;/p&gt;</description></item><item><title>🌐 Securing Kubernetes Secrets in AKS: Using Azure Key Vault with Managed and User Assigned Identities 🚀</title><link>https://kubermates.org/blog/securing-kubernetes-secrets-in-aks-using-azure-key-vault-with-managed-and-user-assigned-identities-569k/</link><pubDate>Wed, 04 Sep 2024 11:35:22 +0000</pubDate><guid>https://kubermates.org/blog/securing-kubernetes-secrets-in-aks-using-azure-key-vault-with-managed-and-user-assigned-identities-569k/</guid><description>&lt;p&gt;Hello Kubernetes enthusiast! 👋 Let’s dive into a critical aspect of securing your applications running in Azure Kubernetes Service (AKS): managing secrets. While Kubernetes Secrets provide a way to manage sensitive information like passwords and API keys, they aren’t encrypted by default and can be vulnerable if not handled correctly. In this guide, we&amp;rsquo;ll explore how to securely manage secrets by integrating Azure Key Vault with AKS using both &lt;strong&gt;VM Managed Identities&lt;/strong&gt; and &lt;strong&gt;User Assigned Identities&lt;/strong&gt;. Plus, we&amp;rsquo;ll show you how to enable the Secret Store CSI Driver directly in AKS.&lt;/p&gt;</description></item><item><title>Insights on Securing Your Kubernetes Cluster with Falco 🚀🔒</title><link>https://kubermates.org/blog/insights-on-securing-your-kubernetes-cluster-with-falco-4b9g/</link><pubDate>Sun, 01 Sep 2024 12:11:29 +0000</pubDate><guid>https://kubermates.org/blog/insights-on-securing-your-kubernetes-cluster-with-falco-4b9g/</guid><description>&lt;p&gt;Falco is a powerful open-source security tool designed to monitor your Kubernetes cluster in real-time, detecting suspicious activities based on customizable rules. Implementing Falco effectively can significantly enhance your cluster’s security. In this comprehensive guide, we’ll cover everything from installing Falco to best practices for implementing rules, and how to defend against potential bypasses.&lt;/p&gt;
&lt;hr&gt;
&lt;h2 id="-1-installing-falco-in-kubernetes"&gt;🌟 1. Installing Falco in Kubernetes&lt;/h2&gt;
&lt;p&gt;Getting started with Falco is straightforward. Here’s how you can install it using Helm, a popular package manager for Kubernetes.&lt;/p&gt;</description></item><item><title>🛡️ Effective Vulnerability Monitoring in Kubernetes</title><link>https://kubermates.org/blog/effective-vulnerability-monitoring-in-kubernetes-1mge/</link><pubDate>Mon, 26 Aug 2024 10:32:34 +0000</pubDate><guid>https://kubermates.org/blog/effective-vulnerability-monitoring-in-kubernetes-1mge/</guid><description>&lt;h2 id="introduction"&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Hey there, Kubernetes explorer! 🌟 As your Kubernetes environment grows, keeping it secure becomes more challenging, especially when dealing with multiple clusters. Imagine managing several clusters (spokes) and needing a single source of truth for all your security metrics—sounds like a big task, right? 🤔 That&amp;rsquo;s where &lt;strong&gt;Trivy&lt;/strong&gt;, &lt;strong&gt;Trivy Operator&lt;/strong&gt;, &lt;strong&gt;OpenTelemetry&lt;/strong&gt;, &lt;strong&gt;Prometheus&lt;/strong&gt;, and &lt;strong&gt;Grafana&lt;/strong&gt; come to the rescue.&lt;/p&gt;
&lt;p&gt;In this guide, I’ll show you how to set up Trivy and Trivy Operator in a federated Kubernetes environment, collect vulnerability data using OpenTelemetry, and centralize it using either an in-cluster Prometheus setup or managed services like &lt;strong&gt;Azure Monitor (for Prometheus)&lt;/strong&gt; and &lt;strong&gt;Grafana Cloud&lt;/strong&gt; or &lt;strong&gt;Azure Managed Grafana&lt;/strong&gt;. By the end of this, you’ll have a system that monitors vulnerabilities across all your clusters from one place. Let’s dive in! 🏊‍♂️&lt;/p&gt;</description></item><item><title>🚀 Kubernetes RBAC and Role Aggregation Made Easy</title><link>https://kubermates.org/blog/kubernetes-rbac-and-role-aggregation-made-easy-3j4o/</link><pubDate>Mon, 19 Aug 2024 21:03:46 +0000</pubDate><guid>https://kubermates.org/blog/kubernetes-rbac-and-role-aggregation-made-easy-3j4o/</guid><description>&lt;h2 id="what-is-kubernetes-rbac-"&gt;What is Kubernetes RBAC? 🤔&lt;/h2&gt;
&lt;p&gt;Kubernetes, the platform that helps you automate, scale, and manage your containerized applications, comes with a cool feature called &lt;a href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/"&gt;Role-Based Access Control (RBAC)&lt;/a&gt;. Think of RBAC as a gatekeeper that controls who can do what within your Kubernetes cluster. It’s super important because it ensures that everyone and everything (like users, applications, and services) only have the permissions they need—nothing more, nothing less.&lt;/p&gt;
&lt;h2 id="the-four-pillars-of-kubernetes-rbac-"&gt;The Four Pillars of Kubernetes RBAC 🏛️&lt;/h2&gt;
&lt;p&gt;Kubernetes RBAC revolves around four main building blocks:&lt;/p&gt;</description></item></channel></rss>