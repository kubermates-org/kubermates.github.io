<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs &amp; Blog on Kubermates</title><link>https://kubermates.org/docs/</link><description>Recent content in Docs &amp; Blog on Kubermates</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 21 Aug 2025 18:18:42 +0000</lastBuildDate><atom:link href="https://kubermates.org/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Migrate to Amazon EKS: Data plane cost modeling with Karpenter and KWOK</title><link>https://kubermates.org/docs/2025-08-21-migrate-to-amazon-eks-data-plane-cost-modeling-with-karpenter-and-kwok/</link><pubDate>Thu, 21 Aug 2025 18:18:42 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-21-migrate-to-amazon-eks-data-plane-cost-modeling-with-karpenter-and-kwok/</guid><description>When migrating Kubernetes clusters to Amazon Elastic Kubernetes Service (Amazon EKS) , organizations typically follow three phases: assessment, mobilize, and migrate and modernize. The assessment phase involves evaluating technical feasibility for Amazon EKS workloads, analyzing current Kubernetes environments, identifying compatibility issues, estimating costs, and determining timelines with business impact considerations. During the mobilize phase, organizations create detailed migration plans, establish EKS environments with proper networking and security, train teams, and develop testing procedures. The final migrate and modernize phase involves transferring applications and data, validating functionality, implementing cloud-centered features, optimizing resources and costs, and enhancing observability to fully use AWS capabilities. One of the most significant challenges organizations face during the process is cost estimation, which happens in the assessment phase. Karpenter is an open source Kubernetes node autoscaler that efficiently provisions just-in-time compute resources to match workload demands. Unlike traditional autoscalers, Karpenter directly integrates with cloud providers to make intelligent, real-time decisions about instance types, availability zones, and capacity options. It evaluates pod requirements and constraints to select optimal instances, considering factors such as CPU, memory, price, and availability. Karpenter can consolidate workloads for cost efficiency and rapidly scale from zero to handle sudden demand spikes. It supports both spot and on-demand instances, and automatically terminates nodes when they’re no longer needed, optimizing cluster resource utilization and reducing cloud costs. Karpenter uses the concept of Providers to interact with different infrastructure platforms for provisioning and managing compute resources. KWOK (Kubernetes WithOut Kubelet) is a toolkit that simulates data plane nodes without allocating actual infrastructure, and can be used as a provider to create lightweight testing environments that enable developers to validate provisioning decisions, try various (virtual) instance types, and debug scaling behaviors.</description></item><item><title>Tuning Linux Swap for Kubernetes: A Deep Dive</title><link>https://kubermates.org/docs/2025-08-19-tuning-linux-swap-for-kubernetes-a-deep-dive/</link><pubDate>Tue, 19 Aug 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-08-19-tuning-linux-swap-for-kubernetes-a-deep-dive/</guid><description>The Kubernetes NodeSwap feature , likely to graduate to stable in the upcoming Kubernetes v1. 34 release, allows swap usage: a significant shift from the conventional practice of disabling swap for performance predictability. This article focuses exclusively on tuning swap on Linux nodes, where this feature is available. By allowing Linux nodes to use secondary storage for additional virtual memory when physical RAM is exhausted, node swap support aims to improve resource utilization and reduce out-of-memory (OOM) kills. However, enabling swap is not a &amp;ldquo;turn-key&amp;rdquo; solution. The performance and stability of your nodes under memory pressure are critically dependent on a set of Linux kernel parameters. Misconfiguration can lead to performance degradation and interfere with Kubelet&amp;rsquo;s eviction logic. In this blogpost, I&amp;rsquo;ll dive into critical Linux kernel parameters that govern swap behavior. I will explore how these parameters influence Kubernetes workload performance, swap utilization, and crucial eviction mechanisms. I will present various test results showcasing the impact of different configurations, and share my findings on achieving optimal settings for stable and high-performing Kubernetes clusters. At a high level, the Linux kernel manages memory through pages, typically 4KiB in size. When physical memory becomes constrained, the kernel&amp;rsquo;s page replacement algorithm decides which pages to move to swap space.</description></item><item><title>Canary delivery with Argo Rollout and Amazon VPC Lattice for Amazon EKS</title><link>https://kubermates.org/docs/2025-08-12-canary-delivery-with-argo-rollout-and-amazon-vpc-lattice-for-amazon-eks/</link><pubDate>Tue, 12 Aug 2025 23:55:07 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-12-canary-delivery-with-argo-rollout-and-amazon-vpc-lattice-for-amazon-eks/</guid><description>Modern application delivery demands agility and reliability, where updates are rolled out progressively while making sure of the minimal impact on end users. Progressive delivery strategies, such as canary deployments, allow organizations to release new features by shifting traffic incrementally between old and new versions of a service. This allows organizations to first release features to a small subset of users, monitor system behavior and performance in real time, and automatically roll back if anomalies are detected. This is particularly valuable in modern microservices environments running on platforms such as Amazon Elastic Kubernetes Service (Amazon EKS) , where service meshes and traffic routers provide the necessary infrastructure for fine-grained control over traffic routing. This post explores an architectural approach to implementing progressive delivery using Amazon VPC Lattice, Amazon CloudWatch Synthetics , and Argo Rollouts. The solution uses VPC Lattice for enhanced traffic control across microservices, CloudWatch Synthetics for real-time health and validation monitoring, and Argo Rollouts for orchestrating canary updates. The content in this post addresses readers who are already familiar with networking constructs on Amazon Web Services (AWS), such as Amazon Virtual Private Cloud (Amazon VPC) , CloudWatch Synthetics and Amazon EKS. Instead of defining these services, we focus on their capabilities and integration with VPC Lattice. We also build upon your existing understanding of VPC Lattice concepts and Argo Rollouts. For more background on Amazon VPC Lattice, we recommend that you review the post, Build secure multi-account multi-VPC connectivity for your applications with Amazon VPC Lattice , and the collection of resources in the VPC Lattice Getting started guide. The architecture integrates multiple AWS services and Kubernetes-native components, providing a comprehensive solution for progressive delivery: In this section we consider an application running on Amazon EKS, where a new version of a microservice— prodDetail v2 —needs to be rolled out with minimal impact to users relying on the stable version v1. To do this, we implement a canary deployment strategy using VPC Lattice, Argo Rollouts, CloudWatch Synthetics, and AnalysisTemplates.</description></item><item><title>Introducing Headlamp AI Assistant</title><link>https://kubermates.org/docs/2025-08-07-introducing-headlamp-ai-assistant/</link><pubDate>Thu, 07 Aug 2025 20:00:00 +0100</pubDate><guid>https://kubermates.org/docs/2025-08-07-introducing-headlamp-ai-assistant/</guid><description>This announcement originally appeared on the Headlamp blog. To simplify Kubernetes management and troubleshooting, we&amp;rsquo;re thrilled to introduce Headlamp AI Assistant : a powerful new plugin for Headlamp that helps you understand and operate your Kubernetes clusters and applications with greater clarity and ease. Whether you&amp;rsquo;re a seasoned engineer or just getting started, the AI Assistant offers: Here is a demo of the AI Assistant in action as it helps troubleshoot an application running with issues in a Kubernetes cluster: Large Language Models (LLMs) have transformed not just how we access data but also how we interact with it. The rise of tools like ChatGPT opened a world of possibilities, inspiring a wave of new applications. Asking questions or giving commands in natural language is intuitive, especially for users who aren&amp;rsquo;t deeply technical. Now everyone can quickly ask how to do X or Y, without feeling awkward or having to traverse pages and pages of documentation like before. Therefore, Headlamp AI Assistant brings a conversational UI to Headlamp , powered by LLMs that Headlamp users can configure with their own API keys. It is available as a Headlamp plugin, making it easy to integrate into your existing setup. Users can enable it by installing the plugin and configuring it with their own LLM API keys, giving them control over which model powers the assistant. Once enabled, the assistant becomes part of the Headlamp UI, ready to respond to contextual queries and perform actions directly from the interface. As expected, the AI Assistant is focused on helping users with Kubernetes concepts. Yet, while there is a lot of value in responding to Kubernetes related questions from Headlamp&amp;rsquo;s UI, we believe that the great benefit of such an integration is when it can use the context of what the user is experiencing in an application.</description></item><item><title>Simplify network connectivity using Tailscale with Amazon EKS Hybrid Nodes</title><link>https://kubermates.org/docs/2025-08-06-simplify-network-connectivity-using-tailscale-with-amazon-eks-hybrid-nodes/</link><pubDate>Wed, 06 Aug 2025 22:12:21 +0000</pubDate><guid>https://kubermates.org/docs/2025-08-06-simplify-network-connectivity-using-tailscale-with-amazon-eks-hybrid-nodes/</guid><description>This post was co-authored with Lee Briggs, Director of Solutions Engineering at Tailscale. In this post, we guide you through integrating Tailscale with your Amazon Elastic Kubernetes Service (EKS) Hybrid Nodes environment. Amazon EKS Hybrid Nodes is a feature of Amazon EKS that enables you to streamline your Kubernetes management by connecting on-premises and edge infrastructure to an EKS cluster running in Amazon Web Services (AWS). This unified approach allows AWS to manage the Kubernetes control plane in the cloud while you maintain your hybrid nodes in on-premises or edge locations. We demonstrate how to configure a remote pod network and node address space. Install Tailscale on your hybrid nodes, set up a subnet router within your Amazon Virtual Private Cloud (Amazon VPC) , and update your AWS routes accordingly. This integration provides direct, encrypted connections that streamline the network architecture needed for EKS Hybrid Nodes. Although EKS Hybrid Nodes streamlines the Kubernetes management challenge, network connectivity between your on-premises infrastructure and AWS remains a critical requirement. Tailscale can help streamline this network connectivity between your EKS Hybrid Nodes data plane and Amazon EKS Kubernetes control plane. Unlike traditional VPNs, which tunnel all network traffic through a central gateway server, Tailscale creates a peer-to-peer mesh network (known as a tailnet ). It enables encrypted point-to-point connections using the open source WireGuard protocol, connecting devices and services across different networks with enhanced security features. However, you can still use Tailscale like a traditional VPN.</description></item><item><title>Kubernetes v1.34 Sneak Peek</title><link>https://kubermates.org/docs/2025-07-28-kubernetes-v1-34-sneak-peek/</link><pubDate>Mon, 28 Jul 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-28-kubernetes-v1-34-sneak-peek/</guid><description>Kubernetes v1. 34 is coming at the end of August 2025. This release will not include any removal or deprecation, but it is packed with an impressive number of enhancements. Here are some of the features we are most excited about in this cycle! Please note that this information reflects the current state of v1. 34 development and may change before release. The following list highlights some of the notable enhancements likely to be included in the v1. 34 release, but is not an exhaustive list of all planned changes. This is not a commitment and the release content is subject to change. Dynamic Resource Allocation (DRA) provides a flexible way to categorize, request, and use devices like GPUs or custom hardware in your Kubernetes cluster. Since the v1. 30 release, DRA has been based around claiming devices using structured parameters that are opaque to the core of Kubernetes. The relevant enhancement proposal, KEP-4381 , took inspiration from dynamic provisioning for storage volumes.</description></item><item><title>Scaling beyond IPv4: integrating IPv6 Amazon EKS clusters into existing Istio Service Mesh</title><link>https://kubermates.org/docs/2025-07-22-scaling-beyond-ipv4-integrating-ipv6-amazon-eks-clusters-into-existing-istio-ser/</link><pubDate>Tue, 22 Jul 2025 18:54:25 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-22-scaling-beyond-ipv4-integrating-ipv6-amazon-eks-clusters-into-existing-istio-ser/</guid><description>Organizations are increasingly adopting IPv6 for their Amazon Elastic Kubernetes Service (Amazon EKS) deployments, driven by three key factors: depletion of private IPv4 addresses, the need to streamline or eliminate overlay networks, and improved network security requirements on Amazon Web Services (AWS). In IPv6-enabled EKS clusters, each pod receives a unique IPv6 address from the Amazon Virtual Private Cloud (Amazon VPC) IPv6 range, with seamless compatibility facilitated by the Amazon EKS VPC Container Network Interface (CNI). This solution effectively addresses two major IPv4 limitations: the scarcity of private addresses and the security vulnerabilities created by overlapping IPv4 spaces that need Network Address Translation (NAT) at the node level. When transitioning to IPv6, you likely need to run both IPv4 and IPv6 EKS clusters simultaneously. This is particularly important for organizations using Istio Service Mesh with Amazon EKS, because IPv6 clusters must integrate with the existing Service Mesh and work smoothly alongside IPv4 clusters. To streamline this transition, you can configure your Istio Service Mesh to support both your current IPv4 EKS clusters and your new IPv6 EKS clusters. If Istio Service Mesh isn’t part of your infrastructure, then we suggest exploring Amazon VPC Lattice as an alternative solution to speed up your IPv6 implementation on AWS. This post provides a step-by-step guide for combining IPv6-enabled EKS clusters with your existing Istio Service Mesh and IPv4 workloads, enabling a graceful transition to IPv6 on AWS. This guide covers detailed instructions for enabling communication between IPv6 and IPv4 EKS clusters, along with recommended practices for implementing IPv6 across both single and multiple VPC configurations. The functionality of Amazon EKS IPv6 builds on the native dual-stack capabilities of VPC. When you enable IPv6 in your VPC, it receives both IPv4 prefixes and a /56 IPv6 prefix. This IPv6 prefix can come from three sources: Amazon’s Global Unicast Address (GUA) space, your own IPv6 range (BYOIPv6), or a Unique Local Address (ULA) space.</description></item><item><title>Deep dive into cluster networking for Amazon EKS Hybrid Nodes</title><link>https://kubermates.org/docs/2025-07-21-deep-dive-into-cluster-networking-for-amazon-eks-hybrid-nodes/</link><pubDate>Mon, 21 Jul 2025 22:22:52 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-21-deep-dive-into-cluster-networking-for-amazon-eks-hybrid-nodes/</guid><description>Amazon Elastic Kubernetes Service ( Amazon EKS ) Hybrid Nodes enables organizations to integrate their existing on-premises and edge computing infrastructure into EKS clusters as remote nodes. EKS Hybrid Nodes provides you with the flexibility to run your containerized applications wherever needed, while maintaining standardized Kubernetes management practices and addressing latency, compliance, and data residency needs. EKS Hybrid Nodes accelerates infrastructure modernization by repurposing existing hardware investments. Organizations can harness the elastic scalability, high availability, and fully managed advantages of Amazon EKS, while making sure of operational consistency through unified workflows and toolsets across hybrid environments. One of the key aspects of the EKS Hybrid Nodes solution is the hybrid network architecture between the cloud-based Amazon EKS control plane and your on-premises nodes. This post dives deep into the cluster networking configurations, guiding you through the process of integrating an EKS cluster with hybrid nodes in your existing infrastructure. In this walkthrough, we set up different Container Network Interface (CNI) options and load balancing solutions on EKS Hybrid Nodes to meet your networking requirements. EKS Hybrid Nodes needs private network connectivity between the cloud-hosted Amazon EKS control plane and the hybrid nodes running in your on-premises environment. This connectivity can be established using either Amazon Web Services (AWS) Direct Connect or AWS Site-to-Site VPN , through an AWS Transit Gateway or the Virtual Private Gateway into your Amazon Virtual Private Cloud (Amazon VPC). For an optimal experience, AWS recommends reliable network connectivity with at least 100 Mbps bandwidth, and a maximum of 200ms round-trip latency, for hybrid nodes connecting to the AWS Region. This is general guidance rather than a strict requirement, and specific bandwidth and latency requirements may differ based on the quantity of hybrid nodes and your application’s unique characteristics. The node and pod Classless Inter-Domain Routing (CIDR) blocks for your hybrid nodes and container workloads must be within the IPv4 RFC-1918 ranges.</description></item><item><title>Post-Quantum Cryptography in Kubernetes</title><link>https://kubermates.org/docs/2025-07-18-post-quantum-cryptography-in-kubernetes/</link><pubDate>Fri, 18 Jul 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-18-post-quantum-cryptography-in-kubernetes/</guid><description>The world of cryptography is on the cusp of a major shift with the advent of quantum computing. While powerful quantum computers are still largely theoretical for many applications, their potential to break current cryptographic standards is a serious concern, especially for long-lived systems. This is where Post-Quantum Cryptography (PQC) comes in. In this article, I&amp;rsquo;ll dive into what PQC means for TLS and, more specifically, for the Kubernetes ecosystem. I&amp;rsquo;ll explain what the (suprising) state of PQC in Kubernetes is and what the implications are for current and future clusters. Post-Quantum Cryptography refers to cryptographic algorithms that are thought to be secure against attacks by both classical and quantum computers. The primary concern is that quantum computers, using algorithms like Shor&amp;rsquo;s Algorithm , could efficiently break widely used public-key cryptosystems such as RSA and Elliptic Curve Cryptography (ECC), which underpin much of today&amp;rsquo;s secure communication, including TLS. The industry is actively working on standardizing and adopting PQC algorithms. One of the first to be standardized by NIST is the Module-Lattice Key Encapsulation Mechanism ( ML-KEM ), formerly known as Kyber, and now standardized as FIPS-203 (PDF download). It is difficult to predict when quantum computers will be able to break classical algorithms. However, it is clear that we need to start migrating to PQC algorithms now, as the next section shows. To get a feeling for the predicted timeline we can look at a NIST report covering the transition to post-quantum cryptography standards.</description></item><item><title>Under the hood: Amazon EKS ultra scale clusters</title><link>https://kubermates.org/docs/2025-07-16-under-the-hood-amazon-eks-ultra-scale-clusters/</link><pubDate>Wed, 16 Jul 2025 00:14:37 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-16-under-the-hood-amazon-eks-ultra-scale-clusters/</guid><description>This post was co-authored by Shyam Jeedigunta, Principal Engineer, Amazon EKS; Apoorva Kulkarni, Sr. Specialist Solutions Architect, Containers and Raghav Tripathi, Sr. Software Dev Manager, Amazon EKS. Today, Amazon Elastic Kubernetes Service (Amazon EKS) announced support for clusters with up to 100,000 nodes. With Amazon EC2’s new generation accelerated computing instance types, this translates to 1. 6 million AWS Trainium chips or 800,000 NVIDIA GPUs in a single Kubernetes cluster. This unlocks ultra scale artificial intelligence (AI) and machine leaning (ML) workloads such as state-of-the-art model training, fine-tuning and agentic inference. Besides customers directly consuming Amazon EKS today, these improvements also extend to other AI/ML services like Amazon SageMaker HyperPod with EKS that leverage EKS as their compute layer, advancing AWS’s overall ultra scale computing capabilities. Our customers have made it clear that containerization of training jobs and operators such as Kubeflow, the ability to streamline resource provisioning and lifecycle through projects like Karpenter, support for pluggable scheduling strategies, and access to a vast ecosystem of cloud-native tools is critical for their success in the AI/ML domain. Kubernetes has emerged as a key enabler here due to its powerful and extensible API model along with robust container orchestration capabilities, allowing accelerated workloads to scale quickly and run reliably. Through multiple technical innovations, architectural improvements and open-source collaboration, Amazon EKS has built the next generation of its cluster control plane and data plane for ultra scale, with full Kubernetes conformance. At AWS, we recommend customers running general-purpose applications with low coupling and horizontal scalability to follow a cell-based architecture as the strategy to sustain growth.</description></item><item><title>Amazon EKS enables ultra scale AI/ML workloads with support for 100K nodes per cluster</title><link>https://kubermates.org/docs/2025-07-16-amazon-eks-enables-ultra-scale-ai-ml-workloads-with-support-for-100k-nodes-per-c/</link><pubDate>Wed, 16 Jul 2025 00:14:26 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-16-amazon-eks-enables-ultra-scale-ai-ml-workloads-with-support-for-100k-nodes-per-c/</guid><description>&lt;p>Open the original post ↗ &lt;a href="https://aws.amazon.com/blogs/containers/amazon-eks-enables-ultra-scale-ai-ml-workloads-with-support-for-100k-nodes-per-cluster/">https://aws.amazon.com/blogs/containers/amazon-eks-enables-ultra-scale-ai-ml-workloads-with-support-for-100k-nodes-per-cluster/&lt;/a>&lt;/p></description></item><item><title>Navigating Failures in Pods With Devices</title><link>https://kubermates.org/docs/2025-07-03-navigating-failures-in-pods-with-devices/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-07-03-navigating-failures-in-pods-with-devices/</guid><description>Kubernetes is the de facto standard for container orchestration, but when it comes to handling specialized hardware like GPUs and other accelerators, things get a bit complicated. This blog post dives into the challenges of managing failure modes when operating pods with devices in Kubernetes, based on insights from Sergey Kanzhelev and Mrunal Patel&amp;rsquo;s talk at KubeCon NA 2024. You can follow the links to slides and recording. The rise of AI/ML workloads has brought new challenges to Kubernetes. These workloads often rely heavily on specialized hardware, and any device failure can significantly impact performance and lead to frustrating interruptions. As highlighted in the 2024 Llama paper , hardware issues, particularly GPU failures, are a major cause of disruption in AI/ML training. You can also learn how much effort NVIDIA spends on handling devices failures and maintenance in the KubeCon talk by Ryan Hallisey and Piotr Prokop All-Your-GPUs-Are-Belong-to-Us: An Inside Look at NVIDIA&amp;rsquo;s Self-Healing GeForce NOW Infrastructure ( recording ) as they see 19 remediation requests per 1000 nodes a day! We also see data centers offering spot consumption models and overcommit on power, making device failures commonplace and a part of the business model. However, Kubernetes’s view on resources is still very static. The resource is either there or not. And if it is there, the assumption is that it will stay there fully functional - Kubernetes lacks good support for handling full or partial hardware failures. These long-existing assumptions combined with the overall complexity of a setup lead to a variety of failure modes, which we discuss here. Generally, all AI/ML workloads require specialized hardware, have challenging scheduling requirements, and are expensive when idle.</description></item><item><title>Image Compatibility In Cloud Native Environments</title><link>https://kubermates.org/docs/2025-06-25-image-compatibility-in-cloud-native-environments/</link><pubDate>Wed, 25 Jun 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-25-image-compatibility-in-cloud-native-environments/</guid><description>In industries where systems must run very reliably and meet strict performance criteria such as telecommunication, high-performance or AI computing, containerized applications often need specific operating system configuration or hardware presence. It is common practice to require the use of specific versions of the kernel, its configuration, device drivers, or system components. Despite the existence of the Open Container Initiative (OCI) , a governing community to define standards and specifications for container images, there has been a gap in expression of such compatibility requirements. The need to address this issue has led to different proposals and, ultimately, an implementation in Kubernetes&amp;rsquo; Node Feature Discovery (NFD). NFD is an open source Kubernetes project that automatically detects and reports hardware and system features of cluster nodes. This information helps users to schedule workloads on nodes that meet specific system requirements, which is especially useful for applications with strict hardware or operating system dependencies. A container image is built on a base image, which provides a minimal runtime environment, often a stripped-down Linux userland, completely empty or distroless. When an application requires certain features from the host OS, compatibility issues arise. These dependencies can manifest in several ways: While containers in Kubernetes are the most likely unit of abstraction for these needs, the definition of compatibility can extend further to include other container technologies such as Singularity and other OCI artifacts such as binaries from a spack binary cache. Containerized applications are deployed across various Kubernetes distributions and cloud providers, where different host operating systems introduce compatibility challenges. Often those have to be pre-configured before workload deployment or are immutable. For instance, different cloud providers will include different operating systems like: Each OS comes with unique kernel versions, configurations, and drivers, making compatibility a non-trivial issue for applications requiring specific features.</description></item><item><title>Changes to Kubernetes Slack</title><link>https://kubermates.org/docs/2025-06-16-changes-to-kubernetes-slack/</link><pubDate>Mon, 16 Jun 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-16-changes-to-kubernetes-slack/</guid><description>UPDATE : We’ve received notice from Salesforce that our Slack workspace WILL NOT BE DOWNGRADED on June 20th. Stand by for more details, but for now, there is no urgency to back up private channels or direct messages. Kubernetes Slack will lose its special status and will be changing into a standard free Slack on June 20, 2025. Sometime later this year, our community may move to a new platform. If you are responsible for a channel or private channel, or a member of a User Group, you will need to take some actions as soon as you can. For the last decade, Slack has supported our project with a free customized enterprise account. They have let us know that they can no longer do so, particularly since our Slack is one of the largest and more active ones on the platform. As such, they will be downgrading it to a standard free Slack while we decide on, and implement, other options. On Friday, June 20, we will be subject to the feature limitations of free Slack. The primary ones which will affect us will be only retaining 90 days of history, and having to disable several apps and workflows which we are currently using. The Slack Admin team will do their best to manage these limitations. Responsible channel owners, members of private channels, and members of User Groups should take some actions to prepare for the upgrade and preserve information as soon as possible.</description></item><item><title>Enhancing Kubernetes Event Management with Custom Aggregation</title><link>https://kubermates.org/docs/2025-06-10-enhancing-kubernetes-event-management-with-custom-aggregation/</link><pubDate>Tue, 10 Jun 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-10-enhancing-kubernetes-event-management-with-custom-aggregation/</guid><description>Kubernetes Events provide crucial insights into cluster operations, but as clusters grow, managing and analyzing these events becomes increasingly challenging. This blog post explores how to build custom event aggregation systems that help engineering teams better understand cluster behavior and troubleshoot issues more effectively. In a Kubernetes cluster, events are generated for various operations - from pod scheduling and container starts to volume mounts and network configurations. While these events are invaluable for debugging and monitoring, several challenges emerge in production environments: To learn more about Events in Kubernetes, read the Event API reference. Consider a production environment with tens of microservices where the users report intermittent transaction failures: Traditional event aggregation process: Engineers are wasting hours sifting through thousands of standalone events spread across namespaces. By the time they look into it, the older events have long since purged, and correlating pod restarts to node-level issues is practically impossible. With its event aggregation in its custom events: The system groups events across resources, instantly surfacing correlation patterns such as volume mount timeouts before pod restarts. History indicates it occurred during past record traffic spikes, highlighting a storage scalability issue in minutes rather than hours. The beneﬁt of this approach is that organizations that implement it commonly cut down their troubleshooting time significantly along with increasing the reliability of systems by detecting patterns early. This post explores how to build a custom event aggregation system that addresses these challenges, aligned to Kubernetes best practices. I&amp;rsquo;ve picked the Go programming language for my example. This event aggregation system consists of three main components: Here&amp;rsquo;s a sketch for how to implement the event watcher: The event processor enriches events with additional context and classification: One of the key features you could implement is a way of correlating related Events.</description></item><item><title>Introducing Gateway API Inference Extension</title><link>https://kubermates.org/docs/2025-06-05-introducing-gateway-api-inference-extension/</link><pubDate>Thu, 05 Jun 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-05-introducing-gateway-api-inference-extension/</guid><description>Modern generative AI and large language model (LLM) services create unique traffic-routing challenges on Kubernetes. Unlike typical short-lived, stateless web requests, LLM inference sessions are often long-running, resource-intensive, and partially stateful. For example, a single GPU-backed model server may keep multiple inference sessions active and maintain in-memory token caches. Traditional load balancers focused on HTTP path or round-robin lack the specialized capabilities needed for these workloads. They also don’t account for model identity or request criticality (e. g. , interactive chat vs. batch jobs). Organizations often patch together ad-hoc solutions, but a standardized approach is missing. Gateway API Inference Extension was created to address this gap by building on the existing Gateway API , adding inference-specific routing capabilities while retaining the familiar model of Gateways and HTTPRoutes. By adding an inference extension to your existing gateway, you effectively transform it into an Inference Gateway , enabling you to self-host GenAI/LLMs with a “model-as-a-service” mindset. The project’s goal is to improve and standardize routing to inference workloads across the ecosystem.</description></item><item><title>Start Sidecar First: How To Avoid Snags</title><link>https://kubermates.org/docs/2025-06-03-start-sidecar-first-how-to-avoid-snags/</link><pubDate>Tue, 03 Jun 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-06-03-start-sidecar-first-how-to-avoid-snags/</guid><description>From the Kubernetes Multicontainer Pods: An Overview blog post you know what their job is, what are the main architectural patterns, and how they are implemented in Kubernetes. The main thing I’ll cover in this article is how to ensure that your sidecar containers start before the main app. It’s more complicated than you might think! I&amp;rsquo;d just like to remind readers that the v1. 29. 0 release of Kubernetes added native support for sidecar containers , which can now be defined within the. spec. initContainers field, but with restartPolicy: Always. You can see that illustrated in the following example Pod manifest snippet: What are the specifics of defining sidecars with a. spec. initContainers block, rather than as a legacy multi-container pod with multiple. spec. containers ? Well, all.</description></item><item><title>Gateway API v1.3.0: Advancements in Request Mirroring, CORS, Gateway Merging, and Retry Budgets</title><link>https://kubermates.org/docs/2025-06-02-gateway-api-v1-3-0-advancements-in-request-mirroring-cors-gateway-merging-and-re/</link><pubDate>Mon, 02 Jun 2025 09:00:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-06-02-gateway-api-v1-3-0-advancements-in-request-mirroring-cors-gateway-merging-and-re/</guid><description>Join us in the Kubernetes SIG Network community in celebrating the general availability of Gateway API v1. 3. 0! We are also pleased to announce that there are already a number of conformant implementations to try, made possible by postponing this blog announcement. Version 1. 3. 0 of the API was released about a month ago on April 24, 2025. Gateway API v1. 3. 0 brings a new feature to the Standard channel (Gateway API&amp;rsquo;s GA release channel): percentage-based request mirroring , and introduces three new experimental features: cross-origin resource sharing (CORS) filters, a standardized mechanism for listener and gateway merging, and retry budgets. Also see the full release notes and applaud the v1. 3. 0 release team next time you see them.</description></item><item><title>Kubernetes v1.33: In-Place Pod Resize Graduated to Beta</title><link>https://kubermates.org/docs/2025-05-16-kubernetes-v1-33-in-place-pod-resize-graduated-to-beta/</link><pubDate>Fri, 16 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-16-kubernetes-v1-33-in-place-pod-resize-graduated-to-beta/</guid><description>On behalf of the Kubernetes project, I am excited to announce that the in-place Pod resize feature (also known as In-Place Pod Vertical Scaling), first introduced as alpha in Kubernetes v1. 27, has graduated to Beta and will be enabled by default in the Kubernetes v1. 33 release! This marks a significant milestone in making resource management for Kubernetes workloads more flexible and less disruptive. Traditionally, changing the CPU or memory resources allocated to a container required restarting the Pod. While acceptable for many stateless applications, this could be disruptive for stateful services, batch jobs, or any workloads sensitive to restarts. In-place Pod resizing allows you to change the CPU and memory requests and limits assigned to containers within a running Pod, often without requiring a container restart. Here&amp;rsquo;s the core idea: You can try it out on a v1. 33 Kubernetes cluster by using kubectl to edit a Pod (requires kubectl v1. 32+): For detailed usage instructions and examples, please refer to the official Kubernetes documentation: Resize CPU and Memory Resources assigned to Containers. Kubernetes still excels at scaling workloads horizontally (adding or removing replicas), but in-place Pod resizing unlocks several key benefits for vertical scaling: Since the alpha release in v1. 27, significant work has gone into maturing the feature, improving its stability, and refining the user experience based on feedback and further development. Here are the key changes: Graduating to Beta means the feature is ready for broader adoption, but development doesn&amp;rsquo;t stop here! Here&amp;rsquo;s what the community is focusing on next: With the InPlacePodVerticalScaling feature gate enabled by default in v1.</description></item><item><title>Announcing etcd v3.6.0</title><link>https://kubermates.org/docs/2025-05-15-announcing-etcd-v3-6-0/</link><pubDate>Thu, 15 May 2025 16:00:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-15-announcing-etcd-v3-6-0/</guid><description>This announcement originally appeared on the etcd blog. Today, we are releasing etcd v3. 6. 0 , the first minor release since etcd v3. 5. 0 on June 15, 2021. This release introduces several new features, makes significant progress on long-standing efforts like downgrade support and migration to v3store, and addresses numerous critical &amp;amp; major issues. It also includes major optimizations in memory usage, improving efficiency and performance. In addition to the features of v3. 6. 0, etcd has joined Kubernetes as a SIG (sig-etcd), enabling us to improve project sustainability. We&amp;rsquo;ve introduced systematic robustness testing to ensure correctness and reliability.</description></item><item><title>Kubernetes 1.33: Job's SuccessPolicy Goes GA</title><link>https://kubermates.org/docs/2025-05-15-kubernetes-1-33-job-s-successpolicy-goes-ga/</link><pubDate>Thu, 15 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-15-kubernetes-1-33-job-s-successpolicy-goes-ga/</guid><description>On behalf of the Kubernetes project, I&amp;rsquo;m pleased to announce that Job success policy has graduated to General Availability (GA) as part of the v1. 33 release. In batch workloads, you might want to use leader-follower patterns like MPI , in which the leader controls the execution, including the followers&amp;rsquo; lifecycle. In this case, you might want to mark it as succeeded even if some of the indexes failed. Unfortunately, a leader-follower Kubernetes Job that didn&amp;rsquo;t use a success policy, in most cases, would have to require all Pods to finish successfully for that Job to reach an overall succeeded state. For Kubernetes Jobs, the API allows you to specify the early exit criteria using the. spec. successPolicy field (you can only use the. spec. successPolicy field for an indexed Job ). Which describes a set of rules either using a list of succeeded indexes for a job, or defining a minimal required size of succeeded indexes. This newly stable field is especially valuable for scientific simulation, AI/ML and High-Performance Computing (HPC) batch workloads.</description></item><item><title>Kubernetes v1.33: Updates to Container Lifecycle</title><link>https://kubermates.org/docs/2025-05-14-kubernetes-v1-33-updates-to-container-lifecycle/</link><pubDate>Wed, 14 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-14-kubernetes-v1-33-updates-to-container-lifecycle/</guid><description>Kubernetes v1. 33 introduces a few updates to the lifecycle of containers. The Sleep action for container lifecycle hooks now supports a zero sleep duration (feature enabled by default). There is also alpha support for customizing the stop signal sent to containers when they are being terminated. This blog post goes into the details of these new aspects of the container lifecycle, and how you can use them. Kubernetes v1. 29 introduced the Sleep action for container PreStop and PostStart Lifecycle hooks. The Sleep action lets your containers pause for a specified duration after the container is started or before it is terminated. This was needed to provide a straightforward way to manage graceful shutdowns. Before the Sleep action, folks used to run the sleep command using the exec action in their container lifecycle hooks. If you wanted to do this you&amp;rsquo;d need to have the binary for the sleep command in your container image. This is difficult if you&amp;rsquo;re using third party images.</description></item><item><title>Kubernetes v1.33: Job's Backoff Limit Per Index Goes GA</title><link>https://kubermates.org/docs/2025-05-13-kubernetes-v1-33-job-s-backoff-limit-per-index-goes-ga/</link><pubDate>Tue, 13 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-13-kubernetes-v1-33-job-s-backoff-limit-per-index-goes-ga/</guid><description>In Kubernetes v1. 33, the Backoff Limit Per Index feature reaches general availability (GA). This blog describes the Backoff Limit Per Index feature and its benefits. When you run workloads on Kubernetes, you must consider scenarios where Pod failures can affect the completion of your workloads. Ideally, your workload should tolerate transient failures and continue running. To achieve failure tolerance in a Kubernetes Job, you can set the spec. backoffLimit field. This field specifies the total number of tolerated failures. However, for workloads where every index is considered independent, like embarassingly parallel workloads - the spec. backoffLimit field is often not flexible enough. For example, you may choose to run multiple suites of integration tests by representing each suite as an index within an Indexed Job. In that setup, a fast-failing index (test suite) is likely to consume your entire budget for tolerating Pod failures, and you might not be able to run the other indexes.</description></item><item><title>Kubernetes v1.33: Image Pull Policy the way you always thought it worked!</title><link>https://kubermates.org/docs/2025-05-12-kubernetes-v1-33-image-pull-policy-the-way-you-always-thought-it-worked/</link><pubDate>Mon, 12 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-12-kubernetes-v1-33-image-pull-policy-the-way-you-always-thought-it-worked/</guid><description>Some things in Kubernetes are surprising, and the way imagePullPolicy behaves might be one of them. Given Kubernetes is all about running pods, it may be peculiar to learn that there has been a caveat to restricting pod access to authenticated images for over 10 years in the form of issue 18787 ! It is an exciting release when you can resolve a ten-year-old issue. The gist of the problem is that the imagePullPolicy: IfNotPresent strategy has done precisely what it says, and nothing more. Let&amp;rsquo;s set up a scenario. To begin, Pod A in Namespace X is scheduled to Node 1 and requires image Foo from a private repository. For it&amp;rsquo;s image pull authentication material, the pod references Secret 1 in its imagePullSecrets. Secret 1 contains the necessary credentials to pull from the private repository. The Kubelet will utilize the credentials from Secret 1 as supplied by Pod A and it will pull container image Foo from the registry. This is the intended (and secure) behavior. But now things get curious. If Pod B in Namespace Y happens to also be scheduled to Node 1 , unexpected (and potentially insecure) things happen. Pod B may reference the same private image, specifying the IfNotPresent image pull policy.</description></item><item><title>Kubernetes v1.33: Streaming List responses</title><link>https://kubermates.org/docs/2025-05-09-kubernetes-v1-33-streaming-list-responses/</link><pubDate>Fri, 09 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-09-kubernetes-v1-33-streaming-list-responses/</guid><description>Managing Kubernetes cluster stability becomes increasingly critical as your infrastructure grows. One of the most challenging aspects of operating large-scale clusters has been handling List requests that fetch substantial datasets - a common operation that could unexpectedly impact your cluster&amp;rsquo;s stability. Today, the Kubernetes community is excited to announce a significant architectural improvement: streaming encoding for List responses. Current API response encoders just serialize an entire response into a single contiguous memory and perform one ResponseWriter. Write call to transmit data to the client. Despite HTTP/2&amp;rsquo;s capability to split responses into smaller frames for transmission, the underlying HTTP server continues to hold the complete response data as a single buffer. Even as individual frames are transmitted to the client, the memory associated with these frames cannot be freed incrementally. When cluster size grows, the single response body can be substantial - like hundreds of megabytes in size. At large scale, the current approach becomes particularly inefficient, as it prevents incremental memory release during transmission. Imagining that when network congestion occurs, that large response body’s memory block stays active for tens of seconds or even minutes. This limitation leads to unnecessarily high and prolonged memory consumption in the kube-apiserver process. If multiple large List requests occur simultaneously, the cumulative memory consumption can escalate rapidly, potentially leading to an Out-of-Memory (OOM) situation that compromises cluster stability.</description></item><item><title>Kubernetes 1.33: Volume Populators Graduate to GA</title><link>https://kubermates.org/docs/2025-05-08-kubernetes-1-33-volume-populators-graduate-to-ga/</link><pubDate>Thu, 08 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-08-kubernetes-1-33-volume-populators-graduate-to-ga/</guid><description>Kubernetes volume populators are now generally available (GA)! The AnyVolumeDataSource feature gate is treated as always enabled for Kubernetes v1. 33, which means that users can specify any appropriate custom resource as the data source of a PersistentVolumeClaim (PVC). An example of how to use dataSourceRef in PVC: There are four major enhancements from beta. During the beta phase, contributors to Kubernetes identified potential resource leaks with PersistentVolumeClaim (PVC) deletion while volume population was in progress; these leaks happened due to limitations in finalizer handling. Ahead of the graduation to general availability, the Kubernetes project added support to delete temporary resources (PVC prime, etc. ) if the original PVC is deleted. To accommodate this, we&amp;rsquo;ve introduced three new plugin-based functions: A provider example is added in lib-volume-populator/example. For GA, the CSI volume populator controller code gained a MutatorConfig , allowing the specification of mutator functions to modify Kubernetes resources. For example, if the PVC prime is not an exact copy of the PVC and you need provider-specific information for the driver, you can include this information in the optional MutatorConfig. This allows you to customize the Kubernetes objects in the volume populator. Our beta phase highlighted a new requirement: the need to aggregate metrics not just from lib-volume-populator, but also from other components within the provider&amp;rsquo;s codebase. To address this, SIG Storage introduced a provider metric manager.</description></item><item><title>Kubernetes v1.33: From Secrets to Service Accounts: Kubernetes Image Pulls Evolved</title><link>https://kubermates.org/docs/2025-05-07-kubernetes-v1-33-from-secrets-to-service-accounts-kubernetes-image-pulls-evolved/</link><pubDate>Wed, 07 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-07-kubernetes-v1-33-from-secrets-to-service-accounts-kubernetes-image-pulls-evolved/</guid><description>Kubernetes has steadily evolved to reduce reliance on long-lived credentials stored in the API. A prime example of this shift is the transition of Kubernetes Service Account (KSA) tokens from long-lived, static tokens to ephemeral, automatically rotated tokens with OpenID Connect (OIDC)-compliant semantics. This advancement enables workloads to securely authenticate with external services without needing persistent secrets. However, one major gap remains: image pull authentication. Today, Kubernetes clusters rely on image pull secrets stored in the API, which are long-lived and difficult to rotate, or on node-level kubelet credential providers, which allow any pod running on a node to access the same credentials. This presents security and operational challenges. To address this, Kubernetes is introducing Service Account Token Integration for Kubelet Credential Providers , now available in alpha. This enhancement allows credential providers to use pod-specific service account tokens to obtain registry credentials, which kubelet can then use for image pulls — eliminating the need for long-lived image pull secrets. Currently, Kubernetes administrators have two primary options for handling private container image pulls: Image pull secrets stored in the Kubernetes API Kubelet credential providers Neither approach aligns with the principles of least privilege or ephemeral authentication , leaving Kubernetes with a security gap. This new enhancement enables kubelet credential providers to use workload identity when fetching image registry credentials. Instead of relying on long-lived secrets, credential providers can use service account tokens to request short-lived credentials tied to a specific pod’s identity. This approach provides: Kubelet generates short-lived, automatically rotated tokens for service accounts if the credential provider it communicates with has opted into receiving a service account token for image pulls.</description></item><item><title>Kubernetes v1.33: Fine-grained SupplementalGroups Control Graduates to Beta</title><link>https://kubermates.org/docs/2025-05-06-kubernetes-v1-33-fine-grained-supplementalgroups-control-graduates-to-beta/</link><pubDate>Tue, 06 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-06-kubernetes-v1-33-fine-grained-supplementalgroups-control-graduates-to-beta/</guid><description>The new field, supplementalGroupsPolicy , was introduced as an opt-in alpha feature for Kubernetes v1. 31 and has graduated to beta in v1. 33; the corresponding feature gate ( SupplementalGroupsPolicy ) is now enabled by default. This feature enables to implement more precise control over supplemental groups in containers that can strengthen the security posture, particularly in accessing volumes. Moreover, it also enhances the transparency of UID/GID details in containers, offering improved security oversight. Please be aware that this beta release contains some behavioral breaking change. See The Behavioral Changes Introduced In Beta and Upgrade Considerations sections for details. Although the majority of Kubernetes cluster admins/users may not be aware, kubernetes, by default, merges group information from the Pod with information defined in /etc/group in the container image. Let&amp;rsquo;s see an example, below Pod manifest specifies runAsUser=1000 , runAsGroup=3000 and supplementalGroups=4000 in the Pod&amp;rsquo;s security context. What is the result of id command in the ctr container? The output should be similar to this: Where does group ID 50000 in supplementary groups ( groups field) come from, even though 50000 is not defined in the Pod&amp;rsquo;s manifest at all? The answer is /etc/group file in the container image. Checking the contents of /etc/group in the container image should show below: This shows that the container&amp;rsquo;s primary user 1000 belongs to the group 50000 in the last entry. Thus, the group membership defined in /etc/group in the container image for the container&amp;rsquo;s primary user is implicitly merged to the information from the Pod.</description></item><item><title>Kubernetes v1.33: Prevent PersistentVolume Leaks When Deleting out of Order graduates to GA</title><link>https://kubermates.org/docs/2025-05-05-kubernetes-v1-33-prevent-persistentvolume-leaks-when-deleting-out-of-order-gradu/</link><pubDate>Mon, 05 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-05-kubernetes-v1-33-prevent-persistentvolume-leaks-when-deleting-out-of-order-gradu/</guid><description>I am thrilled to announce that the feature to prevent PersistentVolume (or PVs for short) leaks when deleting out of order has graduated to General Availability (GA) in Kubernetes v1. 33! This improvement, initially introduced as a beta feature in Kubernetes v1. 31, ensures that your storage resources are properly reclaimed, preventing unwanted leaks. PersistentVolumeClaim (or PVC for short) is a user&amp;rsquo;s request for storage. A PV and PVC are considered Bound if a newly created PV or a matching PV is found. The PVs themselves are backed by volumes allocated by the storage backend. Normally, if the volume is to be deleted, then the expectation is to delete the PVC for a bound PV-PVC pair. However, there are no restrictions on deleting a PV before deleting a PVC. For a Bound PV-PVC pair, the ordering of PV-PVC deletion determines whether the PV reclaim policy is honored. The reclaim policy is honored if the PVC is deleted first; however, if the PV is deleted prior to deleting the PVC, then the reclaim policy is not exercised. As a result of this behavior, the associated storage asset in the external infrastructure is not removed. With the graduation to GA in Kubernetes v1.</description></item><item><title>Kubernetes v1.33: Mutable CSI Node Allocatable Count</title><link>https://kubermates.org/docs/2025-05-02-kubernetes-v1-33-mutable-csi-node-allocatable-count/</link><pubDate>Fri, 02 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-02-kubernetes-v1-33-mutable-csi-node-allocatable-count/</guid><description>Scheduling stateful applications reliably depends heavily on accurate information about resource availability on nodes. Kubernetes v1. 33 introduces an alpha feature called mutable CSI node allocatable count , allowing Container Storage Interface (CSI) drivers to dynamically update the reported maximum number of volumes that a node can handle. This capability significantly enhances the accuracy of pod scheduling decisions and reduces scheduling failures caused by outdated volume capacity information. Traditionally, Kubernetes CSI drivers report a static maximum volume attachment limit when initializing. However, actual attachment capacities can change during a node&amp;rsquo;s lifecycle for various reasons, such as: Static reporting can cause Kubernetes to schedule pods onto nodes that appear to have capacity but don&amp;rsquo;t, leading to pods stuck in a ContainerCreating state. With the new feature gate MutableCSINodeAllocatableCount , Kubernetes enables CSI drivers to dynamically adjust and report node attachment capacities at runtime. This ensures that the scheduler has the most accurate, up-to-date view of node capacity. When this feature is enabled, Kubernetes supports two mechanisms for updating the reported node volume limits: To use this alpha feature, you must enable the MutableCSINodeAllocatableCount feature gate in these components: Below is an example of configuring a CSI driver to enable periodic updates every 60 seconds: This configuration directs Kubelet to periodically call the CSI driver&amp;rsquo;s NodeGetInfo method every 60 seconds, updating the node’s allocatable volume count. Kubernetes enforces a minimum update interval of 10 seconds to balance accuracy and resource usage. In addition to periodic updates, Kubernetes now reacts to attachment failures. Specifically, if a volume attachment fails with a ResourceExhausted error (gRPC code 8 ), an immediate update is triggered to correct the allocatable count promptly.</description></item><item><title>Kubernetes v1.33: New features in DRA</title><link>https://kubermates.org/docs/2025-05-01-kubernetes-v1-33-new-features-in-dra/</link><pubDate>Thu, 01 May 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-05-01-kubernetes-v1-33-new-features-in-dra/</guid><description>Kubernetes Dynamic Resource Allocation (DRA) was originally introduced as an alpha feature in the v1. 26 release, and then went through a significant redesign for Kubernetes v1. 31. The main DRA feature went to beta in v1. 32, and the project hopes it will be generally available in Kubernetes v1. 34. The basic feature set of DRA provides a far more powerful and flexible API for requesting devices than Device Plugin. And while DRA remains a beta feature for v1. 33, the DRA team has been hard at work implementing a number of new features and UX improvements. One feature has been promoted to beta, while a number of new features have been added in alpha. The team has also made progress towards getting DRA ready for GA. Driver-owned Resource Claim Status was promoted to beta.</description></item><item><title>Kubernetes v1.33: Storage Capacity Scoring of Nodes for Dynamic Provisioning (alpha)</title><link>https://kubermates.org/docs/2025-04-30-kubernetes-v1-33-storage-capacity-scoring-of-nodes-for-dynamic-provisioning-alph/</link><pubDate>Wed, 30 Apr 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-04-30-kubernetes-v1-33-storage-capacity-scoring-of-nodes-for-dynamic-provisioning-alph/</guid><description>Kubernetes v1. 33 introduces a new alpha feature called StorageCapacityScoring. This feature adds a scoring method for pod scheduling with the topology-aware volume provisioning. This feature eases to schedule pods on nodes with either the most or least available storage capacity. This feature extends the kube-scheduler&amp;rsquo;s VolumeBinding plugin to perform scoring using node storage capacity information obtained from Storage Capacity. Currently, you can only filter out nodes with insufficient storage capacity. So, you have to use a scheduler extender to achieve storage-capacity-based pod scheduling. This feature is useful for provisioning node-local PVs, which have size limits based on the node&amp;rsquo;s storage capacity. By using this feature, you can assign the PVs to the nodes with the most available storage space so that you can expand the PVs later as much as possible. In another use case, you might want to reduce the number of nodes as much as possible for low operation costs in cloud environments by choosing the least storage capacity node. This feature helps maximize resource utilization by filling up nodes more sequentially, starting with the most utilized nodes first that still have enough storage capacity for the requested volume size. In the alpha phase, StorageCapacityScoring is disabled by default.</description></item><item><title>Kubernetes v1.33: Image Volumes graduate to beta!</title><link>https://kubermates.org/docs/2025-04-29-kubernetes-v1-33-image-volumes-graduate-to-beta/</link><pubDate>Tue, 29 Apr 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-04-29-kubernetes-v1-33-image-volumes-graduate-to-beta/</guid><description>Image Volumes were introduced as an Alpha feature with the Kubernetes v1. 31 release as part of KEP-4639. In Kubernetes v1. 33, this feature graduates to beta. Please note that the feature is still disabled by default, because not all container runtimes have full support for it. CRI-O supports the initial feature since version v1. 31 and will add support for Image Volumes as beta in v1. 33. containerd merged support for the alpha feature which will be part of the v2. 1. 0 release and is working on beta support as part of PR #11578. The major change for the beta graduation of Image Volumes is the support for subPath and subPathExpr mounts for containers via spec.</description></item><item><title>Kubernetes v1.33: HorizontalPodAutoscaler Configurable Tolerance</title><link>https://kubermates.org/docs/2025-04-28-kubernetes-v1-33-horizontalpodautoscaler-configurable-tolerance/</link><pubDate>Mon, 28 Apr 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-04-28-kubernetes-v1-33-horizontalpodautoscaler-configurable-tolerance/</guid><description>This post describes configurable tolerance for horizontal Pod autoscaling , a new alpha feature first available in Kubernetes 1. 33. Horizontal Pod Autoscaling is a well-known Kubernetes feature that allows your workload to automatically resize by adding or removing replicas based on resource utilization. Let&amp;rsquo;s say you have a web application running in a Kubernetes cluster with 50 replicas. You configure the HorizontalPodAutoscaler (HPA) to scale based on CPU utilization, with a target of 75% utilization. Now, imagine that the current CPU utilization across all replicas is 90%, which is higher than the desired 75%. The HPA will calculate the required number of replicas using the formula: In this example: So, the HPA will increase the number of replicas from 50 to 60 to reduce the load on each pod. Similarly, if the CPU utilization were to drop below 75%, the HPA would scale down the number of replicas accordingly. The Kubernetes documentation provides a detailed description of the scaling algorithm. In order to avoid replicas being created or deleted whenever a small metric fluctuation occurs, Kubernetes applies a form of hysteresis: it only changes the number of replicas when the current and desired metric values differ by more than 10%. In the example above, since the ratio between the current and desired metric values is (90/75), or 20% above target, exceeding the 10% tolerance, the scale-up action will proceed. This default tolerance of 10% is cluster-wide; in older Kubernetes releases, it could not be fine-tuned.</description></item><item><title>Kubernetes v1.33: User Namespaces enabled by default!</title><link>https://kubermates.org/docs/2025-04-25-kubernetes-v1-33-user-namespaces-enabled-by-default/</link><pubDate>Fri, 25 Apr 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-04-25-kubernetes-v1-33-user-namespaces-enabled-by-default/</guid><description>In Kubernetes v1. 33 support for user namespaces is enabled by default. This means that, when the stack requirements are met, pods can opt-in to use user namespaces. To use the feature there is no need to enable any Kubernetes feature flag anymore! In this blog post we answer some common questions about user namespaces. But, before we dive into that, let&amp;rsquo;s recap what user namespaces are and why they are important. Note: Linux user namespaces are a different concept from Kubernetes namespaces. The former is a Linux kernel feature; the latter is a Kubernetes feature. Linux provides different namespaces to isolate processes from each other. For example, a typical Kubernetes pod runs within a network namespace to isolate the network identity and a PID namespace to isolate the processes. One Linux namespace that was left behind is the user namespace. It isolates the UIDs and GIDs of the containers from the ones on the host. The identifiers in a container can be mapped to identifiers on the host in a way where host and container(s) never end up in overlapping UID/GIDs.</description></item><item><title>Kubernetes v1.33: Continuing the transition from Endpoints to EndpointSlices</title><link>https://kubermates.org/docs/2025-04-24-kubernetes-v1-33-continuing-the-transition-from-endpoints-to-endpointslices/</link><pubDate>Thu, 24 Apr 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-04-24-kubernetes-v1-33-continuing-the-transition-from-endpoints-to-endpointslices/</guid><description>Since the addition of EndpointSlices ( KEP-752 ) as alpha in v1. 15 and later GA in v1. 21, the Endpoints API in Kubernetes has been gathering dust. New Service features like dual-stack networking and traffic distribution are only supported via the EndpointSlice API, so all service proxies, Gateway API implementations, and similar controllers have had to be ported from using Endpoints to using EndpointSlices. At this point, the Endpoints API is really only there to avoid breaking end user workloads and scripts that still make use of it. As of Kubernetes 1. 33, the Endpoints API is now officially deprecated, and the API server will return warnings to users who read or write Endpoints resources rather than using EndpointSlices. Eventually, the plan (as documented in KEP-4974 ) is to change the Kubernetes Conformance criteria to no longer require that clusters run the Endpoints controller (which generates Endpoints objects based on Services and Pods), to avoid doing work that is unneeded in most modern-day clusters. Thus, while the Kubernetes deprecation policy means that the Endpoints type itself will probably never completely go away, users who still have workloads or scripts that use the Endpoints API should start migrating them to EndpointSlices. For end users, the biggest change between the Endpoints API and the EndpointSlice API is that while every Service with a selector has exactly 1 Endpoints object (with the same name as the Service), a Service may have any number of EndpointSlices associated with it: In this case, because the service is dual stack, it has 2 EndpointSlices: 1 for IPv4 addresses and 1 for IPv6 addresses. (The Endpoints API does not support dual stack, so the Endpoints object shows only the addresses in the cluster&amp;rsquo;s primary address family. ) Although any Service with multiple endpoints can have multiple EndpointSlices, there are three main cases where you will see this: An EndpointSlice can only represent endpoints of a single IP family, so dual-stack Services will have separate EndpointSlices for IPv4 and IPv6.</description></item><item><title>Kubernetes v1.33: Octarine</title><link>https://kubermates.org/docs/2025-04-23-kubernetes-v1-33-octarine/</link><pubDate>Wed, 23 Apr 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-04-23-kubernetes-v1-33-octarine/</guid><description>Editors: Agustina Barbetta, Aakanksha Bhende, Udi Hofesh, Ryota Sawada, Sneha Yadav Similar to previous releases, the release of Kubernetes v1. 33 introduces new stable, beta, and alpha features. The consistent delivery of high-quality releases underscores the strength of our development cycle and the vibrant support from our community. This release consists of 64 enhancements. Of those enhancements, 18 have graduated to Stable, 20 are entering Beta, 24 have entered Alpha, and 2 are deprecated or withdrawn. There are also several notable deprecations and removals in this release; make sure to read about those if you already run an older version of Kubernetes. The theme for Kubernetes v1. 33 is Octarine: The Color of Magic 1 , inspired by Terry Pratchett’s Discworld series. This release highlights the open source magic 2 that Kubernetes enables across the ecosystem. If you’re familiar with the world of Discworld, you might recognize a small swamp dragon perched atop the tower of the Unseen University, gazing up at the Kubernetes moon above the city of Ankh-Morpork with 64 stars 3 in the background. As Kubernetes moves into its second decade, we celebrate both the wizardry of its maintainers, the curiosity of new contributors, and the collaborative spirit that fuels the project. The v1.</description></item><item><title>Kubernetes Multicontainer Pods: An Overview</title><link>https://kubermates.org/docs/2025-04-22-kubernetes-multicontainer-pods-an-overview/</link><pubDate>Tue, 22 Apr 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-04-22-kubernetes-multicontainer-pods-an-overview/</guid><description>As cloud-native architectures continue to evolve, Kubernetes has become the go-to platform for deploying complex, distributed systems. One of the most powerful yet nuanced design patterns in this ecosystem is the sidecar pattern—a technique that allows developers to extend application functionality without diving deep into source code. Think of a sidecar like a trusty companion motorcycle attachment. Historically, IT infrastructures have always used auxiliary services to handle critical tasks. Before containers, we relied on background processes and helper daemons to manage logging, monitoring, and networking. The microservices revolution transformed this approach, making sidecars a structured and intentional architectural choice. With the rise of microservices, the sidecar pattern became more clearly defined, allowing developers to offload specific responsibilities from the main service without altering its code. Service meshes like Istio and Linkerd have popularized sidecar proxies, demonstrating how these companion containers can elegantly handle observability, security, and traffic management in distributed systems. In Kubernetes, sidecar containers operate within the same Pod as the main application, enabling communication and resource sharing. Does this sound just like defining multiple containers along each other inside the Pod? It actually does, and this is how sidecar containers had to be implemented before Kubernetes v1. 29. 0, which introduced native support for sidecars.</description></item><item><title>Introducing kube-scheduler-simulator</title><link>https://kubermates.org/docs/2025-04-07-introducing-kube-scheduler-simulator/</link><pubDate>Mon, 07 Apr 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-04-07-introducing-kube-scheduler-simulator/</guid><description>The Kubernetes Scheduler is a crucial control plane component that determines which node a Pod will run on. Thus, anyone utilizing Kubernetes relies on a scheduler. kube-scheduler-simulator is a simulator for the Kubernetes scheduler, that started as a Google Summer of Code 2021 project developed by me (Kensei Nakada) and later received a lot of contributions. This tool allows users to closely examine the scheduler’s behavior and decisions. It is useful for casual users who employ scheduling constraints (for example, inter-Pod affinity ) and experts who extend the scheduler with custom plugins. The scheduler often appears as a black box, composed of many plugins that each contribute to the scheduling decision-making process from their unique perspectives. Understanding its behavior can be challenging due to the multitude of factors it considers. Even if a Pod appears to be scheduled correctly in a simple test cluster, it might have been scheduled based on different calculations than expected. This discrepancy could lead to unexpected scheduling outcomes when deployed in a large production environment. Also, testing a scheduler is a complex challenge. There are countless patterns of operations executed within a real cluster, making it unfeasible to anticipate every scenario with a finite number of tests. More often than not, bugs are discovered only when the scheduler is deployed in an actual cluster.</description></item><item><title>Kubernetes v1.33 sneak peek</title><link>https://kubermates.org/docs/2025-03-26-kubernetes-v1-33-sneak-peek/</link><pubDate>Wed, 26 Mar 2025 10:30:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-03-26-kubernetes-v1-33-sneak-peek/</guid><description>As the release of Kubernetes v1. 33 approaches, the Kubernetes project continues to evolve. Features may be deprecated, removed, or replaced to improve the overall health of the project. This blog post outlines some planned changes for the v1. 33 release, which the release team believes you should be aware of to ensure the continued smooth operation of your Kubernetes environment and to keep you up-to-date with the latest developments. The information below is based on the current status of the v1. 33 release and is subject to change before the final release date. The Kubernetes project has a well-documented deprecation policy for features. This policy states that stable APIs may only be deprecated when a newer, stable version of that same API is available and that APIs have a minimum lifetime for each stability level. A deprecated API has been marked for removal in a future Kubernetes release. It will continue to function until removal (at least one year from the deprecation), but usage will result in a warning being displayed. Removed APIs are no longer available in the current version, at which point you must migrate to using the replacement.</description></item><item><title>Fresh Swap Features for Linux Users in Kubernetes 1.32</title><link>https://kubermates.org/docs/2025-03-25-fresh-swap-features-for-linux-users-in-kubernetes-1-32/</link><pubDate>Tue, 25 Mar 2025 10:00:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-03-25-fresh-swap-features-for-linux-users-in-kubernetes-1-32/</guid><description>Swap is a fundamental and an invaluable Linux feature. It offers numerous benefits, such as effectively increasing a node’s memory by swapping out unused data, shielding nodes from system-level memory spikes, preventing Pods from crashing when they hit their memory limits, and much more. As a result, the node special interest group within the Kubernetes project has invested significant effort into supporting swap on Linux nodes. The 1. 22 release introduced Alpha support for configuring swap memory usage for Kubernetes workloads running on Linux on a per-node basis. Later, in release 1. 28, support for swap on Linux nodes has graduated to Beta, along with many new improvements. In the following Kubernetes releases more improvements were made, paving the way to GA in the near future. Prior to version 1. 22, Kubernetes did not provide support for swap memory on Linux systems. This was due to the inherent difficulty in guaranteeing and accounting for pod memory utilization when swap memory was involved. As a result, swap support was deemed out of scope in the initial design of Kubernetes, and the default behavior of a kubelet was to fail to start if swap memory was detected on a node.</description></item><item><title>Ingress-nginx CVE-2025-1974: What You Need to Know</title><link>https://kubermates.org/docs/2025-03-24-ingress-nginx-cve-2025-1974-what-you-need-to-know/</link><pubDate>Mon, 24 Mar 2025 12:00:00 -0800</pubDate><guid>https://kubermates.org/docs/2025-03-24-ingress-nginx-cve-2025-1974-what-you-need-to-know/</guid><description>Today, the ingress-nginx maintainers have released patches for a batch of critical vulnerabilities that could make it easy for attackers to take over your Kubernetes cluster: ingress-nginx v1. 12. 1 and ingress-nginx v1. 11. 5. If you are among the over 40% of Kubernetes administrators using ingress-nginx , you should take action immediately to protect your users and data. Ingress is the traditional Kubernetes feature for exposing your workload Pods to the world so that they can be useful. In an implementation-agnostic way, Kubernetes users can define how their applications should be made available on the network. Then, an ingress controller uses that definition to set up local or cloud resources as required for the user’s particular situation and needs. Many different ingress controllers are available, to suit users of different cloud providers or brands of load balancers. Ingress-nginx is a software-only ingress controller provided by the Kubernetes project. Because of its versatility and ease of use, ingress-nginx is quite popular: it is deployed in over 40% of Kubernetes clusters! Ingress-nginx translates the requirements from Ingress objects into configuration for nginx, a powerful open source webserver daemon.</description></item><item><title>Introducing JobSet</title><link>https://kubermates.org/docs/2025-03-23-introducing-jobset/</link><pubDate>Sun, 23 Mar 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-03-23-introducing-jobset/</guid><description>Authors : Daniel Vega-Myhre (Google), Abdullah Gharaibeh (Google), Kevin Hannon (Red Hat) In this article, we introduce JobSet , an open source API for representing distributed jobs. The goal of JobSet is to provide a unified API for distributed ML training and HPC workloads on Kubernetes. The Kubernetes community’s recent enhancements to the batch ecosystem on Kubernetes has attracted ML engineers who have found it to be a natural fit for the requirements of running distributed training workloads. Large ML models (particularly LLMs) which cannot fit into the memory of the GPU or TPU chips on a single host are often distributed across tens of thousands of accelerator chips, which in turn may span thousands of hosts. As such, the model training code is often containerized and executed simultaneously on all these hosts, performing distributed computations which often shard both the model parameters and/or the training dataset across the target accelerator chips, using communication collective primitives like all-gather and all-reduce to perform distributed computations and synchronize gradients between hosts. These workload characteristics make Kubernetes a great fit for this type of workload, as efficiently scheduling and managing the lifecycle of containerized applications across a cluster of compute resources is an area where it shines. It is also very extensible, allowing developers to define their own Kubernetes APIs, objects, and controllers which manage the behavior and life cycle of these objects, allowing engineers to develop custom distributed training orchestration solutions to fit their needs. However, as distributed ML training techniques continue to evolve, existing Kubernetes primitives do not adequately model them alone anymore. Furthermore, the landscape of Kubernetes distributed training orchestration APIs has become fragmented, and each of the existing solutions in this fragmented landscape has certain limitations that make it non-optimal for distributed ML training. For example, the KubeFlow training operator defines custom APIs for different frameworks (e. g. PyTorchJob, TFJob, MPIJob, etc.</description></item><item><title>Spotlight on SIG Apps</title><link>https://kubermates.org/docs/2025-03-12-spotlight-on-sig-apps/</link><pubDate>Wed, 12 Mar 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-03-12-spotlight-on-sig-apps/</guid><description>In our ongoing SIG Spotlight series, we dive into the heart of the Kubernetes project by talking to the leaders of its various Special Interest Groups (SIGs). This time, we focus on SIG Apps , the group responsible for everything related to developing, deploying, and operating applications on Kubernetes. Sandipan Panda ( DevZero ) had the opportunity to interview Maciej Szulik ( Defense Unicorns ) and Janet Kuo ( Google ), the chairs and tech leads of SIG Apps. They shared their experiences, challenges, and visions for the future of application management within the Kubernetes ecosystem. Sandipan: Hello, could you start by telling us a bit about yourself, your role, and your journey within the Kubernetes community that led to your current roles in SIG Apps? Maciej : Hey, my name is Maciej, and I’m one of the leads for SIG Apps. Aside from this role, you can also find me helping SIG CLI and also being one of the Steering Committee members. I’ve been contributing to Kubernetes since late 2014 in various areas, including controllers, apiserver, and kubectl. Janet : Certainly! I&amp;rsquo;m Janet, a Staff Software Engineer at Google, and I&amp;rsquo;ve been deeply involved with the Kubernetes project since its early days, even before the 1. 0 launch in 2015. It&amp;rsquo;s been an amazing journey! My current role within the Kubernetes community is one of the chairs and tech leads of SIG Apps. My journey with SIG Apps started organically. I started with building the Deployment API and adding rolling update functionalities.</description></item><item><title>Spotlight on SIG etcd</title><link>https://kubermates.org/docs/2025-03-04-spotlight-on-sig-etcd/</link><pubDate>Tue, 04 Mar 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-03-04-spotlight-on-sig-etcd/</guid><description>In this SIG etcd spotlight we talked with James Blair , Marek Siarkowicz , Wenjia Zhang , and Benjamin Wang to learn a bit more about this Kubernetes Special Interest Group. Frederico: Hello, thank you for the time! Let’s start with some introductions, could you tell us a bit about yourself, your role and how you got involved in Kubernetes. Benjamin: Hello, I am Benjamin. I am a SIG etcd Tech Lead and one of the etcd maintainers. I work for VMware, which is part of the Broadcom group. I got involved in Kubernetes &amp;amp; etcd &amp;amp; CSI ( Container Storage Interface ) because of work and also a big passion for open source. I have been working on Kubernetes &amp;amp; etcd (and also CSI) since 2020. James: Hey team, I’m James, a co-chair for SIG etcd and etcd maintainer. I work at Red Hat as a Specialist Architect helping people adopt cloud native technology. I got involved with the Kubernetes ecosystem in 2019. Around the end of 2022 I noticed how the etcd community and project needed help so started contributing as often as I could. There is a saying in our community that &amp;ldquo;you come for the technology, and stay for the people&amp;rdquo;: for me this is absolutely real, it’s been a wonderful journey so far and I’m excited to support our community moving forward.</description></item><item><title>NFTables mode for kube-proxy</title><link>https://kubermates.org/docs/2025-02-28-nftables-mode-for-kube-proxy/</link><pubDate>Fri, 28 Feb 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-02-28-nftables-mode-for-kube-proxy/</guid><description>A new nftables mode for kube-proxy was introduced as an alpha feature in Kubernetes 1. 29. Currently in beta, it is expected to be GA as of 1. 33. The new mode fixes long-standing performance problems with the iptables mode and all users running on systems with reasonably-recent kernels are encouraged to try it out. (For compatibility reasons, even once nftables becomes GA, iptables will still be the default. ) The iptables API was designed for implementing simple firewalls, and has problems scaling up to support Service proxying in a large Kubernetes cluster with tens of thousands of Services. In general, the ruleset generated by kube-proxy in iptables mode has a number of iptables rules proportional to the sum of the number of Services and the total number of endpoints. In particular, at the top level of the ruleset, there is one rule to test each possible Service IP (and port) that a packet might be addressed to: This means that when a packet comes in, the time it takes the kernel to check it against all of the Service rules is O(n) in the number of Services. As the number of Services increases, both the average and the worst-case latency for the first packet of a new connection increases (with the difference between best-case, average, and worst-case being mostly determined by whether a given Service IP address appears earlier or later in the KUBE-SERVICES chain). By contrast, with nftables, the normal way to write a ruleset like this is to have a single rule, using a &amp;ldquo;verdict map&amp;rdquo; to do the dispatch: Since there&amp;rsquo;s only a single rule, with a roughly O(1) map lookup, packet processing time is more or less constant regardless of cluster size, and the best/average/worst cases are very similar: But note the huge difference in the vertical scale between the iptables and nftables graphs! In the clusters with 5000 and 10,000 Services, the p50 (average) latency for nftables is about the same as the p01 (approximately best-case) latency for iptables. In the 30,000 Service cluster, the p99 (approximately worst-case) latency for nftables manages to beat out the p01 latency for iptables by a few microseconds! Here&amp;rsquo;s both sets of data together, but you may have to squint to see the nftables results!: While the improvements to data plane latency in large clusters are great, there&amp;rsquo;s another problem with iptables kube-proxy that often keeps users from even being able to grow their clusters to that size: the time it takes kube-proxy to program new iptables rules when Services and their endpoints change.</description></item><item><title>The Cloud Controller Manager Chicken and Egg Problem</title><link>https://kubermates.org/docs/2025-02-14-the-cloud-controller-manager-chicken-and-egg-problem/</link><pubDate>Fri, 14 Feb 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-02-14-the-cloud-controller-manager-chicken-and-egg-problem/</guid><description>Kubernetes 1. 31 completed the largest migration in Kubernetes history , removing the in-tree cloud provider. While the component migration is now done, this leaves some additional complexity for users and installer projects (for example, kOps or Cluster API). We will go over those additional steps and failure points and make recommendations for cluster owners. This migration was complex and some logic had to be extracted from the core components, building four new subsystems. The cloud controller manager is part of the control plane. It is a critical component that replaces some functionality that existed previously in the kube-controller-manager and the kubelet. Components of Kubernetes One of the most critical functionalities of the cloud controller manager is the node controller, which is responsible for the initialization of the nodes. As you can see in the following diagram, when the kubelet starts, it registers the Node object with the apiserver, Tainting the node so it can be processed first by the cloud-controller-manager. The initial Node is missing the cloud-provider specific information, like the Node Addresses and the Labels with the cloud provider specific information like the Node, Region and Instance type information. Chicken and egg problem sequence diagram This new initialization process adds some latency to the node readiness. Previously, the kubelet was able to initialize the node at the same time it created the node.</description></item><item><title>Spotlight on SIG Architecture: Enhancements</title><link>https://kubermates.org/docs/2025-01-21-spotlight-on-sig-architecture-enhancements/</link><pubDate>Tue, 21 Jan 2025 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2025-01-21-spotlight-on-sig-architecture-enhancements/</guid><description>This is the fourth interview of a SIG Architecture Spotlight series that will cover the different subprojects, and we will be covering SIG Architecture: Enhancements. In this SIG Architecture spotlight we talked with Kirsten Garrison , lead of the Enhancements subproject. Frederico (FSM): Hi Kirsten, very happy to have the opportunity to talk about the Enhancements subproject. Let&amp;rsquo;s start with some quick information about yourself and your role. Kirsten Garrison (KG) : I’m a lead of the Enhancements subproject of SIG-Architecture and currently work at Google. I first got involved by contributing to the service-catalog project with the help of Carolyn Van Slyck. With time, I joined the Release team , eventually becoming the Enhancements Lead and a Release Lead shadow. While on the release team, I worked on some ideas to make the process better for the SIGs and Enhancements team (the opt-in process) based on my team’s experiences. Eventually, I started attending Subproject meetings and contributing to the Subproject’s work. FSM: You mentioned the Enhancements subproject: how would you describe its main goals and areas of intervention? KG : The Enhancements Subproject primarily concerns itself with the Kubernetes Enhancement Proposal ( KEP for short)—the &amp;ldquo;design&amp;rdquo; documents required for all features and significant changes to the Kubernetes project. FSM: The improvement of the KEP process was (and is) one in which SIG Architecture was heavily involved. Could you explain the process to those that aren’t aware of it? KG : Every release , the SIGs let the Release Team know which features they intend to work on to be put into the release.</description></item><item><title>Kubernetes 1.32: Moving Volume Group Snapshots to Beta</title><link>https://kubermates.org/docs/2024-12-18-kubernetes-1-32-moving-volume-group-snapshots-to-beta/</link><pubDate>Wed, 18 Dec 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-12-18-kubernetes-1-32-moving-volume-group-snapshots-to-beta/</guid><description>Volume group snapshots were introduced as an Alpha feature with the Kubernetes 1. 27 release. The recent release of Kubernetes v1. 32 moved that support to beta. The support for volume group snapshots relies on a set of extension APIs for group snapshots. These APIs allow users to take crash consistent snapshots for a set of volumes. Behind the scenes, Kubernetes uses a label selector to group multiple PersistentVolumeClaims for snapshotting. A key aim is to allow you restore that set of snapshots to new volumes and recover your workload based on a crash consistent recovery point. This new feature is only supported for CSI volume drivers. Some storage systems provide the ability to create a crash consistent snapshot of multiple volumes. A group snapshot represents copies made from multiple volumes, that are taken at the same point-in-time. A group snapshot can be used either to rehydrate new volumes (pre-populated with the snapshot data) or to restore existing volumes to a previous state (represented by the snapshots).</description></item><item><title>Enhancing Kubernetes API Server Efficiency with API Streaming</title><link>https://kubermates.org/docs/2024-12-17-enhancing-kubernetes-api-server-efficiency-with-api-streaming/</link><pubDate>Tue, 17 Dec 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-12-17-enhancing-kubernetes-api-server-efficiency-with-api-streaming/</guid><description>Managing Kubernetes clusters efficiently is critical, especially as their size is growing. A significant challenge with large clusters is the memory overhead caused by list requests. In the existing implementation, the kube-apiserver processes list requests by assembling the entire response in-memory before transmitting any data to the client. But what if the response body is substantial, say hundreds of megabytes? Additionally, imagine a scenario where multiple list requests flood in simultaneously, perhaps after a brief network outage. While API Priority and Fairness has proven to reasonably protect kube-apiserver from CPU overload, its impact is visibly smaller for memory protection. This can be explained by the differing nature of resource consumption by a single API request - the CPU usage at any given time is capped by a constant, whereas memory, being uncompressible, can grow proportionally with the number of processed objects and is unbounded. This situation poses a genuine risk, potentially overwhelming and crashing any kube-apiserver within seconds due to out-of-memory (OOM) conditions. To better visualize the issue, let&amp;rsquo;s consider the below graph. The graph shows the memory usage of a kube-apiserver during a synthetic test. (see the synthetic test section for more details). The results clearly show that increasing the number of informers significantly boosts the server&amp;rsquo;s memory consumption. Notably, at approximately 16:40, the server crashed when serving only 16 informers.</description></item><item><title>Kubernetes v1.32 Adds A New CPU Manager Static Policy Option For Strict CPU Reservation</title><link>https://kubermates.org/docs/2024-12-16-kubernetes-v1-32-adds-a-new-cpu-manager-static-policy-option-for-strict-cpu-rese/</link><pubDate>Mon, 16 Dec 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-12-16-kubernetes-v1-32-adds-a-new-cpu-manager-static-policy-option-for-strict-cpu-rese/</guid><description>In Kubernetes v1. 32, after years of community discussion, we are excited to introduce a strict-cpu-reservation option for the CPU Manager static policy. This feature is currently in alpha, with the associated policy hidden by default. You can only use the policy if you explicitly enable the alpha behavior in your cluster. The CPU Manager static policy is used to reduce latency or improve performance. The reservedSystemCPUs defines an explicit CPU set for OS system daemons and kubernetes system daemons. This option is designed for Telco/NFV type use cases where uncontrolled interrupts/timers may impact the workload performance. you can use this option to define the explicit cpuset for the system/kubernetes daemons as well as the interrupts/timers, so the rest CPUs on the system can be used exclusively for workloads, with less impact from uncontrolled interrupts/timers. More details of this parameter can be found on the Explicitly Reserved CPU List page. If you want to protect your system daemons and interrupt processing, the obvious way is to use the reservedSystemCPUs option. However, until the Kubernetes v1. 32 release, this isolation was only implemented for guaranteed pods that made requests for a whole number of CPUs.</description></item><item><title>Kubernetes v1.32: Memory Manager Goes GA</title><link>https://kubermates.org/docs/2024-12-13-kubernetes-v1-32-memory-manager-goes-ga/</link><pubDate>Fri, 13 Dec 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-12-13-kubernetes-v1-32-memory-manager-goes-ga/</guid><description>With Kubernetes 1. 32, the memory manager has officially graduated to General Availability (GA), marking a significant milestone in the journey toward efficient and predictable memory allocation for containerized applications. Since Kubernetes v1. 22, where it graduated to beta, the memory manager has proved itself reliable, stable and a good complementary feature for the CPU Manager. As part of kubelet&amp;rsquo;s workload admission process, the memory manager provides topology hints to optimize memory allocation and alignment. This enables users to allocate exclusive memory for Pods in the Guaranteed QoS class. More details about the process can be found in the memory manager goes to beta blog. Most of the changes introduced since the Beta are bug fixes, internal refactoring and observability improvements, such as metrics and better logging. As part of the effort to increase the observability of memory manager, new metrics have been added to provide some statistics on memory allocation patterns. memory_manager_pinning_requests_total - tracks the number of times the pod spec required the memory manager to pin memory pages. memory_manager_pinning_errors_total - tracks the number of times the pod spec required the memory manager to pin memory pages, but the allocation failed. The kubelet does not guarantee pod ordering when admitting pods after a restart or reboot.</description></item><item><title>Kubernetes v1.32: QueueingHint Brings a New Possibility to Optimize Pod Scheduling</title><link>https://kubermates.org/docs/2024-12-12-kubernetes-v1-32-queueinghint-brings-a-new-possibility-to-optimize-pod-schedulin/</link><pubDate>Thu, 12 Dec 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-12-12-kubernetes-v1-32-queueinghint-brings-a-new-possibility-to-optimize-pod-schedulin/</guid><description>The Kubernetes scheduler is the core component that selects the nodes on which new Pods run. The scheduler processes these new Pods one by one. Therefore, the larger your clusters, the more important the throughput of the scheduler becomes. Over the years, Kubernetes SIG Scheduling has improved the throughput of the scheduler in multiple enhancements. This blog post describes a major improvement to the scheduler in Kubernetes v1. 32: a scheduling context element named QueueingHint. This page provides background knowledge of the scheduler and explains how QueueingHint improves scheduling throughput. The scheduler stores all unscheduled Pods in an internal component called the scheduling queue. The scheduling queue consists of the following data structures: The Kubernetes scheduler is implemented following the Kubernetes scheduling framework. And, all scheduling features are implemented as plugins (e. g. , Pod affinity is implemented in the InterPodAffinity plugin.</description></item><item><title>Kubernetes v1.32: Penelope</title><link>https://kubermates.org/docs/2024-12-11-kubernetes-v1-32-penelope/</link><pubDate>Wed, 11 Dec 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-12-11-kubernetes-v1-32-penelope/</guid><description>Editors: Matteo Bianchi, Edith Puclla, William Rizzo, Ryota Sawada, Rashan Smith Announcing the release of Kubernetes v1. 32: Penelope! In line with previous releases, the release of Kubernetes v1. 32 introduces new stable, beta, and alpha features. The consistent delivery of high-quality releases underscores the strength of our development cycle and the vibrant support from our community. This release consists of 44 enhancements in total. Of those enhancements, 13 have graduated to Stable, 12 are entering Beta, and 19 have entered in Alpha. The Kubernetes v1. 32 Release Theme is &amp;ldquo;Penelope&amp;rdquo;. If Kubernetes is Ancient Greek for &amp;ldquo;pilot&amp;rdquo;, in this release we start from that origin and reflect on the last 10 years of Kubernetes and our accomplishments: each release cycle is a journey, and just like Penelope, in &amp;ldquo;The Odyssey&amp;rdquo;, weaved for 10 years &amp;ndash; each night removing parts of what she had done during the day &amp;ndash; so does each release add new features and removes others, albeit here with a much clearer purpose of constantly improving Kubernetes. With v1. 32 being the last release in the year Kubernetes marks its first decade anniversary, we wanted to honour all of those that have been part of the global Kubernetes crew that roams the cloud-native seas through perils and challanges: may we continue to weave the future of Kubernetes together. In this release, like the previous one, the Kubernetes project continues proposing a number of enhancements to the Dynamic Resource Allocation (DRA), a key component of the Kubernetes resource management system.</description></item><item><title>Gateway API v1.2: WebSockets, Timeouts, Retries, and More</title><link>https://kubermates.org/docs/2024-11-21-gateway-api-v1-2-websockets-timeouts-retries-and-more/</link><pubDate>Thu, 21 Nov 2024 09:00:00 -0800</pubDate><guid>https://kubermates.org/docs/2024-11-21-gateway-api-v1-2-websockets-timeouts-retries-and-more/</guid><description>Kubernetes SIG Network is delighted to announce the general availability of Gateway API v1. 2! This version of the API was released on October 3, and we&amp;rsquo;re delighted to report that we now have a number of conformant implementations of it for you to try out. Gateway API v1. 2 brings a number of new features to the Standard channel (Gateway API&amp;rsquo;s GA release channel), introduces some new experimental features, and inaugurates our new release process — but it also brings two breaking changes that you&amp;rsquo;ll want to be careful of. Now that the v1 versions of GRPCRoute and ReferenceGrant have graduated to Standard, the old v1alpha2 versions have been removed from both the Standard and Experimental channels, in order to ease the maintenance burden that perpetually supporting the old versions would place on the Gateway API community. Before upgrading to Gateway API v1. 2, you&amp;rsquo;ll want to confirm that any implementations of Gateway API have been upgraded to support the v1 API version of these resources instead of the v1alpha2 API version. Note that even if you&amp;rsquo;ve been using v1 in your YAML manifests, a controller may still be using v1alpha2 which would cause it to fail during this upgrade. Additionally, Kubernetes itself goes to some effort to stop you from removing a CRD version that it thinks you&amp;rsquo;re using: check out the release notes for more information about what you need to do to safely upgrade. A much smaller breaking change:. status. supportedFeatures in a Gateway is now a list of objects instead of a list of strings.</description></item><item><title>How we built a dynamic Kubernetes API Server for the API Aggregation Layer in Cozystack</title><link>https://kubermates.org/docs/2024-11-21-how-we-built-a-dynamic-kubernetes-api-server-for-the-api-aggregation-layer-in-co/</link><pubDate>Thu, 21 Nov 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-11-21-how-we-built-a-dynamic-kubernetes-api-server-for-the-api-aggregation-layer-in-co/</guid><description>Hi there! I&amp;rsquo;m Andrei Kvapil, but you might know me as @kvaps in communities dedicated to Kubernetes and cloud-native tools. In this article, I want to share how we implemented our own extension api-server in the open-source PaaS platform, Cozystack. Kubernetes truly amazes me with its powerful extensibility features. You&amp;rsquo;re probably already familiar with the controller concept and frameworks like kubebuilder and operator-sdk that help you implement it. In a nutshell, they allow you to extend your Kubernetes cluster by defining custom resources (CRDs) and writing additional controllers that handle your business logic for reconciling and managing these kinds of resources. This approach is well-documented, with a wealth of information available online on how to develop your own operators. However, this is not the only way to extend the Kubernetes API. For more complex scenarios such as implementing imperative logic, managing subresources, and dynamically generating responses—the Kubernetes API aggregation layer provides an effective alternative. Through the aggregation layer, you can develop a custom extension API server and seamlessly integrate it within the broader Kubernetes API framework. In this article, I will explore the API aggregation layer, the types of challenges it is well-suited to address, cases where it may be less appropriate, and how we utilized this model to implement our own extension API server in Cozystack. First, let&amp;rsquo;s get definitions straight to avoid any confusion down the road. The API aggregation layer is a feature in Kubernetes, while an extension api-server is a specific implementation of an API server for the aggregation layer.</description></item><item><title>Kubernetes v1.32 sneak peek</title><link>https://kubermates.org/docs/2024-11-08-kubernetes-v1-32-sneak-peek/</link><pubDate>Fri, 08 Nov 2024 00:00:00 +0000</pubDate><guid>https://kubermates.org/docs/2024-11-08-kubernetes-v1-32-sneak-peek/</guid><description>As we get closer to the release date for Kubernetes v1. 32, the project develops and matures. Features may be deprecated, removed, or replaced with better ones for the project&amp;rsquo;s overall health. This blog outlines some of the planned changes for the Kubernetes v1. 32 release, that the release team feels you should be aware of, for the continued maintenance of your Kubernetes environment and keeping up to date with the latest changes. Information listed below is based on the current status of the v1. 32 release and may change before the actual release date. The Kubernetes project has a well-documented deprecation policy for features. This policy states that stable APIs may only be deprecated when a newer, stable version of that API is available and that APIs have a minimum lifetime for each stability level. A deprecated API has been marked for removal in a future Kubernetes release will continue to function until removal (at least one year from the deprecation). Its usage will result in a warning being displayed. Removed APIs are no longer available in the current version, so you must migrate to use the replacement instead.</description></item></channel></rss>